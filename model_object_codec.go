/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ObjectCodec struct for ObjectCodec
type ObjectCodec struct {
	JsonFactory *JsonFactory `json:"jsonFactory,omitempty"`
	Factory *JsonFactory `json:"factory,omitempty"`
}

// NewObjectCodec instantiates a new ObjectCodec object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObjectCodec() *ObjectCodec {
	this := ObjectCodec{}
	return &this
}

// NewObjectCodecWithDefaults instantiates a new ObjectCodec object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObjectCodecWithDefaults() *ObjectCodec {
	this := ObjectCodec{}
	return &this
}

// GetJsonFactory returns the JsonFactory field value if set, zero value otherwise.
func (o *ObjectCodec) GetJsonFactory() JsonFactory {
	if o == nil || o.JsonFactory == nil {
		var ret JsonFactory
		return ret
	}
	return *o.JsonFactory
}

// GetJsonFactoryOk returns a tuple with the JsonFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectCodec) GetJsonFactoryOk() (*JsonFactory, bool) {
	if o == nil || o.JsonFactory == nil {
		return nil, false
	}
	return o.JsonFactory, true
}

// HasJsonFactory returns a boolean if a field has been set.
func (o *ObjectCodec) HasJsonFactory() bool {
	if o != nil && o.JsonFactory != nil {
		return true
	}

	return false
}

// SetJsonFactory gets a reference to the given JsonFactory and assigns it to the JsonFactory field.
func (o *ObjectCodec) SetJsonFactory(v JsonFactory) {
	o.JsonFactory = &v
}

// GetFactory returns the Factory field value if set, zero value otherwise.
func (o *ObjectCodec) GetFactory() JsonFactory {
	if o == nil || o.Factory == nil {
		var ret JsonFactory
		return ret
	}
	return *o.Factory
}

// GetFactoryOk returns a tuple with the Factory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObjectCodec) GetFactoryOk() (*JsonFactory, bool) {
	if o == nil || o.Factory == nil {
		return nil, false
	}
	return o.Factory, true
}

// HasFactory returns a boolean if a field has been set.
func (o *ObjectCodec) HasFactory() bool {
	if o != nil && o.Factory != nil {
		return true
	}

	return false
}

// SetFactory gets a reference to the given JsonFactory and assigns it to the Factory field.
func (o *ObjectCodec) SetFactory(v JsonFactory) {
	o.Factory = &v
}

func (o ObjectCodec) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JsonFactory != nil {
		toSerialize["jsonFactory"] = o.JsonFactory
	}
	if o.Factory != nil {
		toSerialize["factory"] = o.Factory
	}
	return json.Marshal(toSerialize)
}

type NullableObjectCodec struct {
	value *ObjectCodec
	isSet bool
}

func (v NullableObjectCodec) Get() *ObjectCodec {
	return v.value
}

func (v *NullableObjectCodec) Set(val *ObjectCodec) {
	v.value = val
	v.isSet = true
}

func (v NullableObjectCodec) IsSet() bool {
	return v.isSet
}

func (v *NullableObjectCodec) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObjectCodec(val *ObjectCodec) *NullableObjectCodec {
	return &NullableObjectCodec{value: val, isSet: true}
}

func (v NullableObjectCodec) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObjectCodec) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


