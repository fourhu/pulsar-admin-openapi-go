/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonParser struct for JsonParser
type JsonParser struct {
	Closed *bool `json:"closed,omitempty"`
	CurrentLocation *JsonLocation `json:"currentLocation,omitempty"`
	Codec *ObjectCodec `json:"codec,omitempty"`
	BinaryValue *[]string `json:"binaryValue,omitempty"`
	CurrentValue *map[string]interface{} `json:"currentValue,omitempty"`
	ParsingContext *JsonStreamContext `json:"parsingContext,omitempty"`
	TokenLocation *JsonLocation `json:"tokenLocation,omitempty"`
	InputSource *map[string]interface{} `json:"inputSource,omitempty"`
	FeatureMask *int32 `json:"featureMask,omitempty"`
	FormatFeatures *int32 `json:"formatFeatures,omitempty"`
	CurrentToken *string `json:"currentToken,omitempty"`
	CurrentTokenId *int32 `json:"currentTokenId,omitempty"`
	ExpectedStartArrayToken *bool `json:"expectedStartArrayToken,omitempty"`
	ExpectedStartObjectToken *bool `json:"expectedStartObjectToken,omitempty"`
	LastClearedToken *string `json:"lastClearedToken,omitempty"`
	CurrentName *string `json:"currentName,omitempty"`
	TextOffset *int32 `json:"textOffset,omitempty"`
	NumberValue *map[string]interface{} `json:"numberValue,omitempty"`
	NumberType *string `json:"numberType,omitempty"`
	BigIntegerValue *int32 `json:"bigIntegerValue,omitempty"`
	DecimalValue *float32 `json:"decimalValue,omitempty"`
	EmbeddedObject *map[string]interface{} `json:"embeddedObject,omitempty"`
	ValueAsInt *int32 `json:"valueAsInt,omitempty"`
	ValueAsLong *int64 `json:"valueAsLong,omitempty"`
	ValueAsDouble *float64 `json:"valueAsDouble,omitempty"`
	ValueAsBoolean *bool `json:"valueAsBoolean,omitempty"`
	ValueAsString *string `json:"valueAsString,omitempty"`
	ObjectId *map[string]interface{} `json:"objectId,omitempty"`
	TypeId *map[string]interface{} `json:"typeId,omitempty"`
	Text *string `json:"text,omitempty"`
	TextCharacters *[]string `json:"textCharacters,omitempty"`
	TextLength *int32 `json:"textLength,omitempty"`
	BooleanValue *bool `json:"booleanValue,omitempty"`
	ByteValue *string `json:"byteValue,omitempty"`
	DoubleValue *float64 `json:"doubleValue,omitempty"`
	FloatValue *float32 `json:"floatValue,omitempty"`
	LongValue *int64 `json:"longValue,omitempty"`
	ShortValue *int32 `json:"shortValue,omitempty"`
	IntValue *int32 `json:"intValue,omitempty"`
	Schema *FormatSchema `json:"schema,omitempty"`
}

// NewJsonParser instantiates a new JsonParser object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonParser() *JsonParser {
	this := JsonParser{}
	return &this
}

// NewJsonParserWithDefaults instantiates a new JsonParser object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonParserWithDefaults() *JsonParser {
	this := JsonParser{}
	return &this
}

// GetClosed returns the Closed field value if set, zero value otherwise.
func (o *JsonParser) GetClosed() bool {
	if o == nil || o.Closed == nil {
		var ret bool
		return ret
	}
	return *o.Closed
}

// GetClosedOk returns a tuple with the Closed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetClosedOk() (*bool, bool) {
	if o == nil || o.Closed == nil {
		return nil, false
	}
	return o.Closed, true
}

// HasClosed returns a boolean if a field has been set.
func (o *JsonParser) HasClosed() bool {
	if o != nil && o.Closed != nil {
		return true
	}

	return false
}

// SetClosed gets a reference to the given bool and assigns it to the Closed field.
func (o *JsonParser) SetClosed(v bool) {
	o.Closed = &v
}

// GetCurrentLocation returns the CurrentLocation field value if set, zero value otherwise.
func (o *JsonParser) GetCurrentLocation() JsonLocation {
	if o == nil || o.CurrentLocation == nil {
		var ret JsonLocation
		return ret
	}
	return *o.CurrentLocation
}

// GetCurrentLocationOk returns a tuple with the CurrentLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCurrentLocationOk() (*JsonLocation, bool) {
	if o == nil || o.CurrentLocation == nil {
		return nil, false
	}
	return o.CurrentLocation, true
}

// HasCurrentLocation returns a boolean if a field has been set.
func (o *JsonParser) HasCurrentLocation() bool {
	if o != nil && o.CurrentLocation != nil {
		return true
	}

	return false
}

// SetCurrentLocation gets a reference to the given JsonLocation and assigns it to the CurrentLocation field.
func (o *JsonParser) SetCurrentLocation(v JsonLocation) {
	o.CurrentLocation = &v
}

// GetCodec returns the Codec field value if set, zero value otherwise.
func (o *JsonParser) GetCodec() ObjectCodec {
	if o == nil || o.Codec == nil {
		var ret ObjectCodec
		return ret
	}
	return *o.Codec
}

// GetCodecOk returns a tuple with the Codec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCodecOk() (*ObjectCodec, bool) {
	if o == nil || o.Codec == nil {
		return nil, false
	}
	return o.Codec, true
}

// HasCodec returns a boolean if a field has been set.
func (o *JsonParser) HasCodec() bool {
	if o != nil && o.Codec != nil {
		return true
	}

	return false
}

// SetCodec gets a reference to the given ObjectCodec and assigns it to the Codec field.
func (o *JsonParser) SetCodec(v ObjectCodec) {
	o.Codec = &v
}

// GetBinaryValue returns the BinaryValue field value if set, zero value otherwise.
func (o *JsonParser) GetBinaryValue() []string {
	if o == nil || o.BinaryValue == nil {
		var ret []string
		return ret
	}
	return *o.BinaryValue
}

// GetBinaryValueOk returns a tuple with the BinaryValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetBinaryValueOk() (*[]string, bool) {
	if o == nil || o.BinaryValue == nil {
		return nil, false
	}
	return o.BinaryValue, true
}

// HasBinaryValue returns a boolean if a field has been set.
func (o *JsonParser) HasBinaryValue() bool {
	if o != nil && o.BinaryValue != nil {
		return true
	}

	return false
}

// SetBinaryValue gets a reference to the given []string and assigns it to the BinaryValue field.
func (o *JsonParser) SetBinaryValue(v []string) {
	o.BinaryValue = &v
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *JsonParser) GetCurrentValue() map[string]interface{} {
	if o == nil || o.CurrentValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCurrentValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.CurrentValue == nil {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *JsonParser) HasCurrentValue() bool {
	if o != nil && o.CurrentValue != nil {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given map[string]interface{} and assigns it to the CurrentValue field.
func (o *JsonParser) SetCurrentValue(v map[string]interface{}) {
	o.CurrentValue = &v
}

// GetParsingContext returns the ParsingContext field value if set, zero value otherwise.
func (o *JsonParser) GetParsingContext() JsonStreamContext {
	if o == nil || o.ParsingContext == nil {
		var ret JsonStreamContext
		return ret
	}
	return *o.ParsingContext
}

// GetParsingContextOk returns a tuple with the ParsingContext field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetParsingContextOk() (*JsonStreamContext, bool) {
	if o == nil || o.ParsingContext == nil {
		return nil, false
	}
	return o.ParsingContext, true
}

// HasParsingContext returns a boolean if a field has been set.
func (o *JsonParser) HasParsingContext() bool {
	if o != nil && o.ParsingContext != nil {
		return true
	}

	return false
}

// SetParsingContext gets a reference to the given JsonStreamContext and assigns it to the ParsingContext field.
func (o *JsonParser) SetParsingContext(v JsonStreamContext) {
	o.ParsingContext = &v
}

// GetTokenLocation returns the TokenLocation field value if set, zero value otherwise.
func (o *JsonParser) GetTokenLocation() JsonLocation {
	if o == nil || o.TokenLocation == nil {
		var ret JsonLocation
		return ret
	}
	return *o.TokenLocation
}

// GetTokenLocationOk returns a tuple with the TokenLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTokenLocationOk() (*JsonLocation, bool) {
	if o == nil || o.TokenLocation == nil {
		return nil, false
	}
	return o.TokenLocation, true
}

// HasTokenLocation returns a boolean if a field has been set.
func (o *JsonParser) HasTokenLocation() bool {
	if o != nil && o.TokenLocation != nil {
		return true
	}

	return false
}

// SetTokenLocation gets a reference to the given JsonLocation and assigns it to the TokenLocation field.
func (o *JsonParser) SetTokenLocation(v JsonLocation) {
	o.TokenLocation = &v
}

// GetInputSource returns the InputSource field value if set, zero value otherwise.
func (o *JsonParser) GetInputSource() map[string]interface{} {
	if o == nil || o.InputSource == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.InputSource
}

// GetInputSourceOk returns a tuple with the InputSource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetInputSourceOk() (*map[string]interface{}, bool) {
	if o == nil || o.InputSource == nil {
		return nil, false
	}
	return o.InputSource, true
}

// HasInputSource returns a boolean if a field has been set.
func (o *JsonParser) HasInputSource() bool {
	if o != nil && o.InputSource != nil {
		return true
	}

	return false
}

// SetInputSource gets a reference to the given map[string]interface{} and assigns it to the InputSource field.
func (o *JsonParser) SetInputSource(v map[string]interface{}) {
	o.InputSource = &v
}

// GetFeatureMask returns the FeatureMask field value if set, zero value otherwise.
func (o *JsonParser) GetFeatureMask() int32 {
	if o == nil || o.FeatureMask == nil {
		var ret int32
		return ret
	}
	return *o.FeatureMask
}

// GetFeatureMaskOk returns a tuple with the FeatureMask field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetFeatureMaskOk() (*int32, bool) {
	if o == nil || o.FeatureMask == nil {
		return nil, false
	}
	return o.FeatureMask, true
}

// HasFeatureMask returns a boolean if a field has been set.
func (o *JsonParser) HasFeatureMask() bool {
	if o != nil && o.FeatureMask != nil {
		return true
	}

	return false
}

// SetFeatureMask gets a reference to the given int32 and assigns it to the FeatureMask field.
func (o *JsonParser) SetFeatureMask(v int32) {
	o.FeatureMask = &v
}

// GetFormatFeatures returns the FormatFeatures field value if set, zero value otherwise.
func (o *JsonParser) GetFormatFeatures() int32 {
	if o == nil || o.FormatFeatures == nil {
		var ret int32
		return ret
	}
	return *o.FormatFeatures
}

// GetFormatFeaturesOk returns a tuple with the FormatFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetFormatFeaturesOk() (*int32, bool) {
	if o == nil || o.FormatFeatures == nil {
		return nil, false
	}
	return o.FormatFeatures, true
}

// HasFormatFeatures returns a boolean if a field has been set.
func (o *JsonParser) HasFormatFeatures() bool {
	if o != nil && o.FormatFeatures != nil {
		return true
	}

	return false
}

// SetFormatFeatures gets a reference to the given int32 and assigns it to the FormatFeatures field.
func (o *JsonParser) SetFormatFeatures(v int32) {
	o.FormatFeatures = &v
}

// GetCurrentToken returns the CurrentToken field value if set, zero value otherwise.
func (o *JsonParser) GetCurrentToken() string {
	if o == nil || o.CurrentToken == nil {
		var ret string
		return ret
	}
	return *o.CurrentToken
}

// GetCurrentTokenOk returns a tuple with the CurrentToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCurrentTokenOk() (*string, bool) {
	if o == nil || o.CurrentToken == nil {
		return nil, false
	}
	return o.CurrentToken, true
}

// HasCurrentToken returns a boolean if a field has been set.
func (o *JsonParser) HasCurrentToken() bool {
	if o != nil && o.CurrentToken != nil {
		return true
	}

	return false
}

// SetCurrentToken gets a reference to the given string and assigns it to the CurrentToken field.
func (o *JsonParser) SetCurrentToken(v string) {
	o.CurrentToken = &v
}

// GetCurrentTokenId returns the CurrentTokenId field value if set, zero value otherwise.
func (o *JsonParser) GetCurrentTokenId() int32 {
	if o == nil || o.CurrentTokenId == nil {
		var ret int32
		return ret
	}
	return *o.CurrentTokenId
}

// GetCurrentTokenIdOk returns a tuple with the CurrentTokenId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCurrentTokenIdOk() (*int32, bool) {
	if o == nil || o.CurrentTokenId == nil {
		return nil, false
	}
	return o.CurrentTokenId, true
}

// HasCurrentTokenId returns a boolean if a field has been set.
func (o *JsonParser) HasCurrentTokenId() bool {
	if o != nil && o.CurrentTokenId != nil {
		return true
	}

	return false
}

// SetCurrentTokenId gets a reference to the given int32 and assigns it to the CurrentTokenId field.
func (o *JsonParser) SetCurrentTokenId(v int32) {
	o.CurrentTokenId = &v
}

// GetExpectedStartArrayToken returns the ExpectedStartArrayToken field value if set, zero value otherwise.
func (o *JsonParser) GetExpectedStartArrayToken() bool {
	if o == nil || o.ExpectedStartArrayToken == nil {
		var ret bool
		return ret
	}
	return *o.ExpectedStartArrayToken
}

// GetExpectedStartArrayTokenOk returns a tuple with the ExpectedStartArrayToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetExpectedStartArrayTokenOk() (*bool, bool) {
	if o == nil || o.ExpectedStartArrayToken == nil {
		return nil, false
	}
	return o.ExpectedStartArrayToken, true
}

// HasExpectedStartArrayToken returns a boolean if a field has been set.
func (o *JsonParser) HasExpectedStartArrayToken() bool {
	if o != nil && o.ExpectedStartArrayToken != nil {
		return true
	}

	return false
}

// SetExpectedStartArrayToken gets a reference to the given bool and assigns it to the ExpectedStartArrayToken field.
func (o *JsonParser) SetExpectedStartArrayToken(v bool) {
	o.ExpectedStartArrayToken = &v
}

// GetExpectedStartObjectToken returns the ExpectedStartObjectToken field value if set, zero value otherwise.
func (o *JsonParser) GetExpectedStartObjectToken() bool {
	if o == nil || o.ExpectedStartObjectToken == nil {
		var ret bool
		return ret
	}
	return *o.ExpectedStartObjectToken
}

// GetExpectedStartObjectTokenOk returns a tuple with the ExpectedStartObjectToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetExpectedStartObjectTokenOk() (*bool, bool) {
	if o == nil || o.ExpectedStartObjectToken == nil {
		return nil, false
	}
	return o.ExpectedStartObjectToken, true
}

// HasExpectedStartObjectToken returns a boolean if a field has been set.
func (o *JsonParser) HasExpectedStartObjectToken() bool {
	if o != nil && o.ExpectedStartObjectToken != nil {
		return true
	}

	return false
}

// SetExpectedStartObjectToken gets a reference to the given bool and assigns it to the ExpectedStartObjectToken field.
func (o *JsonParser) SetExpectedStartObjectToken(v bool) {
	o.ExpectedStartObjectToken = &v
}

// GetLastClearedToken returns the LastClearedToken field value if set, zero value otherwise.
func (o *JsonParser) GetLastClearedToken() string {
	if o == nil || o.LastClearedToken == nil {
		var ret string
		return ret
	}
	return *o.LastClearedToken
}

// GetLastClearedTokenOk returns a tuple with the LastClearedToken field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetLastClearedTokenOk() (*string, bool) {
	if o == nil || o.LastClearedToken == nil {
		return nil, false
	}
	return o.LastClearedToken, true
}

// HasLastClearedToken returns a boolean if a field has been set.
func (o *JsonParser) HasLastClearedToken() bool {
	if o != nil && o.LastClearedToken != nil {
		return true
	}

	return false
}

// SetLastClearedToken gets a reference to the given string and assigns it to the LastClearedToken field.
func (o *JsonParser) SetLastClearedToken(v string) {
	o.LastClearedToken = &v
}

// GetCurrentName returns the CurrentName field value if set, zero value otherwise.
func (o *JsonParser) GetCurrentName() string {
	if o == nil || o.CurrentName == nil {
		var ret string
		return ret
	}
	return *o.CurrentName
}

// GetCurrentNameOk returns a tuple with the CurrentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetCurrentNameOk() (*string, bool) {
	if o == nil || o.CurrentName == nil {
		return nil, false
	}
	return o.CurrentName, true
}

// HasCurrentName returns a boolean if a field has been set.
func (o *JsonParser) HasCurrentName() bool {
	if o != nil && o.CurrentName != nil {
		return true
	}

	return false
}

// SetCurrentName gets a reference to the given string and assigns it to the CurrentName field.
func (o *JsonParser) SetCurrentName(v string) {
	o.CurrentName = &v
}

// GetTextOffset returns the TextOffset field value if set, zero value otherwise.
func (o *JsonParser) GetTextOffset() int32 {
	if o == nil || o.TextOffset == nil {
		var ret int32
		return ret
	}
	return *o.TextOffset
}

// GetTextOffsetOk returns a tuple with the TextOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTextOffsetOk() (*int32, bool) {
	if o == nil || o.TextOffset == nil {
		return nil, false
	}
	return o.TextOffset, true
}

// HasTextOffset returns a boolean if a field has been set.
func (o *JsonParser) HasTextOffset() bool {
	if o != nil && o.TextOffset != nil {
		return true
	}

	return false
}

// SetTextOffset gets a reference to the given int32 and assigns it to the TextOffset field.
func (o *JsonParser) SetTextOffset(v int32) {
	o.TextOffset = &v
}

// GetNumberValue returns the NumberValue field value if set, zero value otherwise.
func (o *JsonParser) GetNumberValue() map[string]interface{} {
	if o == nil || o.NumberValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NumberValue
}

// GetNumberValueOk returns a tuple with the NumberValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetNumberValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.NumberValue == nil {
		return nil, false
	}
	return o.NumberValue, true
}

// HasNumberValue returns a boolean if a field has been set.
func (o *JsonParser) HasNumberValue() bool {
	if o != nil && o.NumberValue != nil {
		return true
	}

	return false
}

// SetNumberValue gets a reference to the given map[string]interface{} and assigns it to the NumberValue field.
func (o *JsonParser) SetNumberValue(v map[string]interface{}) {
	o.NumberValue = &v
}

// GetNumberType returns the NumberType field value if set, zero value otherwise.
func (o *JsonParser) GetNumberType() string {
	if o == nil || o.NumberType == nil {
		var ret string
		return ret
	}
	return *o.NumberType
}

// GetNumberTypeOk returns a tuple with the NumberType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetNumberTypeOk() (*string, bool) {
	if o == nil || o.NumberType == nil {
		return nil, false
	}
	return o.NumberType, true
}

// HasNumberType returns a boolean if a field has been set.
func (o *JsonParser) HasNumberType() bool {
	if o != nil && o.NumberType != nil {
		return true
	}

	return false
}

// SetNumberType gets a reference to the given string and assigns it to the NumberType field.
func (o *JsonParser) SetNumberType(v string) {
	o.NumberType = &v
}

// GetBigIntegerValue returns the BigIntegerValue field value if set, zero value otherwise.
func (o *JsonParser) GetBigIntegerValue() int32 {
	if o == nil || o.BigIntegerValue == nil {
		var ret int32
		return ret
	}
	return *o.BigIntegerValue
}

// GetBigIntegerValueOk returns a tuple with the BigIntegerValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetBigIntegerValueOk() (*int32, bool) {
	if o == nil || o.BigIntegerValue == nil {
		return nil, false
	}
	return o.BigIntegerValue, true
}

// HasBigIntegerValue returns a boolean if a field has been set.
func (o *JsonParser) HasBigIntegerValue() bool {
	if o != nil && o.BigIntegerValue != nil {
		return true
	}

	return false
}

// SetBigIntegerValue gets a reference to the given int32 and assigns it to the BigIntegerValue field.
func (o *JsonParser) SetBigIntegerValue(v int32) {
	o.BigIntegerValue = &v
}

// GetDecimalValue returns the DecimalValue field value if set, zero value otherwise.
func (o *JsonParser) GetDecimalValue() float32 {
	if o == nil || o.DecimalValue == nil {
		var ret float32
		return ret
	}
	return *o.DecimalValue
}

// GetDecimalValueOk returns a tuple with the DecimalValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetDecimalValueOk() (*float32, bool) {
	if o == nil || o.DecimalValue == nil {
		return nil, false
	}
	return o.DecimalValue, true
}

// HasDecimalValue returns a boolean if a field has been set.
func (o *JsonParser) HasDecimalValue() bool {
	if o != nil && o.DecimalValue != nil {
		return true
	}

	return false
}

// SetDecimalValue gets a reference to the given float32 and assigns it to the DecimalValue field.
func (o *JsonParser) SetDecimalValue(v float32) {
	o.DecimalValue = &v
}

// GetEmbeddedObject returns the EmbeddedObject field value if set, zero value otherwise.
func (o *JsonParser) GetEmbeddedObject() map[string]interface{} {
	if o == nil || o.EmbeddedObject == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.EmbeddedObject
}

// GetEmbeddedObjectOk returns a tuple with the EmbeddedObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetEmbeddedObjectOk() (*map[string]interface{}, bool) {
	if o == nil || o.EmbeddedObject == nil {
		return nil, false
	}
	return o.EmbeddedObject, true
}

// HasEmbeddedObject returns a boolean if a field has been set.
func (o *JsonParser) HasEmbeddedObject() bool {
	if o != nil && o.EmbeddedObject != nil {
		return true
	}

	return false
}

// SetEmbeddedObject gets a reference to the given map[string]interface{} and assigns it to the EmbeddedObject field.
func (o *JsonParser) SetEmbeddedObject(v map[string]interface{}) {
	o.EmbeddedObject = &v
}

// GetValueAsInt returns the ValueAsInt field value if set, zero value otherwise.
func (o *JsonParser) GetValueAsInt() int32 {
	if o == nil || o.ValueAsInt == nil {
		var ret int32
		return ret
	}
	return *o.ValueAsInt
}

// GetValueAsIntOk returns a tuple with the ValueAsInt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetValueAsIntOk() (*int32, bool) {
	if o == nil || o.ValueAsInt == nil {
		return nil, false
	}
	return o.ValueAsInt, true
}

// HasValueAsInt returns a boolean if a field has been set.
func (o *JsonParser) HasValueAsInt() bool {
	if o != nil && o.ValueAsInt != nil {
		return true
	}

	return false
}

// SetValueAsInt gets a reference to the given int32 and assigns it to the ValueAsInt field.
func (o *JsonParser) SetValueAsInt(v int32) {
	o.ValueAsInt = &v
}

// GetValueAsLong returns the ValueAsLong field value if set, zero value otherwise.
func (o *JsonParser) GetValueAsLong() int64 {
	if o == nil || o.ValueAsLong == nil {
		var ret int64
		return ret
	}
	return *o.ValueAsLong
}

// GetValueAsLongOk returns a tuple with the ValueAsLong field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetValueAsLongOk() (*int64, bool) {
	if o == nil || o.ValueAsLong == nil {
		return nil, false
	}
	return o.ValueAsLong, true
}

// HasValueAsLong returns a boolean if a field has been set.
func (o *JsonParser) HasValueAsLong() bool {
	if o != nil && o.ValueAsLong != nil {
		return true
	}

	return false
}

// SetValueAsLong gets a reference to the given int64 and assigns it to the ValueAsLong field.
func (o *JsonParser) SetValueAsLong(v int64) {
	o.ValueAsLong = &v
}

// GetValueAsDouble returns the ValueAsDouble field value if set, zero value otherwise.
func (o *JsonParser) GetValueAsDouble() float64 {
	if o == nil || o.ValueAsDouble == nil {
		var ret float64
		return ret
	}
	return *o.ValueAsDouble
}

// GetValueAsDoubleOk returns a tuple with the ValueAsDouble field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetValueAsDoubleOk() (*float64, bool) {
	if o == nil || o.ValueAsDouble == nil {
		return nil, false
	}
	return o.ValueAsDouble, true
}

// HasValueAsDouble returns a boolean if a field has been set.
func (o *JsonParser) HasValueAsDouble() bool {
	if o != nil && o.ValueAsDouble != nil {
		return true
	}

	return false
}

// SetValueAsDouble gets a reference to the given float64 and assigns it to the ValueAsDouble field.
func (o *JsonParser) SetValueAsDouble(v float64) {
	o.ValueAsDouble = &v
}

// GetValueAsBoolean returns the ValueAsBoolean field value if set, zero value otherwise.
func (o *JsonParser) GetValueAsBoolean() bool {
	if o == nil || o.ValueAsBoolean == nil {
		var ret bool
		return ret
	}
	return *o.ValueAsBoolean
}

// GetValueAsBooleanOk returns a tuple with the ValueAsBoolean field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetValueAsBooleanOk() (*bool, bool) {
	if o == nil || o.ValueAsBoolean == nil {
		return nil, false
	}
	return o.ValueAsBoolean, true
}

// HasValueAsBoolean returns a boolean if a field has been set.
func (o *JsonParser) HasValueAsBoolean() bool {
	if o != nil && o.ValueAsBoolean != nil {
		return true
	}

	return false
}

// SetValueAsBoolean gets a reference to the given bool and assigns it to the ValueAsBoolean field.
func (o *JsonParser) SetValueAsBoolean(v bool) {
	o.ValueAsBoolean = &v
}

// GetValueAsString returns the ValueAsString field value if set, zero value otherwise.
func (o *JsonParser) GetValueAsString() string {
	if o == nil || o.ValueAsString == nil {
		var ret string
		return ret
	}
	return *o.ValueAsString
}

// GetValueAsStringOk returns a tuple with the ValueAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetValueAsStringOk() (*string, bool) {
	if o == nil || o.ValueAsString == nil {
		return nil, false
	}
	return o.ValueAsString, true
}

// HasValueAsString returns a boolean if a field has been set.
func (o *JsonParser) HasValueAsString() bool {
	if o != nil && o.ValueAsString != nil {
		return true
	}

	return false
}

// SetValueAsString gets a reference to the given string and assigns it to the ValueAsString field.
func (o *JsonParser) SetValueAsString(v string) {
	o.ValueAsString = &v
}

// GetObjectId returns the ObjectId field value if set, zero value otherwise.
func (o *JsonParser) GetObjectId() map[string]interface{} {
	if o == nil || o.ObjectId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ObjectId
}

// GetObjectIdOk returns a tuple with the ObjectId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetObjectIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.ObjectId == nil {
		return nil, false
	}
	return o.ObjectId, true
}

// HasObjectId returns a boolean if a field has been set.
func (o *JsonParser) HasObjectId() bool {
	if o != nil && o.ObjectId != nil {
		return true
	}

	return false
}

// SetObjectId gets a reference to the given map[string]interface{} and assigns it to the ObjectId field.
func (o *JsonParser) SetObjectId(v map[string]interface{}) {
	o.ObjectId = &v
}

// GetTypeId returns the TypeId field value if set, zero value otherwise.
func (o *JsonParser) GetTypeId() map[string]interface{} {
	if o == nil || o.TypeId == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TypeId
}

// GetTypeIdOk returns a tuple with the TypeId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTypeIdOk() (*map[string]interface{}, bool) {
	if o == nil || o.TypeId == nil {
		return nil, false
	}
	return o.TypeId, true
}

// HasTypeId returns a boolean if a field has been set.
func (o *JsonParser) HasTypeId() bool {
	if o != nil && o.TypeId != nil {
		return true
	}

	return false
}

// SetTypeId gets a reference to the given map[string]interface{} and assigns it to the TypeId field.
func (o *JsonParser) SetTypeId(v map[string]interface{}) {
	o.TypeId = &v
}

// GetText returns the Text field value if set, zero value otherwise.
func (o *JsonParser) GetText() string {
	if o == nil || o.Text == nil {
		var ret string
		return ret
	}
	return *o.Text
}

// GetTextOk returns a tuple with the Text field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTextOk() (*string, bool) {
	if o == nil || o.Text == nil {
		return nil, false
	}
	return o.Text, true
}

// HasText returns a boolean if a field has been set.
func (o *JsonParser) HasText() bool {
	if o != nil && o.Text != nil {
		return true
	}

	return false
}

// SetText gets a reference to the given string and assigns it to the Text field.
func (o *JsonParser) SetText(v string) {
	o.Text = &v
}

// GetTextCharacters returns the TextCharacters field value if set, zero value otherwise.
func (o *JsonParser) GetTextCharacters() []string {
	if o == nil || o.TextCharacters == nil {
		var ret []string
		return ret
	}
	return *o.TextCharacters
}

// GetTextCharactersOk returns a tuple with the TextCharacters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTextCharactersOk() (*[]string, bool) {
	if o == nil || o.TextCharacters == nil {
		return nil, false
	}
	return o.TextCharacters, true
}

// HasTextCharacters returns a boolean if a field has been set.
func (o *JsonParser) HasTextCharacters() bool {
	if o != nil && o.TextCharacters != nil {
		return true
	}

	return false
}

// SetTextCharacters gets a reference to the given []string and assigns it to the TextCharacters field.
func (o *JsonParser) SetTextCharacters(v []string) {
	o.TextCharacters = &v
}

// GetTextLength returns the TextLength field value if set, zero value otherwise.
func (o *JsonParser) GetTextLength() int32 {
	if o == nil || o.TextLength == nil {
		var ret int32
		return ret
	}
	return *o.TextLength
}

// GetTextLengthOk returns a tuple with the TextLength field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetTextLengthOk() (*int32, bool) {
	if o == nil || o.TextLength == nil {
		return nil, false
	}
	return o.TextLength, true
}

// HasTextLength returns a boolean if a field has been set.
func (o *JsonParser) HasTextLength() bool {
	if o != nil && o.TextLength != nil {
		return true
	}

	return false
}

// SetTextLength gets a reference to the given int32 and assigns it to the TextLength field.
func (o *JsonParser) SetTextLength(v int32) {
	o.TextLength = &v
}

// GetBooleanValue returns the BooleanValue field value if set, zero value otherwise.
func (o *JsonParser) GetBooleanValue() bool {
	if o == nil || o.BooleanValue == nil {
		var ret bool
		return ret
	}
	return *o.BooleanValue
}

// GetBooleanValueOk returns a tuple with the BooleanValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetBooleanValueOk() (*bool, bool) {
	if o == nil || o.BooleanValue == nil {
		return nil, false
	}
	return o.BooleanValue, true
}

// HasBooleanValue returns a boolean if a field has been set.
func (o *JsonParser) HasBooleanValue() bool {
	if o != nil && o.BooleanValue != nil {
		return true
	}

	return false
}

// SetBooleanValue gets a reference to the given bool and assigns it to the BooleanValue field.
func (o *JsonParser) SetBooleanValue(v bool) {
	o.BooleanValue = &v
}

// GetByteValue returns the ByteValue field value if set, zero value otherwise.
func (o *JsonParser) GetByteValue() string {
	if o == nil || o.ByteValue == nil {
		var ret string
		return ret
	}
	return *o.ByteValue
}

// GetByteValueOk returns a tuple with the ByteValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetByteValueOk() (*string, bool) {
	if o == nil || o.ByteValue == nil {
		return nil, false
	}
	return o.ByteValue, true
}

// HasByteValue returns a boolean if a field has been set.
func (o *JsonParser) HasByteValue() bool {
	if o != nil && o.ByteValue != nil {
		return true
	}

	return false
}

// SetByteValue gets a reference to the given string and assigns it to the ByteValue field.
func (o *JsonParser) SetByteValue(v string) {
	o.ByteValue = &v
}

// GetDoubleValue returns the DoubleValue field value if set, zero value otherwise.
func (o *JsonParser) GetDoubleValue() float64 {
	if o == nil || o.DoubleValue == nil {
		var ret float64
		return ret
	}
	return *o.DoubleValue
}

// GetDoubleValueOk returns a tuple with the DoubleValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetDoubleValueOk() (*float64, bool) {
	if o == nil || o.DoubleValue == nil {
		return nil, false
	}
	return o.DoubleValue, true
}

// HasDoubleValue returns a boolean if a field has been set.
func (o *JsonParser) HasDoubleValue() bool {
	if o != nil && o.DoubleValue != nil {
		return true
	}

	return false
}

// SetDoubleValue gets a reference to the given float64 and assigns it to the DoubleValue field.
func (o *JsonParser) SetDoubleValue(v float64) {
	o.DoubleValue = &v
}

// GetFloatValue returns the FloatValue field value if set, zero value otherwise.
func (o *JsonParser) GetFloatValue() float32 {
	if o == nil || o.FloatValue == nil {
		var ret float32
		return ret
	}
	return *o.FloatValue
}

// GetFloatValueOk returns a tuple with the FloatValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetFloatValueOk() (*float32, bool) {
	if o == nil || o.FloatValue == nil {
		return nil, false
	}
	return o.FloatValue, true
}

// HasFloatValue returns a boolean if a field has been set.
func (o *JsonParser) HasFloatValue() bool {
	if o != nil && o.FloatValue != nil {
		return true
	}

	return false
}

// SetFloatValue gets a reference to the given float32 and assigns it to the FloatValue field.
func (o *JsonParser) SetFloatValue(v float32) {
	o.FloatValue = &v
}

// GetLongValue returns the LongValue field value if set, zero value otherwise.
func (o *JsonParser) GetLongValue() int64 {
	if o == nil || o.LongValue == nil {
		var ret int64
		return ret
	}
	return *o.LongValue
}

// GetLongValueOk returns a tuple with the LongValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetLongValueOk() (*int64, bool) {
	if o == nil || o.LongValue == nil {
		return nil, false
	}
	return o.LongValue, true
}

// HasLongValue returns a boolean if a field has been set.
func (o *JsonParser) HasLongValue() bool {
	if o != nil && o.LongValue != nil {
		return true
	}

	return false
}

// SetLongValue gets a reference to the given int64 and assigns it to the LongValue field.
func (o *JsonParser) SetLongValue(v int64) {
	o.LongValue = &v
}

// GetShortValue returns the ShortValue field value if set, zero value otherwise.
func (o *JsonParser) GetShortValue() int32 {
	if o == nil || o.ShortValue == nil {
		var ret int32
		return ret
	}
	return *o.ShortValue
}

// GetShortValueOk returns a tuple with the ShortValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetShortValueOk() (*int32, bool) {
	if o == nil || o.ShortValue == nil {
		return nil, false
	}
	return o.ShortValue, true
}

// HasShortValue returns a boolean if a field has been set.
func (o *JsonParser) HasShortValue() bool {
	if o != nil && o.ShortValue != nil {
		return true
	}

	return false
}

// SetShortValue gets a reference to the given int32 and assigns it to the ShortValue field.
func (o *JsonParser) SetShortValue(v int32) {
	o.ShortValue = &v
}

// GetIntValue returns the IntValue field value if set, zero value otherwise.
func (o *JsonParser) GetIntValue() int32 {
	if o == nil || o.IntValue == nil {
		var ret int32
		return ret
	}
	return *o.IntValue
}

// GetIntValueOk returns a tuple with the IntValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetIntValueOk() (*int32, bool) {
	if o == nil || o.IntValue == nil {
		return nil, false
	}
	return o.IntValue, true
}

// HasIntValue returns a boolean if a field has been set.
func (o *JsonParser) HasIntValue() bool {
	if o != nil && o.IntValue != nil {
		return true
	}

	return false
}

// SetIntValue gets a reference to the given int32 and assigns it to the IntValue field.
func (o *JsonParser) SetIntValue(v int32) {
	o.IntValue = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *JsonParser) GetSchema() FormatSchema {
	if o == nil || o.Schema == nil {
		var ret FormatSchema
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonParser) GetSchemaOk() (*FormatSchema, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *JsonParser) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given FormatSchema and assigns it to the Schema field.
func (o *JsonParser) SetSchema(v FormatSchema) {
	o.Schema = &v
}

func (o JsonParser) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Closed != nil {
		toSerialize["closed"] = o.Closed
	}
	if o.CurrentLocation != nil {
		toSerialize["currentLocation"] = o.CurrentLocation
	}
	if o.Codec != nil {
		toSerialize["codec"] = o.Codec
	}
	if o.BinaryValue != nil {
		toSerialize["binaryValue"] = o.BinaryValue
	}
	if o.CurrentValue != nil {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if o.ParsingContext != nil {
		toSerialize["parsingContext"] = o.ParsingContext
	}
	if o.TokenLocation != nil {
		toSerialize["tokenLocation"] = o.TokenLocation
	}
	if o.InputSource != nil {
		toSerialize["inputSource"] = o.InputSource
	}
	if o.FeatureMask != nil {
		toSerialize["featureMask"] = o.FeatureMask
	}
	if o.FormatFeatures != nil {
		toSerialize["formatFeatures"] = o.FormatFeatures
	}
	if o.CurrentToken != nil {
		toSerialize["currentToken"] = o.CurrentToken
	}
	if o.CurrentTokenId != nil {
		toSerialize["currentTokenId"] = o.CurrentTokenId
	}
	if o.ExpectedStartArrayToken != nil {
		toSerialize["expectedStartArrayToken"] = o.ExpectedStartArrayToken
	}
	if o.ExpectedStartObjectToken != nil {
		toSerialize["expectedStartObjectToken"] = o.ExpectedStartObjectToken
	}
	if o.LastClearedToken != nil {
		toSerialize["lastClearedToken"] = o.LastClearedToken
	}
	if o.CurrentName != nil {
		toSerialize["currentName"] = o.CurrentName
	}
	if o.TextOffset != nil {
		toSerialize["textOffset"] = o.TextOffset
	}
	if o.NumberValue != nil {
		toSerialize["numberValue"] = o.NumberValue
	}
	if o.NumberType != nil {
		toSerialize["numberType"] = o.NumberType
	}
	if o.BigIntegerValue != nil {
		toSerialize["bigIntegerValue"] = o.BigIntegerValue
	}
	if o.DecimalValue != nil {
		toSerialize["decimalValue"] = o.DecimalValue
	}
	if o.EmbeddedObject != nil {
		toSerialize["embeddedObject"] = o.EmbeddedObject
	}
	if o.ValueAsInt != nil {
		toSerialize["valueAsInt"] = o.ValueAsInt
	}
	if o.ValueAsLong != nil {
		toSerialize["valueAsLong"] = o.ValueAsLong
	}
	if o.ValueAsDouble != nil {
		toSerialize["valueAsDouble"] = o.ValueAsDouble
	}
	if o.ValueAsBoolean != nil {
		toSerialize["valueAsBoolean"] = o.ValueAsBoolean
	}
	if o.ValueAsString != nil {
		toSerialize["valueAsString"] = o.ValueAsString
	}
	if o.ObjectId != nil {
		toSerialize["objectId"] = o.ObjectId
	}
	if o.TypeId != nil {
		toSerialize["typeId"] = o.TypeId
	}
	if o.Text != nil {
		toSerialize["text"] = o.Text
	}
	if o.TextCharacters != nil {
		toSerialize["textCharacters"] = o.TextCharacters
	}
	if o.TextLength != nil {
		toSerialize["textLength"] = o.TextLength
	}
	if o.BooleanValue != nil {
		toSerialize["booleanValue"] = o.BooleanValue
	}
	if o.ByteValue != nil {
		toSerialize["byteValue"] = o.ByteValue
	}
	if o.DoubleValue != nil {
		toSerialize["doubleValue"] = o.DoubleValue
	}
	if o.FloatValue != nil {
		toSerialize["floatValue"] = o.FloatValue
	}
	if o.LongValue != nil {
		toSerialize["longValue"] = o.LongValue
	}
	if o.ShortValue != nil {
		toSerialize["shortValue"] = o.ShortValue
	}
	if o.IntValue != nil {
		toSerialize["intValue"] = o.IntValue
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	return json.Marshal(toSerialize)
}

type NullableJsonParser struct {
	value *JsonParser
	isSet bool
}

func (v NullableJsonParser) Get() *JsonParser {
	return v.value
}

func (v *NullableJsonParser) Set(val *JsonParser) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonParser) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonParser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonParser(val *JsonParser) *NullableJsonParser {
	return &NullableJsonParser{value: val, isSet: true}
}

func (v NullableJsonParser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonParser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


