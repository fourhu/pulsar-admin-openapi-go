openapi: 3.0.1
info:
  description: This provides the REST API for admin operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Pulsar Admin REST API
  version: v2
servers:
- url: /admin/v2
tags:
- name: bookies
- name: broker-stats
- name: brokers
- name: clusters
- name: namespaces
- name: non-persistent topic
- name: persistent topic
- name: resource-quotas
- name: resourcegroups
- name: schemas
- name: tenants
paths:
  /bookies/all:
    get:
      operationId: getAllBookies
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookiesClusterInfo'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets raw information for all the bookies in the cluster
      tags:
      - bookies
  /bookies/racks-info:
    get:
      operationId: getBookiesRackInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    $ref: '#/components/schemas/BookieInfo'
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for all the bookies in the cluster
      tags:
      - bookies
  /bookies/racks-info/{bookie}:
    delete:
      operationId: deleteBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Removed the rack placement information for a specific bookie in the
        cluster
      tags:
      - bookies
    get:
      operationId: getBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieInfo'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for a specific bookie in the cluster
      tags:
      - bookies
    post:
      operationId: updateBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      - in: query
        name: group
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Updates the rack placement information for a specific bookie in the
        cluster (note. bookie address format:`address:port`)
      tags:
      - bookies
  /broker-stats/allocator-stats/{allocator}:
    get:
      operationId: getAllocatorStats
      parameters:
      - in: path
        name: allocator
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatorStats'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the stats for the Netty allocator. Available allocators are 'default'
        and 'ml-cache'
      tags:
      - broker-stats
  /broker-stats/bookieops:
    get:
      operationId: getPendingBookieOpsStats
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/PendingBookieOpsStats'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get pending bookie client op stats by namesapce
      tags:
      - broker-stats
  /broker-stats/broker-resource-availability/{tenant}/{namespace}:
    get:
      description: This API gives the current broker availability in percent, each
        resource percentage usage is calculated and thensum of all of the resource
        usage percent is called broker-resource-availability<br/><br/>THIS API IS
        ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM
      operationId: getBrokerResourceAvailability
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ResourceUnit'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Load-manager doesn't support operation
      summary: Broker availability report
      tags:
      - broker-stats
  /broker-stats/load-report:
    get:
      description: consists of topics stats & systemResourceUsage
      operationId: getLoadReport
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadReport'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get Load for this broker
      tags:
      - broker-stats
  /broker-stats/mbeans:
    get:
      operationId: getMBeans
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all the mbean details of this broker JVM
      tags:
      - broker-stats
  /broker-stats/metrics:
    get:
      description: Requested should be executed by Monitoring agent on each broker
        to fetch the metrics
      operationId: getMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the metrics for Monitoring
      tags:
      - broker-stats
  /broker-stats/topics:
    get:
      operationId: getTopics2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputStream'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all the topic stats by namespace
      tags:
      - broker-stats
  /brokers/backlog-quota-check:
    get:
      operationId: backlogQuotaCheck
      responses:
        "200":
          content: {}
          description: Everything is OK
        "403":
          content: {}
          description: Don't have admin permission
        "500":
          content: {}
          description: Internal server error
      summary: An REST endpoint to trigger backlogQuotaCheck
      tags:
      - brokers
  /brokers/configuration:
    get:
      operationId: getDynamicConfigurationName
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: You don't have admin permission to get configuration
      summary: Get all updatable dynamic configurations's name
      tags:
      - brokers
  /brokers/configuration/runtime:
    get:
      operationId: getRuntimeConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all runtime configurations. This operation requires Pulsar super-user
        privileges.
      tags:
      - brokers
  /brokers/configuration/values:
    get:
      operationId: getAllDynamicConfigurations
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  type: string
                type: object
          description: successful operation
        "403":
          content: {}
          description: You don't have admin permission to view configuration
        "404":
          content: {}
          description: Configuration not found
        "500":
          content: {}
          description: Internal server error
      summary: Get value of all dynamic configurations' value overridden on local
        config
      tags:
      - brokers
  /brokers/configuration/{configName}:
    delete:
      operationId: deleteDynamicConfiguration
      parameters:
      - in: path
        name: configName
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Service configuration updated successfully
        "403":
          content: {}
          description: You don't have admin permission to update service-configuration
        "412":
          content: {}
          description: Invalid dynamic-config value
        "500":
          content: {}
          description: Internal server error
      summary: Delete dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      tags:
      - brokers
  /brokers/configuration/{configName}/{configValue}:
    post:
      operationId: updateDynamicConfiguration
      parameters:
      - in: path
        name: configName
        required: true
        schema:
          type: string
      - in: path
        name: configValue
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Service configuration updated successfully
        "403":
          content: {}
          description: You don't have admin permission to update service-configuration
        "404":
          content: {}
          description: Configuration not found
        "412":
          content: {}
          description: Invalid dynamic-config value
        "500":
          content: {}
          description: Internal server error
      summary: Update dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      tags:
      - brokers
  /brokers/health:
    get:
      operationId: healthcheck
      responses:
        "200":
          content: {}
          description: Everything is OK
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Run a healthcheck against the broker
      tags:
      - brokers
  /brokers/internal-configuration:
    get:
      operationId: getInternalConfigurationData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConfigurationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the internal configuration data
      tags:
      - brokers
  /brokers/leaderBroker:
    get:
      operationId: getLeaderBroker
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerInfo'
          description: successful operation
        "401":
          content: {}
          description: Authentication required
        "403":
          content: {}
          description: This operation requires super-user access
        "404":
          content: {}
          description: Leader broker not found
      summary: Get the information of the leader broker.
      tags:
      - brokers
  /brokers/ready:
    get:
      operationId: isReady
      responses:
        "200":
          content: {}
          description: Broker is ready
        "500":
          content: {}
          description: Broker is not ready
      summary: Check if the broker is fully initialized
      tags:
      - brokers
  /brokers/version:
    get:
      operationId: version
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: Everything is OK
        "500":
          content: {}
          description: Internal server error
      summary: Get version of current broker
      tags:
      - brokers
  /brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces:
    get:
      operationId: getOwnedNamespaces
      parameters:
      - in: path
        name: clusterName
        required: true
        schema:
          type: string
      - in: path
        name: broker-webserviceurl
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceOwnershipStatus'
                type: object
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the cluster
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Cluster doesn't exist
      summary: Get the list of namespaces served by the specific broker
      tags:
      - brokers
  /brokers/{cluster}:
    get:
      operationId: getActiveBrokers
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve this cluster
        "401":
          content: {}
          description: Authentication required
        "403":
          content: {}
          description: This operation requires super-user access
        "404":
          content: {}
          description: 'Cluster does not exist: cluster={clustername}'
      summary: Get the list of active brokers (web service addresses) in the cluster.If
        authorization is not enabled, any cluster name is valid.
      tags:
      - brokers
  /clusters:
    get:
      operationId: getClusters
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: Return a list of clusters.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the list of all the Pulsar clusters.
      tags:
      - clusters
  /clusters/{cluster}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Cluster has been deleted.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "412":
          content: {}
          description: Cluster is not empty.
        "500":
          content: {}
          description: Internal server error.
      summary: Delete an existing cluster.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: Return the cluster data.
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the configuration for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: updateCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been updated.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Update the configuration for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar superuser privileges, and the name
        cannot contain the '/' characters.
      operationId: createCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been created.
        "403":
          content: {}
          description: You don't have admin permission to create the cluster.
        "409":
          content: {}
          description: Cluster already exists.
        "412":
          content: {}
          description: Cluster name is not valid.
        "500":
          content: {}
          description: Internal server error.
      summary: Create a new cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/failureDomains:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getFailureDomains
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/FailureDomain'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "500":
          content: {}
          description: Internal server error
      summary: Get the cluster failure domains.
      tags:
      - clusters
  /clusters/{cluster}/failureDomains/{domainName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission or policy is read only
        "404":
          content: {}
          description: FailureDomain doesn't exist
        "412":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Delete the failure domain of the cluster
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureDomain'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: FailureDomain doesn't exist
        "412":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get a domain in a cluster
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FailureDomain'
        description: The configuration data of a failure domain
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Failure domain doesn't exist.
        "409":
          content: {}
          description: Broker already exists in another domain.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Set the failure domain of the cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/namespaceIsolationPolicies:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicies
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceIsolationData'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the namespace isolation policies assigned to the cluster.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokersWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BrokerNamespaceIsolationData'
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Namespace-isolation policies not found.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get list of brokers with namespace-isolation policies attached to them.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers/{broker}:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokerWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The broker name (<broker-hostname>:<web-service-port>)
        example: broker1:8080
        in: path
        name: broker
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerNamespaceIsolationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Namespace-isolation policies/ Broker not found.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get a broker with namespace-isolation policies attached to it.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/{policyName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission or policies are read only.
        "404":
          content: {}
          description: Namespace isolation policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Delete namespace isolation policy.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The name of the namespace isolation policy
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceIsolationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the single namespace isolation policy assigned to the cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamespaceIsolationData'
        description: The namespace isolation policy data
        required: true
      responses:
        "400":
          content: {}
          description: Namespace isolation policy data is invalid.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Namespace isolation policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Set namespace isolation policy.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/peers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getPeerCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the peer-cluster data for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setPeerClusterNames
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
        description: The list of peer cluster names
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been updated.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "412":
          content: {}
          description: Peer cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Update peer-cluster-list for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /namespaces/{cluster}/antiAffinity/{group}:
    get:
      operationId: getAntiAffinityNamespaces
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      - in: path
        name: group
        required: true
        schema:
          type: string
      - in: query
        name: tenant
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "412":
          content: {}
          description: Cluster not exist/Anti-affinity group can't be empty.
      summary: Get all namespaces that are grouped by given anti-affinity group in
        a given cluster. api can be only accessed by admin of any of the existing
        tenant
      tags:
      - namespaces
  /namespaces/{property}/{namespace}/persistence/bookieAffinity:
    delete:
      operationId: deleteBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Delete the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
    get:
      operationId: getBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieAffinityGroupData'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
  /namespaces/{tenant}:
    get:
      operationId: getTenantNamespaces
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of all the namespaces for a certain tenant.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}:
    delete:
      operationId: deleteNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: force
        schema:
          default: false
          type: boolean
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "405":
          content: {}
          description: Broker doesn't allow forced deletion of namespaces
        "409":
          content: {}
          description: Namespace is not empty
      summary: Delete a namespace and all the topics under it.
      tags:
      - namespaces
    get:
      operationId: getPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the dump all the policies specified for a namespace.
      tags:
      - namespaces
    put:
      operationId: createNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policies'
        description: Policies for the namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster doesn't exist
        "409":
          content: {}
          description: Namespace already exists
        "412":
          content: {}
          description: Namespace name is not valid
      summary: Creates a new namespace with the specified policies
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/antiAffinity:
    delete:
      operationId: removeNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove anti-affinity group of a namespace.
      tags:
      - namespaces
    get:
      operationId: getNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get anti-affinity group of a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Anti-affinity group for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid antiAffinityGroup
      summary: Set anti-affinity group for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/autoSubscriptionCreation:
    delete:
      operationId: removeAutoSubscriptionCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove override of broker's allowAutoSubscriptionCreation in a namespace
      tags:
      - namespaces
    post:
      operationId: setAutoSubscriptionCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        description: Settings for automatic subscription creation
        required: false
      responses:
        "400":
          content: {}
          description: Invalid autoSubscriptionCreation override
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Override broker's allowAutoSubscriptionCreation setting for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/autoTopicCreation:
    delete:
      operationId: removeAutoTopicCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove override of broker's allowAutoTopicCreation in a namespace
      tags:
      - namespaces
    post:
      operationId: setAutoTopicCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoTopicCreationOverride'
        description: Settings for automatic topic creation
        required: true
      responses:
        "400":
          content: {}
          description: Invalid autoTopicCreation override
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "406":
          content: {}
          description: The number of partitions should be less than or equal to maxNumPartitionsPerPartitionedTopic
      summary: Override broker's allowAutoTopicCreation setting for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/backlogQuota:
    delete:
      operationId: removeBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a namespace.
      tags:
      - namespaces
    post:
      operationId: setBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacklogQuota'
        description: Backlog quota for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: ' Set a backlog quota for all the topics on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/BacklogQuota'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get backlog quota map on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/bundles:
    get:
      operationId: getBundlesData
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundlesData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is not setup to split in bundles
      summary: Get the bundles split data.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog:
    post:
      operationId: clearNamespaceBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/compactionThreshold:
    delete:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: deleteCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Delete maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      tags:
      - namespaces
    get:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: getCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of uncompacted bytes in topics before compaction is
        triggered.
      tags:
      - namespaces
    put:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: setCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: Maximum number of uncompacted bytes in a topic of the specified
          namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: compactionThreshold value is not valid
      summary: Set maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/deduplication:
    delete:
      operationId: removeDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove broker side deduplication for all topics in a namespace
      tags:
      - namespaces
    get:
      operationId: getDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get broker side deduplication for all topics in a namespace
      tags:
      - namespaces
    post:
      operationId: modifyDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag for disabling or enabling broker side deduplication for
          all topics in the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Enable or disable broker side deduplication for all topics in a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/deduplicationSnapshotInterval:
    get:
      operationId: getDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get deduplicationSnapshotInterval config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Set deduplicationSnapshotInterval config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/delayedDelivery:
    delete:
      operationId: removeDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Delete delayed delivery messages config on a namespace.
      tags:
      - namespaces
    get:
      operationId: getDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelayedDeliveryPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get delayed delivery messages config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Set delayed delivery messages config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/dispatchRate:
    delete:
      operationId: deleteDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Delete dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
    get:
      operationId: getDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get dispatch-rate configured for the namespace, -1 represents not configured
        yet
      tags:
      - namespaces
    post:
      operationId: setDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/encryptionRequired:
    post:
      operationId: modifyEncryptionRequired
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag defining if message encryption is required
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Message encryption is required or not for all topics in a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/inactiveTopicPolicies:
    delete:
      operationId: removeInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove inactive topic policies from a namespace.
      tags:
      - namespaces
    get:
      operationId: getInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InactiveTopicPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get inactive topic policies config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: Inactive topic policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Set inactive topic policies config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/isAllowAutoUpdateSchema:
    get:
      operationId: getIsAllowAutoUpdateSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: The flag of whether allow auto update schema
      tags:
      - namespaces
    post:
      operationId: setIsAllowAutoUpdateSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag of whether to allow auto update schema
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update flag of whether allow auto update schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxConsumersPerSubscription:
    delete:
      operationId: removeMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxConsumersPerSubscription value is not valid
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      tags:
      - namespaces
    get:
      operationId: getMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerSubscription config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum consumers per subscription
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxConsumersPerSubscription value is not valid
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxConsumersPerTopic:
    delete:
      operationId: removeMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxConsumersPerTopic configuration on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum consumers per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxConsumersPerTopic value is not valid
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxProducersPerTopic:
    delete:
      operationId: removeMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxProducersPerTopic configuration on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxProducersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum producers per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxProducersPerTopic value is not valid
      summary: ' Set maxProducersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxSubscriptionsPerTopic:
    delete:
      operationId: removeMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxSubscriptionsPerTopic configuration on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxSubscriptionsPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum subscriptions per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxUnackedMessagesPerSubscription value is not valid
      summary: ' Set maxSubscriptionsPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxTopicsPerNamespace:
    delete:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Set maxTopicsPerNamespace config on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxTopicsPerNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace does not exist
      summary: Get maxTopicsPerNamespace config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum topics for specific namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Set maxTopicsPerNamespace config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerConsumer:
    delete:
      operationId: removeMaxUnackedmessagesPerConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Remove maxUnackedMessagesPerConsumer config on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxUnackedMessagesPerConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxUnackedMessagesPerConsumer config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxUnackedMessagesPerConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum unacked messages per consumer
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxUnackedMessagesPerConsumer value is not valid
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerSubscription:
    delete:
      operationId: removeMaxUnackedmessagesPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Remove maxUnackedMessagesPerSubscription config on a namespace.
      tags:
      - namespaces
    get:
      operationId: getMaxUnackedmessagesPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxUnackedMessagesPerSubscription config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxUnackedMessagesPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum unacked messages per subscription
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxUnackedMessagesPerSubscription value is not valid
      summary: ' Set maxUnackedMessagesPerSubscription configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/messageTTL:
    delete:
      operationId: removeNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid TTL
      summary: Set message TTL in seconds for namespace
      tags:
      - namespaces
    get:
      operationId: getNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the message TTL for the namespace
      tags:
      - namespaces
    post:
      operationId: setNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: TTL in seconds for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid TTL
      summary: Set message TTL in seconds for namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadDeletionLagMs:
    delete:
      operationId: clearOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Clear the namespace configured offload deletion lag. The topics in
        the namespace will fallback to using the default configured deletion lag for
        the broker
      tags:
      - namespaces
    get:
      description: A negative value denotes that deletion has been completely disabled.
        'null' denotes that the topics in the namespace will fall back to the broker
        default for deletion lag.
      operationId: getOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Number of milliseconds to wait before deleting a ledger segment which
        has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
    put:
      description: A negative value disables the deletion completely.
      operationId: setOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: New number of milliseconds to wait before deleting a ledger segment
          which has been offloaded
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: offloadDeletionLagMs value is not valid
      summary: Set number of milliseconds to wait before deleting a ledger segment
        which has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadPolicies:
    get:
      operationId: getOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadPoliciesImpl'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get offload configuration on a namespace.
      tags:
      - namespaces
    post:
      operationId: setOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        description: Offload policies for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
      summary: ' Set offload configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadThreshold:
    get:
      description: A negative value disables automatic offloading
      operationId: getOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of bytes stored on the pulsar cluster for a topic, before
        the broker will start offloading to longterm storage
      tags:
      - namespaces
    put:
      description: '-1 will revert to using the cluster default. A negative value
        disables automatic offloading. '
      operationId: setOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: Maximum number of bytes stored on the pulsar cluster for a topic
          of the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: offloadThreshold value is not valid
      summary: Set maximum number of bytes stored on the pulsar cluster for a topic,
        before the broker will start offloading to longterm storage
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/permissions:
    get:
      operationId: getPermissions
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    enum:
                    - produce
                    - consume
                    - functions
                    - sources
                    - sinks
                    - packages
                    type: string
                  type: array
                  uniqueItems: true
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Namespace is not empty
      summary: Retrieve the permissions for a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/permissions/{role}:
    delete:
      operationId: revokePermissionsOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Revoke all permissions to a role on a namespace.
      tags:
      - namespaces
    post:
      operationId: grantPermissionOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
                type: string
              type: array
        description: List of permissions for the specified role
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "501":
          content: {}
          description: Authorization is not enabled
      summary: Grant a new permission to a role on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/persistence:
    delete:
      operationId: deletePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Delete the persistence configuration for all topics on a namespace
      tags:
      - namespaces
    get:
      operationId: getPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistencePolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get the persistence configuration for a namespace.
      tags:
      - namespaces
    post:
      operationId: setPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Persistence policies for the specified namespace
        required: true
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Set the persistence configuration for all the topics on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/persistence/bookieAffinity:
    post:
      operationId: setBookieAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookieAffinityGroupData'
        description: Bookie affinity group for the specified namespace
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Set the bookie-affinity-group to namespace-persistent policy.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/properties:
    delete:
      operationId: clearProperties
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Get property value for a given key on a namespace.
      tags:
      - namespaces
    get:
      operationId: getProperties
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Get key value pair properties for a given namespace.
      tags:
      - namespaces
    put:
      operationId: setProperties
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                type: string
              type: object
        description: Key value pair properties for the namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Put key value pairs property on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/property/{key}:
    delete:
      operationId: removeProperty
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Get property value for a given key on a namespace.
      tags:
      - namespaces
    get:
      operationId: getProperty
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: key
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Get property value for a given key on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/property/{key}/{value}:
    put:
      operationId: setProperty
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: key
        required: true
        schema:
          type: string
      - in: path
        name: value
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
      summary: Put a key value pair property on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/removeOffloadPolicies:
    delete:
      operationId: removeOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
      summary: ' Set offload configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/replication:
    get:
      operationId: getNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is not global
      summary: Get the replication clusters for a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of replication clusters
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Peer-cluster can't be part of replication-cluster
        "412":
          content: {}
          description: Namespace is not global or invalid cluster ids
      summary: Set the replication clusters for a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/replicatorDispatchRate:
    delete:
      operationId: removeReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Remove replicator dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
    get:
      operationId: getReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get replicator dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Replicator dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set replicator dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/resourcegroup:
    delete:
      operationId: removeNamespaceResourceGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid resourcegroup
      summary: Delete resourcegroup for a namespace
      tags:
      - namespaces
    get:
      operationId: getNamespaceResourceGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the resourcegroup attached to the namespace
      tags:
      - namespaces
    post:
      operationId: setNamespaceResourceGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Name of resourcegroup
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid resourcegroup
      summary: Set resourcegroup for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/retention:
    delete:
      operationId: removeRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: ' Remove retention configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
    get:
      operationId: getRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get retention config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: ' Set retention configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaAutoUpdateCompatibilityStrategy:
    get:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: getSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - AutoUpdateDisabled
                - Backward
                - Forward
                - Full
                - AlwaysCompatible
                - BackwardTransitive
                - ForwardTransitive
                - FullTransitive
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: The strategy used to check the compatibility of new schemas, provided
        by producers, before automatically updating the schema
      tags:
      - namespaces
    put:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: setSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Strategy used to check the compatibility of new schemas
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update the strategy used to check the compatibility of new schemas,
        provided by producers, before automatically updating the schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaCompatibilityStrategy:
    get:
      operationId: getSchemaCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - UNDEFINED
                - ALWAYS_INCOMPATIBLE
                - ALWAYS_COMPATIBLE
                - BACKWARD
                - FORWARD
                - FULL
                - BACKWARD_TRANSITIVE
                - FORWARD_TRANSITIVE
                - FULL_TRANSITIVE
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: 'The strategy of the namespace schema compatibility '
      tags:
      - namespaces
    put:
      operationId: setSchemaCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Strategy used to check the compatibility of new schema
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update the strategy used to check the compatibility of new schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaValidationEnforced:
    get:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: getSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenants or Namespace doesn't exist
      summary: Get schema validation enforced flag for namespace.
      tags:
      - namespaces
    post:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: setSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag of whether validation is enforced on the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or Namespace doesn't exist
        "412":
          content: {}
          description: schemaValidationEnforced value is not valid
      summary: Set schema validation enforced flag on namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscribeRate:
    delete:
      operationId: deleteSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Delete subscribe-rate throttling for all topics of the namespace
      tags:
      - namespaces
    get:
      operationId: getSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get subscribe-rate configured for the namespace
      tags:
      - namespaces
    post:
      operationId: setSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set subscribe-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionAuthMode:
    post:
      operationId: setSubscriptionAuthMode
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Subscription auth mode for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: ' Set a subscription auth mode for all the topics on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionDispatchRate:
    delete:
      operationId: deleteSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Delete Subscription dispatch-rate throttling for all topics of the
        namespace
      tags:
      - namespaces
    get:
      operationId: getSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get Subscription dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Subscription dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set Subscription dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionExpirationTime:
    delete:
      operationId: removeSubscriptionExpirationTime
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove subscription expiration time for namespace
      tags:
      - namespaces
    get:
      operationId: getSubscriptionExpirationTime
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the subscription expiration time for the namespace
      tags:
      - namespaces
    post:
      operationId: setSubscriptionExpirationTime
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Expiration time in minutes for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid expiration time
      summary: Set subscription expiration time in minutes for namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionTypesEnabled:
    get:
      operationId: getSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  enum:
                  - Exclusive
                  - Shared
                  - Failover
                  - Key_Shared
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: The set of whether allow subscription types
      tags:
      - namespaces
    post:
      operationId: setSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
                type: string
              type: array
        description: Set of whether allow subscription types
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update set of whether allow share sub type
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/topics:
    get:
      operationId: getTopics
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: mode
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          - ALL
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the list of all the topics under a certain namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unload:
    put:
      description: Unload an active namespace from the current broker serving it.
        Performing this operation will let the brokerremoves all producers, consumers,
        and connections using this namespace, and close all topics (includingtheir
        persistent store). During that operation, the namespace is marked as tentatively
        unavailable until thebroker completes the unloading action. This operation
        requires strictly super user privileges, since it wouldresult in non-persistent
        message loss and unexpected connection closure to the clients.
      operationId: unloadNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is already unloaded or Namespace has bundles activated
      summary: Unload namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: deleteNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: force
        schema:
          default: false
          type: boolean
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Namespace bundle is not empty
      summary: Delete a namespace bundle and all the topics under it.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog:
    post:
      operationId: clearNamespaceBundleBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBundleBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace
        bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/split:
    put:
      operationId: splitNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: unload
        schema:
          default: false
          type: boolean
      - in: query
        name: splitAlgorithmName
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
      summary: Split a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unload:
    put:
      operationId: unloadNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
      summary: Unload a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace bundle.
      tags:
      - namespaces
  /non-persistent/{tenant}/{namespace}:
    get:
      operationId: getList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace does not exist
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of non-persistent topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{bundle}:
    get:
      operationId: getListFromBundle
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Bundle range of a topic
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of non-persistent topics under a namespace bundle.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic has active producers/subscriptions
        "500":
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - non-persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklog
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        "404":
          content: {}
          description: Namespace does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    delete:
      operationId: removeBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: Set a backlog quota for a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic policy does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get backlog quota map on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist, or compaction hasn't run
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - non-persistent topic
    put:
      operationId: compact
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Compaction already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    delete:
      operationId: removeCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int64
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      operationId: createMissedPartitions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Create missed partitions of an existing partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    delete:
      operationId: removeDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove deduplication configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get deduplication configuration of a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: DeduplicationEnabled policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Set deduplication enabled on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    delete:
      operationId: deleteDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    delete:
      operationId: deleteDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    delete:
      operationId: removeDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      operationId: examineMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        in: query
        name: initialPosition
        schema:
          default: latest
          enum:
          - latest
          - earliest
          type: string
      - description: The position of messages (default 1)
        in: query
        name: messagePosition
        schema:
          default: 1
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, the message position does not exist
        "405":
          content: {}
          description: If given partitioned topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    delete:
      operationId: deleteInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete inactive topic policies on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get inactive topic policies on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: inactive topic policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set inactive topic policies on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfo
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stored topic metadata.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: metadata
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the internal stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageId
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      operationId: getMessageById
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: The ledger id
        in: path
        name: ledgerId
        required: true
        schema:
          format: int64
          type: integer
      - description: The entry id
        in: path
        name: entryId
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get message by its messageId.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    delete:
      operationId: removeMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxConsumers config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxConsumers config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max consumers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxConsumers config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    delete:
      operationId: removeMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxMessageSize:
    delete:
      operationId: removeMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxMessageSize config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxMessageSize config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max message size of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxMessageSize config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxProducers:
    delete:
      operationId: removeMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxProducers config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxProducers config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max producers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxProducers
      summary: Set maxProducers config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic:
    delete:
      operationId: removeMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxSubscriptionsPerTopic config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxSubscriptionsPerTopic config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max subscriptions of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxSubscriptionsPerTopic
      summary: Set maxSubscriptionsPerTopic config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    delete:
      operationId: deleteMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on consumer policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    delete:
      operationId: deleteMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on subscription policies for the specified
          topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/messageTTL:
    delete:
      operationId: removeMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Remove message TTL in seconds for a topic
      tags:
      - non-persistent topic
    get:
      operationId: getMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
      summary: Get message TTL in seconds for a topic
      tags:
      - non-persistent topic
    post:
      operationId: setMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: TTL in seconds for the specified namespace
        in: query
        name: messageTTL
        required: true
        schema:
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Set message TTL in seconds for a topic
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
    put:
      operationId: triggerOffload
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Message ID is null
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Offload already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    delete:
      operationId: removeOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete offload policies on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get offload policies on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        description: Offload policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set offload policies on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Get per partition stats
        in: query
        name: perPartition
        schema:
          default: true
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: If return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      - description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        in: query
        name: subscriptionBacklogSize
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Partitioned topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPartitionedMetadata
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is check configuration required to automatically create topic
        in: query
        name: checkAllowAutoCreation
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate cluster configuration
      summary: Get partitioned topic metadata.
      tags:
      - non-persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: updateLocalTopicOnly
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Increment partitions of an existing partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: createLocalTopicOnly
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic already exists
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    enum:
                    - produce
                    - consume
                    - functions
                    - sources
                    - sinks
                    - packages
                    type: string
                  type: array
                  uniqueItems: true
                type: object
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Permissions are not set at the topic level
        "500":
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: grantPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/persistence:
    delete:
      operationId: removePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Bookkeeper persistence policies for specified topic
        required: false
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/publishRate:
    delete:
      operationId: removePublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message publish rate configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get publish rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message publish rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/replicatorDispatchRate:
    delete:
      operationId: removeReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove replicatorDispatchRate config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get replicatorDispatchRate config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Replicator dispatch rate of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of replicatorDispatchRate
      summary: Set replicatorDispatchRate config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/retention:
    delete:
      operationId: removeRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Remove retention configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get retention configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Set retention configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: If return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      - description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        in: query
        name: subscriptionBacklogSize
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonPersistentTopicStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    delete:
      operationId: removeSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
    get:
      operationId: getSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deleteSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Disconnect and close all consumers and delete subscription forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Subscription has active consumers
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/replicatedSubscriptionStatus:
    post:
      operationId: setReplicatedSubscriptionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: Whether to enable replicated subscription
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            or subscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on this topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Enable or disable a replicated subscription on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "412":
          content: {}
          description: Unable to find position for position specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: the timestamp to reset back
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Method Not Allowed
        "412":
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on non-persistent topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is replicated required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Create subscription on non persistent topic is not supported
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a subscription on the topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    delete:
      operationId: removeSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
    get:
      operationId: getSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
    post:
      operationId: setSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Subscription message dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptionTypesEnabled:
    get:
      operationId: getSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get is enable sub type fors specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
                type: string
              type: array
        description: Enable sub types for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set is enable sub types for specified topic
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      operationId: terminate
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/terminate/partitions:
    post:
      operationId: terminatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate all partitioned topic. A topic that is terminated will not
        accept any more messages to be published and will let consumer to drain existing
        messages in backlog
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/truncate:
    delete:
      description: NonPersistentTopic does not support truncate.
      operationId: truncateTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "412":
          content: {}
          description: NonPersistentTopic does not support truncate.
      summary: Truncate a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: This operation requires super-user access
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Unload a topic
      tags:
      - non-persistent topic
  /persistent/{tenant}/{namespace}:
    get:
      operationId: getList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic has active producers/subscriptions
        "500":
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklog
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        "404":
          content: {}
          description: Namespace does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    delete:
      operationId: removeBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a topic.
      tags:
      - persistent topic
    post:
      operationId: setBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          - message_age
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: Set a backlog quota for a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic policy does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get backlog quota map on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist, or compaction hasn't run
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - persistent topic
    put:
      operationId: compact
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Compaction already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    delete:
      operationId: removeCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove compaction threshold configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get compaction threshold configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int64
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set compaction threshold configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      operationId: createMissedPartitions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Create missed partitions of an existing partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    delete:
      operationId: removeDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove deduplication configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get deduplication configuration of a topic.
      tags:
      - persistent topic
    post:
      operationId: setDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: DeduplicationEnabled policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Set deduplication enabled on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    delete:
      operationId: deleteDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    delete:
      operationId: deleteDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get delayed delivery messages config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    delete:
      operationId: removeDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message dispatch rate configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get dispatch rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message dispatch rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      operationId: examineMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        in: query
        name: initialPosition
        schema:
          default: latest
          enum:
          - latest
          - earliest
          type: string
      - description: The position of messages (default 1)
        in: query
        name: messagePosition
        schema:
          default: 1
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, the message position does not exist
        "405":
          content: {}
          description: If given partitioned topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    delete:
      operationId: deleteInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete inactive topic policies on a topic.
      tags:
      - persistent topic
    get:
      operationId: getInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get inactive topic policies on a topic.
      tags:
      - persistent topic
    post:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: inactive topic policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set inactive topic policies on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfo
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stored topic metadata.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: metadata
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the internal stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageId
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      operationId: getMessageById
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: The ledger id
        in: path
        name: ledgerId
        required: true
        schema:
          format: int64
          type: integer
      - description: The entry id
        in: path
        name: entryId
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get message by its messageId.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    delete:
      operationId: removeMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxConsumers config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxConsumers config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max consumers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxConsumers config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    delete:
      operationId: removeMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxMessageSize:
    delete:
      operationId: removeMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxMessageSize config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxMessageSize config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxMessageSize
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max message size of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxMessageSize config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxProducers:
    delete:
      operationId: removeMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxProducers config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxProducers config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max producers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxProducers
      summary: Set maxProducers config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxSubscriptionsPerTopic:
    delete:
      operationId: removeMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxSubscriptionsPerTopic config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxSubscriptionsPerTopic config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxSubscriptionsPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max subscriptions of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxSubscriptionsPerTopic
      summary: Set maxSubscriptionsPerTopic config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    delete:
      operationId: deleteMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on consumer policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    delete:
      operationId: deleteMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on subscription policies for the specified
          topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/messageTTL:
    delete:
      operationId: removeMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Remove message TTL in seconds for a topic
      tags:
      - persistent topic
    get:
      operationId: getMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
      summary: Get message TTL in seconds for a topic
      tags:
      - persistent topic
    post:
      operationId: setMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: TTL in seconds for the specified namespace
        in: query
        name: messageTTL
        required: true
        schema:
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Set message TTL in seconds for a topic
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
    put:
      operationId: triggerOffload
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Message ID is null
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Offload already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    delete:
      operationId: removeOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete offload policies on a topic.
      tags:
      - persistent topic
    get:
      operationId: getOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get offload policies on a topic.
      tags:
      - persistent topic
    post:
      operationId: setOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPoliciesImpl'
        description: Offload policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set offload policies on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Get per partition stats
        in: query
        name: perPartition
        schema:
          default: true
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: If return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      - description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        in: query
        name: subscriptionBacklogSize
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Partitioned topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - persistent topic
    get:
      operationId: getPartitionedMetadata
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is check configuration required to automatically create topic
        in: query
        name: checkAllowAutoCreation
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Get partitioned topic metadata.
      tags:
      - persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: updateLocalTopicOnly
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Increment partitions of an existing partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: createLocalTopicOnly
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  items:
                    enum:
                    - produce
                    - consume
                    - functions
                    - sources
                    - sinks
                    - packages
                    type: string
                  type: array
                  uniqueItems: true
                type: object
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Permissions are not set at the topic level
        "500":
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - persistent topic
    post:
      operationId: grantPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/persistence:
    delete:
      operationId: removePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove configuration of persistence policies for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get configuration of persistence policies for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Bookkeeper persistence policies for specified topic
        required: false
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set configuration of persistence policies for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/publishRate:
    delete:
      operationId: removePublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message publish rate configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get publish rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message publish rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/replicatorDispatchRate:
    delete:
      operationId: removeReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove replicatorDispatchRate config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get replicatorDispatchRate config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Replicator dispatch rate of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of replicatorDispatchRate
      summary: Set replicatorDispatchRate config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/retention:
    delete:
      operationId: removeRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Remove retention configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get retention configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Set retention configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: If return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      - description: If return backlog size for each subscription, require locking
          on ledger so be careful not to use when there's heavy traffic.
        in: query
        name: subscriptionBacklogSize
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    delete:
      operationId: removeSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscribe rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
    get:
      operationId: getSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscribe rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscribe rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deleteSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Disconnect and close all consumers and delete subscription forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Subscription has active consumers
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/replicatedSubscriptionStatus:
    post:
      operationId: setReplicatedSubscriptionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: Whether to enable replicated subscription
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            or subscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on this topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Enable or disable a replicated subscription on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "412":
          content: {}
          description: Unable to find position for position specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: the timestamp to reset back
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Method Not Allowed
        "412":
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on non-persistent topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is replicated required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Create subscription on non persistent topic is not supported
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a subscription on the topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    delete:
      operationId: removeSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
    get:
      operationId: getSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: applied
        schema:
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
    post:
      operationId: setSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRateImpl'
        description: Subscription message dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscriptionTypesEnabled:
    get:
      operationId: getSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get is enable sub type fors specified topic.
      tags:
      - persistent topic
    post:
      operationId: setSubscriptionTypesEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - Exclusive
                - Shared
                - Failover
                - Key_Shared
                type: string
              type: array
        description: Enable sub types for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set is enable sub types for specified topic
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      operationId: terminate
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate a topic. A topic that is terminated will not accept any more
        messages to be published and will let consumer to drain existing messages
        in backlog
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/terminate/partitions:
    post:
      operationId: terminatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate all partitioned topic. A topic that is terminated will not
        accept any more messages to be published and will let consumer to drain existing
        messages in backlog
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/truncate:
    delete:
      description: The truncate operation will move all cursors to the end of the
        topic and delete all inactive ledgers.
      operationId: truncateTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "500":
          content: {}
          description: Internal server error
      summary: Truncate a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid or can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Unload a topic
      tags:
      - persistent topic
  /resource-quotas:
    get:
      operationId: getDefaultResourceQuota
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the default quota
      tags:
      - resource-quotas
    post:
      operationId: setDefaultResourceQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        description: Default resource quota
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set the default quota
      tags:
      - resource-quotas
      x-codegen-request-body-name: body
  /resource-quotas/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: removeNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove resource quota for a namespace.
      tags:
      - resource-quotas
    get:
      operationId: getNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get resource quota of a namespace bundle.
      tags:
      - resource-quotas
    post:
      operationId: setNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        description: Resource quota for the specified namespace
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Concurrent modification
      summary: Set resource quota on a namespace.
      tags:
      - resource-quotas
      x-codegen-request-body-name: body
  /resourcegroups:
    get:
      operationId: getResourceGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the list of all the resourcegroups.
      tags:
      - resourcegroups
  /resourcegroups/{resourcegroup}:
    delete:
      operationId: deleteResourceGroup
      parameters:
      - in: path
        name: resourcegroup
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: ResourceGroup doesn't exist
        "409":
          content: {}
          description: ResourceGroup is in use
      summary: Delete a resourcegroup.
      tags:
      - resourcegroups
    get:
      operationId: getResourceGroup
      parameters:
      - in: path
        name: resourcegroup
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceGroup'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: ResourceGroup doesn't exist
      summary: Get the rate limiters specified for a resourcegroup.
      tags:
      - resourcegroups
    put:
      operationId: createOrUpdateResourceGroup
      parameters:
      - in: path
        name: resourcegroup
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceGroup'
        description: Rate limiters for the resourcegroup
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: cluster doesn't exist
      summary: Creates a new resourcegroup with the specified rate limiters
      tags:
      - resourcegroups
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/compatibility:
    post:
      operationId: testCompatibility
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsCompatibilityResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: test the schema compatibility
      tags:
      - schemas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema:
    delete:
      operationId: deleteSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Delete the schema of a topic
      tags:
      - schemas
    get:
      operationId: getSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the schema of a topic
      tags:
      - schemas
    post:
      operationId: postSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "409":
          content: {}
          description: Incompatible schema
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "422":
          content: {}
          description: Invalid schema data
        "500":
          content: {}
          description: Internal Server Error
      summary: Update the schema of a topic
      tags:
      - schemas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema/{version}:
    get:
      operationId: getSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the schema of a topic at a given version
      tags:
      - schemas
  /schemas/{tenant}/{namespace}/{topic}/schemas:
    get:
      operationId: getAllSchemas
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVersionsSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the all schemas of a topic
      tags:
      - schemas
  /schemas/{tenant}/{namespace}/{topic}/version:
    post:
      operationId: getVersionBySchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongSchemaVersion'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "422":
          content: {}
          description: Invalid schema data
        "500":
          content: {}
          description: Internal Server Error
      summary: get the version of the schema
      tags:
      - schemas
      x-codegen-request-body-name: body
  /tenants:
    get:
      operationId: getTenants
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of existing tenants.
      tags:
      - tenants
  /tenants/{tenant}:
    delete:
      operationId: deleteTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: query
        name: force
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
        "405":
          content: {}
          description: Broker doesn't allow forced deletion of tenants
        "409":
          content: {}
          description: The tenant still has active namespaces
      summary: Delete a tenant and all namespaces and topics under it.
      tags:
      - tenants
    get:
      operationId: getTenantAdmin
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
      summary: Get the admin configuration for a given tenant.
      tags:
      - tenants
    post:
      description: This operation requires Pulsar super-user privileges.
      operationId: updateTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Tenant already exists
        "412":
          content: {}
          description: Clusters do not exist
      summary: Update the admins for a tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar super-user privileges.
      operationId: createTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "409":
          content: {}
          description: Tenant already exists
        "412":
          content: {}
          description: Clusters do not exist
      summary: Create a new tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
  /worker-stats/functionsmetrics:
    get:
      description: Requested should be executed by Monitoring agent on each worker
        to fetch the metrics
      operationId: getStats
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkerFunctionInstanceStats'
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have admin permission
        "503":
          content: {}
          description: Worker service is not running
      summary: Get metrics for all functions owned by worker
  /worker-stats/metrics:
    get:
      description: Request should be executed by Monitoring agent on each worker to
        fetch the worker-metrics
      operationId: getMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have admin permission
        "503":
          content: {}
          description: Worker service is not running
      summary: Gets the metrics for Monitoring
  /worker/assignments:
    get:
      operationId: getAssignments
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "503":
          content: {}
          description: Worker service is not running
      summary: Fetches information about which Pulsar Functions are assigned to which
        Pulsar clusters
  /worker/cluster:
    get:
      operationId: getCluster
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/WorkerInfo'
                type: array
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "503":
          content: {}
          description: Worker service is not running
      summary: Fetches information about the Pulsar cluster running Pulsar Functions
  /worker/cluster/leader:
    get:
      operationId: getClusterLeader
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkerInfo'
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "503":
          content: {}
          description: Worker service is not running
      summary: Fetches info about the leader node of the Pulsar cluster running Pulsar
        Functions
  /worker/cluster/leader/ready:
    get:
      operationId: isLeaderReady
      responses:
        "200":
          content:
            '*/*':
              schema:
                type: boolean
          description: successful operation
        "503":
          content: {}
          description: Worker service is not running
      summary: Checks if this node is the leader and is ready to service requests
  /worker/connectors:
    get:
      operationId: getConnectorsList
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        "400":
          content: {}
          description: Invalid request
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "408":
          content: {}
          description: Request timeout
      summary: Fetches a list of supported Pulsar IO connectors currently running
        in cluster mode
  /worker/rebalance:
    put:
      operationId: rebalance
      responses:
        "400":
          content: {}
          description: Invalid request
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "408":
          content: {}
          description: Request timeout
      summary: Triggers a rebalance of functions to workers
components:
  schemas:
    AllocatorStats:
      example:
        numDirectArenas: 0
        normalCacheSize: 5
        smallCacheSize: 5
        numThreadLocalCaches: 1
        tinyCacheSize: 2
        heapArenas:
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        directArenas:
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        - numActiveNormalAllocations: 6
          numDeallocations: 8
          tinySubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          smallSubpages:
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          - numAvailable: 4
            elementSize: 7
            pageSize: 1
            maxNumElements: 2
          numActiveTinyAllocations: 2
          numActiveAllocations: 1
          chunkLists:
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          - chunks:
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            - chunkSize: 7
              usage: 6
              freeBytes: 1
            minUsage: 1
            maxUsage: 1
          numHugeDeallocations: 6
          numActiveSmallAllocations: 6
          numAllocations: 4
          numTinySubpages: 7
          numSmallAllocations: 9
          numTinyDeallocations: 9
          numTinyAllocations: 5
          numNormalDeallocations: 3
          numActiveHugeAllocations: 5
          numNormalAllocations: 9
          numSmallSubpages: 9
          numHugeAllocations: 6
          numChunkLists: 3
          numSmallDeallocations: 6
        numHeapArenas: 6
      properties:
        numDirectArenas:
          format: int32
          type: integer
        numHeapArenas:
          format: int32
          type: integer
        numThreadLocalCaches:
          format: int32
          type: integer
        normalCacheSize:
          format: int32
          type: integer
        smallCacheSize:
          format: int32
          type: integer
        tinyCacheSize:
          format: int32
          type: integer
        directArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
        heapArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
      type: object
    Annotation:
      type: object
    AnnotationIntrospector:
      type: object
    ArrayBuilders:
      properties:
        booleanBuilder:
          type: object
        byteBuilder:
          type: object
        shortBuilder:
          type: object
        intBuilder:
          type: object
        longBuilder:
          type: object
        floatBuilder:
          type: object
        doubleBuilder:
          type: object
      type: object
    AuthPolicies:
      example:
        topicAuthentication:
          key:
            key:
            - produce
            - produce
        subscriptionAuthentication:
          key:
          - subscriptionAuthentication
          - subscriptionAuthentication
        namespaceAuthentication:
          key:
          - produce
          - produce
      properties:
        topicAuthentication:
          additionalProperties:
            additionalProperties:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                - packages
                type: string
              type: array
              uniqueItems: true
            type: object
          type: object
        subscriptionAuthentication:
          additionalProperties:
            items:
              type: string
            type: array
            uniqueItems: true
          type: object
        namespaceAuthentication:
          additionalProperties:
            items:
              enum:
              - produce
              - consume
              - functions
              - sources
              - sinks
              - packages
              type: string
            type: array
            uniqueItems: true
          type: object
      type: object
    AuthenticationDataHttps:
      properties:
        subscription:
          type: string
        tlsCertificates:
          items:
            $ref: '#/components/schemas/X509Certificate'
          type: array
        httpAuthType:
          type: string
        peerAddress:
          type: object
        commandData:
          type: string
      type: object
    AutoFailoverPolicyData:
      example:
        policyType: min_available
        parameters:
          key: parameters
      properties:
        policyType:
          enum:
          - min_available
          type: string
        parameters:
          additionalProperties:
            type: string
          type: object
      type: object
    AutoSubscriptionCreationOverride:
      example:
        allowAutoSubscriptionCreation: true
      properties:
        allowAutoSubscriptionCreation:
          type: boolean
      type: object
    AutoTopicCreationOverride:
      example:
        defaultNumPartitions: 1
        allowAutoTopicCreation: true
        topicType: topicType
      properties:
        topicType:
          type: string
        defaultNumPartitions:
          format: int32
          type: integer
        allowAutoTopicCreation:
          type: boolean
      type: object
    BacklogQuota:
      example:
        limitTime: 1
        limitSize: 6
        policy: producer_request_hold
      properties:
        limitSize:
          format: int64
          type: integer
        limitTime:
          format: int32
          type: integer
        policy:
          enum:
          - producer_request_hold
          - producer_exception
          - consumer_backlog_eviction
          type: string
      type: object
    Base64Variant:
      properties:
        paddingChar:
          type: string
        paddingByte:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        name:
          type: string
        maxLineLength:
          format: int32
          type: integer
      type: object
    BookieAffinityGroupData:
      example:
        bookkeeperAffinityGroupSecondary: bookkeeperAffinityGroupSecondary
        bookkeeperAffinityGroupPrimary: bookkeeperAffinityGroupPrimary
      properties:
        bookkeeperAffinityGroupPrimary:
          type: string
        bookkeeperAffinityGroupSecondary:
          type: string
      type: object
    BookieInfo:
      example:
        rack: rack
        hostname: hostname
      properties:
        rack:
          type: string
        hostname:
          type: string
      type: object
    BookiesClusterInfo:
      example:
        bookies:
        - bookieId: bookieId
        - bookieId: bookieId
      properties:
        bookies:
          items:
            $ref: '#/components/schemas/RawBookieInfo'
          type: array
      type: object
    BooleanBuilder:
      type: object
    BrokerInfo:
      example:
        serviceUrl: serviceUrl
      properties:
        serviceUrl:
          type: string
      type: object
    BrokerNamespaceIsolationData:
      description: The namespace isolation data for a given broker
      example:
        policyName: my-policy
        namespaceRegex:
        - namespaceRegex
        - namespaceRegex
        brokerName: broker1:8080
        primary: true
      properties:
        brokerName:
          description: The broker name
          example: broker1:8080
          type: string
        policyName:
          description: Policy name
          example: my-policy
          type: string
        namespaceRegex:
          description: The namespace-isolation policies attached to this broker
          items:
            type: string
          type: array
        primary:
          type: boolean
      type: object
    BundlesData:
      example:
        boundaries:
        - boundaries
        - boundaries
        numBundles: 0
      properties:
        boundaries:
          items:
            type: string
          type: array
        numBundles:
          format: int32
          type: integer
      type: object
    ByteBuilder:
      type: object
    CharacterEscapes:
      properties:
        escapeCodesForAscii:
          items:
            format: int32
            type: integer
          type: array
      type: object
    ClassIntrospector:
      type: object
    ClassLoader:
      properties:
        parent:
          $ref: '#/components/schemas/ClassLoader'
        name:
          type: string
        unnamedModule:
          $ref: '#/components/schemas/Module'
        registeredAsParallelCapable:
          type: boolean
        definedPackages:
          items:
            $ref: '#/components/schemas/Package'
          type: array
      type: object
    ClusterData:
      description: The configuration data for a cluster
      example:
        serviceUrlTls: https://pulsar.example.com:8443
        brokerClientTlsEnabled: true
        proxyProtocol: SNI
        authenticationPlugin: org.apache.pulsar.client.impl.auth.AuthenticationToken
        brokerClientTlsTrustStorePassword: brokerClientTlsTrustStorePassword
        serviceUrl: http://pulsar.example.com:8080
        brokerServiceUrlTls: pulsar+ssl://pulsar.example.com:6651
        brokerClientTrustCertsFilePath: brokerClientTrustCertsFilePath
        authenticationParameters: authenticationParameters
        tlsAllowInsecureConnection: true
        brokerClientTlsTrustStore: brokerClientTlsTrustStore
        peerClusterNames:
        - peerClusterNames
        - peerClusterNames
        brokerClientTlsEnabledWithKeyStore: true
        brokerClientTlsTrustStoreType: JKS
        listenerName: listenerName
        proxyServiceUrl: pulsar+ssl://ats-proxy.example.com:4443 or pulsar://ats-proxy.example.com:4080
        brokerServiceUrl: pulsar://pulsar.example.com:6650
      properties:
        serviceUrl:
          description: The HTTP rest service URL (for admin operations)
          example: http://pulsar.example.com:8080
          type: string
        serviceUrlTls:
          description: The HTTPS rest service URL (for admin operations)
          example: https://pulsar.example.com:8443
          type: string
        brokerServiceUrl:
          description: The broker service url (for produce and consume operations)
          example: pulsar://pulsar.example.com:6650
          type: string
        brokerServiceUrlTls:
          description: The secured broker service url (for produce and consume operations)
          example: pulsar+ssl://pulsar.example.com:6651
          type: string
        proxyServiceUrl:
          description: Proxy-service url when client would like to connect to broker
            via proxy.
          example: pulsar+ssl://ats-proxy.example.com:4443 or pulsar://ats-proxy.example.com:4080
          type: string
        authenticationPlugin:
          description: Authentication plugin when client would like to connect to
            cluster.
          example: org.apache.pulsar.client.impl.auth.AuthenticationToken
          type: string
        authenticationParameters:
          description: Authentication parameters when client would like to connect
            to cluster.
          type: string
        proxyProtocol:
          description: 'protocol to decide type of proxy routing eg: SNI-routing'
          enum:
          - SNI
          example: SNI
          type: string
        peerClusterNames:
          description: A set of peer cluster names
          items:
            type: string
          type: array
          uniqueItems: true
        brokerClientTlsEnabled:
          description: Enable TLS when talking with other brokers in the same cluster
            (admin operation) or different clusters (replication)
          type: boolean
        tlsAllowInsecureConnection:
          description: Allow TLS connections to servers whose certificate cannot be
            be verified to have been signed by a trusted certificate authority.
          type: boolean
        brokerClientTlsEnabledWithKeyStore:
          description: Whether internal client use KeyStore type to authenticate with
            other Pulsar brokers
          type: boolean
        brokerClientTlsTrustStoreType:
          description: 'TLS TrustStore type configuration for internal client: JKS,
            PKCS12 used by the internal client to authenticate with Pulsar brokers'
          example: JKS
          type: string
        brokerClientTlsTrustStore:
          description: TLS TrustStore path for internal client used by the internal
            client to authenticate with Pulsar brokers
          type: string
        brokerClientTlsTrustStorePassword:
          description: TLS TrustStore password for internal client used by the internal
            client to authenticate with Pulsar brokers
          type: string
        brokerClientTrustCertsFilePath:
          description: Path for the trusted TLS certificate file for outgoing connection
            to a server (broker)
          type: string
        listenerName:
          description: listenerName when client would like to connect to cluster
          type: string
      type: object
    CompactionStats:
      example:
        lastCompactionDurationTimeInMills: 4
        lastCompactionRemovedEventCount: 0
        lastCompactionSucceedTimestamp: 7
        lastCompactionFailedTimestamp: 5
      properties:
        lastCompactionRemovedEventCount:
          format: int64
          type: integer
        lastCompactionSucceedTimestamp:
          format: int64
          type: integer
        lastCompactionFailedTimestamp:
          format: int64
          type: integer
        lastCompactionDurationTimeInMills:
          format: int64
          type: integer
      type: object
    CompletableFuture:
      properties:
        done:
          type: boolean
        completedExceptionally:
          type: boolean
        numberOfDependents:
          format: int32
          type: integer
        cancelled:
          type: boolean
      type: object
    CompletableFutureClusterData:
      properties:
        done:
          type: boolean
        completedExceptionally:
          type: boolean
        numberOfDependents:
          format: int32
          type: integer
        cancelled:
          type: boolean
      type: object
    CompletableFuturePartitionedTopicMetadata:
      properties:
        done:
          type: boolean
        completedExceptionally:
          type: boolean
        numberOfDependents:
          format: int32
          type: integer
        cancelled:
          type: boolean
      type: object
    ConnectorDefinition:
      properties:
        name:
          type: string
        description:
          type: string
        sourceClass:
          type: string
        sinkClass:
          type: string
        sourceConfigClass:
          type: string
        sinkConfigClass:
          type: string
      type: object
    ConsumerStats:
      example:
        metadata:
          key: metadata
        address: address
        msgRateRedeliver: 1.2315135367772556
        avgMessagesPerEntry: 1
        msgOutCounter: 4
        clientVersion: clientVersion
        keyHashRanges:
        - keyHashRanges
        - keyHashRanges
        msgThroughputOut: 9.301444243932576
        readPositionWhenJoining: readPositionWhenJoining
        availablePermits: 3
        bytesOutCounter: 2
        connectedSince: connectedSince
        lastAckedTimestamp: 7
        blockedConsumerOnUnackedMsgs: true
        unackedMessages: 1
        chunkedMessageRate: 1.0246457001441578
        msgRateOut: 7.386281948385884
        lastConsumedTimestamp: 6
        consumerName: consumerName
      properties:
        msgThroughputOut:
          format: double
          type: number
        availablePermits:
          format: int32
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        connectedSince:
          type: string
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        chunkedMessageRate:
          format: double
          type: number
        unackedMessages:
          format: int32
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        lastAckedTimestamp:
          format: int64
          type: integer
        consumerName:
          type: string
        avgMessagesPerEntry:
          format: int32
          type: integer
        blockedConsumerOnUnackedMsgs:
          type: boolean
        readPositionWhenJoining:
          type: string
        clientVersion:
          type: string
        keyHashRanges:
          items:
            type: string
          type: array
        metadata:
          additionalProperties:
            type: string
          type: object
        address:
          type: string
      type: object
    ContextAttributes:
      type: object
    Currency:
      properties:
        currencyCode:
          type: string
        defaultFractionDigits:
          format: int32
          type: integer
        numericCode:
          format: int32
          type: integer
        displayName:
          type: string
        symbol:
          type: string
        numericCodeAsString:
          type: string
      type: object
    CursorDetails:
      example:
        cursorLedgerId: 3
        cursorBacklog: 9
      properties:
        cursorBacklog:
          format: int64
          type: integer
        cursorLedgerId:
          format: int64
          type: integer
      type: object
    CursorStats:
      example:
        numberOfEntriesSinceFirstNotAckedMessage: 1
        markDeletePosition: markDeletePosition
        cursorLedgerLastEntry: 1
        pendingReadOps: 4
        totalNonContiguousDeletedMessagesRange: 6
        lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
        subscriptionHavePendingReplayRead: true
        readPosition: readPosition
        individuallyDeletedMessages: individuallyDeletedMessages
        waitingReadOp: true
        messagesConsumedCounter: 7
        subscriptionHavePendingRead: true
        state: state
        cursorLedger: 1
        properties:
          key: 7
      properties:
        markDeletePosition:
          type: string
        readPosition:
          type: string
        waitingReadOp:
          type: boolean
        pendingReadOps:
          format: int32
          type: integer
        messagesConsumedCounter:
          format: int64
          type: integer
        cursorLedger:
          format: int64
          type: integer
        cursorLedgerLastEntry:
          format: int64
          type: integer
        individuallyDeletedMessages:
          type: string
        lastLedgerSwitchTimestamp:
          type: string
        state:
          type: string
        numberOfEntriesSinceFirstNotAckedMessage:
          format: int64
          type: integer
        totalNonContiguousDeletedMessagesRange:
          format: int32
          type: integer
        subscriptionHavePendingRead:
          type: boolean
        subscriptionHavePendingReplayRead:
          type: boolean
        properties:
          additionalProperties:
            format: int64
            type: integer
          type: object
      type: object
    DateFormat:
      properties:
        calendar:
          format: date-time
          type: string
        numberFormat:
          $ref: '#/components/schemas/NumberFormat'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        lenient:
          type: boolean
      type: object
    DelayedDeliveryPolicies:
      example:
        tickTime: 9
        active: true
      properties:
        tickTime:
          format: int64
          type: integer
        active:
          type: boolean
      type: object
    DeleteSchemaResponse:
      example:
        version: 0
      properties:
        version:
          format: int64
          type: integer
      type: object
    DeserializationConfig:
      properties:
        problemHandlers:
          type: object
        defaultPropertyInclusion:
          $ref: '#/components/schemas/Value'
        nodeFactory:
          type: object
        annotationIntrospector:
          type: object
        deserializationFeatures:
          format: int32
          type: integer
        fullRootName:
          $ref: '#/components/schemas/PropertyName'
        subtypeResolver:
          type: object
        defaultVisibilityChecker:
          type: object
        attributes:
          type: object
        rootName:
          type: string
        propertyNamingStrategy:
          type: object
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        handlerInstantiator:
          type: object
        annotationProcessingEnabled:
          type: boolean
        classIntrospector:
          type: object
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        locale:
          $ref: '#/components/schemas/Locale'
      type: object
    DeserializationContext:
      properties:
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        nodeFactory:
          type: object
        annotationIntrospector:
          type: object
        contextualType:
          $ref: '#/components/schemas/JavaType'
        deserializationFeatures:
          format: int32
          type: integer
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        arrayBuilders:
          $ref: '#/components/schemas/ArrayBuilders'
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        locale:
          $ref: '#/components/schemas/Locale'
        factory:
          type: object
        config:
          $ref: '#/components/schemas/DeserializationConfig'
        parser:
          $ref: '#/components/schemas/JsonParser'
      type: object
    DeserializerFactory:
      type: object
    DispatchRate:
      example:
        dispatchThrottlingRateInMsg: 0
        relativeToPublishRate: true
        ratePeriodInSecond: 1
        dispatchThrottlingRateInByte: 6
      properties:
        dispatchThrottlingRateInMsg:
          format: int32
          type: integer
        dispatchThrottlingRateInByte:
          format: int64
          type: integer
        relativeToPublishRate:
          type: boolean
        ratePeriodInSecond:
          format: int32
          type: integer
      type: object
    DispatchRateImpl:
      example:
        dispatchThrottlingRateInMsg: 5
        relativeToPublishRate: true
        ratePeriodInSecond: 2
        dispatchThrottlingRateInByte: 5
      properties:
        dispatchThrottlingRateInMsg:
          format: int32
          type: integer
        dispatchThrottlingRateInByte:
          format: int64
          type: integer
        relativeToPublishRate:
          type: boolean
        ratePeriodInSecond:
          format: int32
          type: integer
      type: object
    DoubleBuilder:
      type: object
    FailureDomain:
      description: The data of a failure domain configuration in a cluster
      example:
        brokers: '[ ''broker-1'', ''broker-2'' ]'
      properties:
        brokers:
          description: The collection of brokers in the same failure domain
          example: '[ ''broker-1'', ''broker-2'' ]'
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    FilterProvider:
      type: object
    FloatBuilder:
      type: object
    FormatSchema:
      properties:
        schemaType:
          type: string
      type: object
    FunctionInstanceStatsData:
      example:
        avgProcessLatency: 3.616076749251911
        userExceptionsTotal: 9
        userMetrics:
          key: 2.3021358869347655
        receivedTotal: 4
        oneMin:
          avgProcessLatency: 6.027456183070403
          userExceptionsTotal: 0
          receivedTotal: 5
          systemExceptionsTotal: 5
          processedSuccessfullyTotal: 1
        systemExceptionsTotal: 7
        processedSuccessfullyTotal: 2
        lastInvocation: 7
      properties:
        oneMin:
          $ref: '#/components/schemas/FunctionInstanceStatsDataBase'
        userMetrics:
          additionalProperties:
            format: double
            type: number
          type: object
        lastInvocation:
          format: int64
          type: integer
        userExceptionsTotal:
          format: int64
          type: integer
        avgProcessLatency:
          format: double
          type: number
        processedSuccessfullyTotal:
          format: int64
          type: integer
        receivedTotal:
          format: int64
          type: integer
        systemExceptionsTotal:
          format: int64
          type: integer
      type: object
    FunctionInstanceStatsDataBase:
      example:
        avgProcessLatency: 6.027456183070403
        userExceptionsTotal: 0
        receivedTotal: 5
        systemExceptionsTotal: 5
        processedSuccessfullyTotal: 1
      properties:
        userExceptionsTotal:
          format: int64
          type: integer
        avgProcessLatency:
          format: double
          type: number
        processedSuccessfullyTotal:
          format: int64
          type: integer
        receivedTotal:
          format: int64
          type: integer
        systemExceptionsTotal:
          format: int64
          type: integer
      type: object
    Functions:
      properties:
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    FunctionsV2:
      properties:
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    FunctionsV2WorkerService:
      properties:
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    FunctionsWorkerService:
      properties:
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    GetAllVersionsSchemaResponse:
      example:
        getSchemaResponses:
        - data: data
          type: NONE
          version: 0
          properties:
            key: properties
          timestamp: 6
        - data: data
          type: NONE
          version: 0
          properties:
            key: properties
          timestamp: 6
      properties:
        getSchemaResponses:
          items:
            $ref: '#/components/schemas/GetSchemaResponse'
          type: array
      type: object
    GetSchemaResponse:
      example:
        data: data
        type: NONE
        version: 0
        properties:
          key: properties
        timestamp: 6
      properties:
        version:
          format: int64
          type: integer
        type:
          enum:
          - NONE
          - STRING
          - JSON
          - PROTOBUF
          - AVRO
          - BOOLEAN
          - INT8
          - INT16
          - INT32
          - INT64
          - FLOAT
          - DOUBLE
          - DATE
          - TIME
          - TIMESTAMP
          - KEY_VALUE
          - INSTANT
          - LOCAL_DATE
          - LOCAL_TIME
          - LOCAL_DATE_TIME
          - PROTOBUF_NATIVE
          - BYTES
          - AUTO
          - AUTO_CONSUME
          - AUTO_PUBLISH
          type: string
        timestamp:
          format: int64
          type: integer
        data:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    HandlerInstantiator:
      type: object
    InactiveTopicPolicies:
      example:
        inactiveTopicDeleteMode: delete_when_no_subscriptions
        maxInactiveDurationSeconds: 9
        deleteWhileInactive: true
      properties:
        inactiveTopicDeleteMode:
          enum:
          - delete_when_no_subscriptions
          - delete_when_subscriptions_caught_up
          type: string
        maxInactiveDurationSeconds:
          format: int32
          type: integer
        deleteWhileInactive:
          type: boolean
      type: object
    InjectableValues:
      type: object
    InputDecorator:
      type: object
    IntBuilder:
      type: object
    InternalConfigurationData:
      example:
        stateStorageServiceUrl: stateStorageServiceUrl
        bookkeeperMetadataServiceUri: bookkeeperMetadataServiceUri
        zookeeperServers: zookeeperServers
        ledgersRootPath: ledgersRootPath
        configurationStoreServers: configurationStoreServers
      properties:
        zookeeperServers:
          type: string
        configurationStoreServers:
          type: string
        ledgersRootPath:
          type: string
        bookkeeperMetadataServiceUri:
          type: string
        stateStorageServiceUrl:
          type: string
      type: object
    IsCompatibilityResponse:
      example:
        schemaCompatibilityStrategy: schemaCompatibilityStrategy
        compatibility: true
      properties:
        schemaCompatibilityStrategy:
          type: string
        compatibility:
          type: boolean
      type: object
    JavaType:
      properties:
        javaLangObject:
          type: boolean
        arrayType:
          type: boolean
        throwable:
          type: boolean
        collectionLikeType:
          type: boolean
        mapLikeType:
          type: boolean
        referencedType:
          $ref: '#/components/schemas/JavaType'
        valueHandler:
          properties: {}
          type: object
        typeHandler:
          properties: {}
          type: object
        contentValueHandler:
          properties: {}
          type: object
        contentTypeHandler:
          properties: {}
          type: object
        erasedSignature:
          type: string
        containerType:
          type: boolean
        bindings:
          $ref: '#/components/schemas/TypeBindings'
        keyType:
          $ref: '#/components/schemas/JavaType'
        concrete:
          type: boolean
        contentType:
          $ref: '#/components/schemas/JavaType'
        enumType:
          type: boolean
        interface:
          type: boolean
        primitive:
          type: boolean
        interfaces:
          items:
            $ref: '#/components/schemas/JavaType'
          type: array
        genericSignature:
          type: string
        final:
          type: boolean
        abstract:
          type: boolean
        superClass:
          $ref: '#/components/schemas/JavaType'
        typeName:
          type: string
        referenceType:
          type: boolean
      type: object
    JsonFactory:
      properties:
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        inputDecorator:
          type: object
        characterEscapes:
          $ref: '#/components/schemas/CharacterEscapes'
        outputDecorator:
          type: object
        rootValueSeparator:
          type: string
        formatName:
          type: string
      type: object
    JsonGenerator:
      properties:
        closed:
          type: boolean
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        characterEscapes:
          $ref: '#/components/schemas/CharacterEscapes'
        currentValue:
          properties: {}
          type: object
        featureMask:
          format: int32
          type: integer
        formatFeatures:
          format: int32
          type: integer
        prettyPrinter:
          type: object
        outputContext:
          $ref: '#/components/schemas/JsonStreamContext'
        outputTarget:
          properties: {}
          type: object
        highestEscapedChar:
          format: int32
          type: integer
        outputBuffered:
          format: int32
          type: integer
        schema:
          $ref: '#/components/schemas/FormatSchema'
      type: object
    JsonLocation:
      properties:
        byteOffset:
          format: int64
          type: integer
        sourceRef:
          properties: {}
          type: object
        lineNr:
          format: int32
          type: integer
        columnNr:
          format: int32
          type: integer
        charOffset:
          format: int64
          type: integer
      type: object
    JsonNodeFactory:
      type: object
    JsonParser:
      properties:
        closed:
          type: boolean
        currentLocation:
          $ref: '#/components/schemas/JsonLocation'
        codec:
          $ref: '#/components/schemas/ObjectCodec'
        binaryValue:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        currentValue:
          properties: {}
          type: object
        parsingContext:
          $ref: '#/components/schemas/JsonStreamContext'
        tokenLocation:
          $ref: '#/components/schemas/JsonLocation'
        inputSource:
          properties: {}
          type: object
        featureMask:
          format: int32
          type: integer
        formatFeatures:
          format: int32
          type: integer
        currentToken:
          enum:
          - NOT_AVAILABLE
          - START_OBJECT
          - END_OBJECT
          - START_ARRAY
          - END_ARRAY
          - FIELD_NAME
          - VALUE_EMBEDDED_OBJECT
          - VALUE_STRING
          - VALUE_NUMBER_INT
          - VALUE_NUMBER_FLOAT
          - VALUE_TRUE
          - VALUE_FALSE
          - VALUE_NULL
          type: string
        currentTokenId:
          format: int32
          type: integer
        expectedStartArrayToken:
          type: boolean
        expectedStartObjectToken:
          type: boolean
        lastClearedToken:
          enum:
          - NOT_AVAILABLE
          - START_OBJECT
          - END_OBJECT
          - START_ARRAY
          - END_ARRAY
          - FIELD_NAME
          - VALUE_EMBEDDED_OBJECT
          - VALUE_STRING
          - VALUE_NUMBER_INT
          - VALUE_NUMBER_FLOAT
          - VALUE_TRUE
          - VALUE_FALSE
          - VALUE_NULL
          type: string
        currentName:
          type: string
        textOffset:
          format: int32
          type: integer
        numberValue:
          type: object
        numberType:
          enum:
          - INT
          - LONG
          - BIG_INTEGER
          - FLOAT
          - DOUBLE
          - BIG_DECIMAL
          type: string
        bigIntegerValue:
          type: integer
        decimalValue:
          type: number
        embeddedObject:
          properties: {}
          type: object
        valueAsInt:
          format: int32
          type: integer
        valueAsLong:
          format: int64
          type: integer
        valueAsDouble:
          format: double
          type: number
        valueAsBoolean:
          type: boolean
        valueAsString:
          type: string
        objectId:
          properties: {}
          type: object
        typeId:
          properties: {}
          type: object
        text:
          type: string
        textCharacters:
          items:
            type: string
          type: array
        textLength:
          format: int32
          type: integer
        booleanValue:
          type: boolean
        byteValue:
          format: byte
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
        doubleValue:
          format: double
          type: number
        floatValue:
          format: float
          type: number
        longValue:
          format: int64
          type: integer
        shortValue:
          format: int32
          type: integer
        intValue:
          format: int32
          type: integer
        schema:
          $ref: '#/components/schemas/FormatSchema'
      type: object
    JsonSerializer:
      properties:
        unwrappingSerializer:
          type: boolean
      type: object
    JsonSerializerObject:
      properties:
        unwrappingSerializer:
          type: boolean
        delegatee:
          $ref: '#/components/schemas/JsonSerializerObject'
      type: object
    JsonStreamContext:
      properties:
        currentValue:
          properties: {}
          type: object
        currentName:
          type: string
        typeDesc:
          type: string
        entryCount:
          format: int32
          type: integer
        parent:
          $ref: '#/components/schemas/JsonStreamContext'
        currentIndex:
          format: int32
          type: integer
      type: object
    KubernetesContainerFactory:
      properties:
        k8Uri:
          type: string
        jobNamespace:
          type: string
        jobName:
          type: string
        pulsarDockerImageName:
          type: string
        functionDockerImages:
          additionalProperties:
            type: string
          type: object
        imagePullPolicy:
          type: string
        pulsarRootDir:
          type: string
        configAdminCLI:
          type: string
        submittingInsidePod:
          type: boolean
        pulsarServiceUrl:
          type: string
        pulsarAdminUrl:
          type: string
        installUserCodeDependencies:
          type: boolean
        pythonDependencyRepository:
          type: string
        pythonExtraDependencyRepository:
          type: string
        extraFunctionDependenciesDir:
          type: string
        customLabels:
          additionalProperties:
            type: string
          type: object
        expectedMetricsCollectionInterval:
          format: int32
          type: integer
        changeConfigMap:
          type: string
        changeConfigMapNamespace:
          type: string
        percentMemoryPadding:
          format: int32
          type: integer
        cpuOverCommitRatio:
          format: double
          type: number
        memoryOverCommitRatio:
          format: double
          type: number
        grpcPort:
          format: int32
          type: integer
        metricsPort:
          format: int32
          type: integer
        narExtractionDirectory:
          type: string
        functionInstanceClassPath:
          type: string
      type: object
    LedgerDetails:
      example:
        ledgerId: 7
        entries: 5
        size: 2
        timestamp: 5
      properties:
        entries:
          format: int64
          type: integer
        timestamp:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        ledgerId:
          format: int64
          type: integer
      type: object
    LedgerInfo:
      example:
        ledgerId: 9
        offloaded: true
        entries: 3
        metadata: metadata
        size: 2
        underReplicated: true
      properties:
        ledgerId:
          format: int64
          type: integer
        entries:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        offloaded:
          type: boolean
        metadata:
          type: string
        underReplicated:
          type: boolean
      type: object
    LinkedNode:
      type: object
    LinkedNodeDeserializationProblemHandler:
      type: object
    LoadReport:
      example:
        bundleStats:
          key:
            msgRateIn: 2.027123023002322
            cacheSize: 7
            consumerCount: 1
            topics: 6
            producerCount: 1
            msgThroughputIn: 4.145608029883936
            msgThroughputOut: 1.2315135367772556
            msgRateOut: 7.386281948385884
        preAllocatedMsgRateIn: 6.965117697638846
        allocatedMsgRateOut: 6.683562403749608
        overLoaded: true
        memory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        preAllocatedBandwidthIn: 6.438423552598547
        preAllocatedBandwidthOut: 3.5571952270680973
        preAllocatedMemory: 9.018348186070783
        numTopics: 5
        bandwidthIn:
          usage: 9.301444243932576
          limit: 3.616076749251911
        allocatedCPU: 1.1730742509559433
        bundleLosses:
        - bundleLosses
        - bundleLosses
        preAllocatedCPU: 8.762042012749001
        bandwidthOut:
          usage: 9.301444243932576
          limit: 3.616076749251911
        numProducers: 2
        underLoaded: true
        protocols:
          key: protocols
        systemResourceUsage:
          bandwidthIn:
            usage: 9.301444243932576
            limit: 3.616076749251911
          memory:
            usage: 9.301444243932576
            limit: 3.616076749251911
          bandwidthOut:
            usage: 9.301444243932576
            limit: 3.616076749251911
          cpu:
            usage: 9.301444243932576
            limit: 3.616076749251911
          directMemory:
            usage: 9.301444243932576
            limit: 3.616076749251911
        allocatedMemory: 4.965218492984954
        brokerVersionString: brokerVersionString
        timestamp: 0
        webServiceUrl: webServiceUrl
        msgRateIn: 6.027456183070403
        loadReportType: loadReportType
        webServiceUrlTls: webServiceUrlTls
        pulsarServiceUrl: pulsarServiceUrl
        cpu:
          usage: 9.301444243932576
          limit: 3.616076749251911
        numConsumers: 5
        msgThroughputIn: 2.8841621266687802
        msgThroughputOut: 6.878052220127876
        persistentTopicsEnabled: true
        preAllocatedMsgRateOut: 1.284659006116532
        pulsarServiceUrlTls: pulsarServiceUrlTls
        allocatedMsgRateIn: 9.369310271410669
        allocatedBandwidthIn: 5.025004791520295
        lastUpdate: 6
        name: name
        nonPersistentTopicsEnabled: true
        bundleGains:
        - bundleGains
        - bundleGains
        allocatedBandwidthOut: 9.965781217890562
        directMemory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        msgRateOut: 1.4658129805029452
        numBundles: 7
      properties:
        name:
          type: string
        brokerVersionString:
          type: string
        webServiceUrl:
          type: string
        webServiceUrlTls:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarServiceUrlTls:
          type: string
        persistentTopicsEnabled:
          type: boolean
        nonPersistentTopicsEnabled:
          type: boolean
        timestamp:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        numTopics:
          format: int32
          type: integer
        numConsumers:
          format: int32
          type: integer
        numProducers:
          format: int32
          type: integer
        numBundles:
          format: int32
          type: integer
        protocols:
          additionalProperties:
            type: string
          type: object
        systemResourceUsage:
          $ref: '#/components/schemas/SystemResourceUsage'
        bundleStats:
          additionalProperties:
            $ref: '#/components/schemas/NamespaceBundleStats'
          type: object
        bundleGains:
          items:
            type: string
          type: array
          uniqueItems: true
        bundleLosses:
          items:
            type: string
          type: array
          uniqueItems: true
        allocatedCPU:
          format: double
          type: number
        allocatedMemory:
          format: double
          type: number
        allocatedBandwidthIn:
          format: double
          type: number
        allocatedBandwidthOut:
          format: double
          type: number
        allocatedMsgRateIn:
          format: double
          type: number
        allocatedMsgRateOut:
          format: double
          type: number
        preAllocatedCPU:
          format: double
          type: number
        preAllocatedMemory:
          format: double
          type: number
        preAllocatedBandwidthIn:
          format: double
          type: number
        preAllocatedBandwidthOut:
          format: double
          type: number
        preAllocatedMsgRateIn:
          format: double
          type: number
        preAllocatedMsgRateOut:
          format: double
          type: number
        underLoaded:
          type: boolean
        overLoaded:
          type: boolean
        loadReportType:
          type: string
        msgThroughputIn:
          format: double
          type: number
        lastUpdate:
          format: int64
          type: integer
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
        msgThroughputOut:
          format: double
          type: number
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    Locale:
      properties:
        script:
          type: string
        country:
          type: string
        variant:
          type: string
        extensionKeys:
          items:
            type: string
          type: array
          uniqueItems: true
        unicodeLocaleAttributes:
          items:
            type: string
          type: array
          uniqueItems: true
        unicodeLocaleKeys:
          items:
            type: string
          type: array
          uniqueItems: true
        iso3Language:
          type: string
        iso3Country:
          type: string
        displayLanguage:
          type: string
        displayScript:
          type: string
        displayCountry:
          type: string
        displayVariant:
          type: string
        displayName:
          type: string
        language:
          type: string
      type: object
    LongBuilder:
      type: object
    LongRunningProcessStatus:
      example:
        lastError: lastError
        status: NOT_RUN
      properties:
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
        lastError:
          type: string
      type: object
    LongSchemaVersion:
      example:
        version: 0
      properties:
        version:
          format: int64
          type: integer
      type: object
    MemoryLimit:
      properties:
        absoluteValue:
          format: int64
          type: integer
        percentOfMaxDirectMemory:
          format: double
          type: number
      type: object
    MessageId:
      type: object
    MessageIdImpl:
      example:
        ledgerId: 0
        partitionIndex: 1
        entryId: 6
      properties:
        ledgerId:
          format: int64
          type: integer
        entryId:
          format: int64
          type: integer
        partitionIndex:
          format: int32
          type: integer
      type: object
    Metrics:
      example:
        metrics:
          key: '{}'
        dimensions:
          key: dimensions
      properties:
        metrics:
          additionalProperties:
            properties: {}
            type: object
          type: object
        dimensions:
          additionalProperties:
            type: string
          type: object
      type: object
    Module:
      properties:
        layer:
          type: object
        name:
          type: string
        descriptor:
          $ref: '#/components/schemas/ModuleDescriptor'
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        declaredAnnotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        named:
          type: boolean
        packages:
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ModuleDescriptor:
      properties:
        open:
          type: boolean
        automatic:
          type: boolean
      type: object
    ModuleLayer:
      type: object
    NamespaceBundleStats:
      example:
        msgRateIn: 2.027123023002322
        cacheSize: 7
        consumerCount: 1
        topics: 6
        producerCount: 1
        msgThroughputIn: 4.145608029883936
        msgThroughputOut: 1.2315135367772556
        msgRateOut: 7.386281948385884
      properties:
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        consumerCount:
          format: int32
          type: integer
        producerCount:
          format: int32
          type: integer
        topics:
          format: int64
          type: integer
        cacheSize:
          format: int64
          type: integer
      type: object
    NamespaceIsolationData:
      description: The data of namespace isolation configuration
      example:
        namespaces:
        - namespaces
        - namespaces
        primary:
        - primary
        - primary
        auto_failover_policy:
          policyType: min_available
          parameters:
            key: parameters
      properties:
        namespaces:
          description: The list of namespaces to apply this namespace isolation data
          items:
            type: string
          type: array
        primary:
          description: The list of secondary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
          type: array
        auto_failover_policy:
          $ref: '#/components/schemas/AutoFailoverPolicyData'
      type: object
    NamespaceOwnershipStatus:
      properties:
        broker_assignment:
          enum:
          - primary
          - secondary
          - shared
          type: string
        is_controlled:
          type: boolean
        is_active:
          type: boolean
      type: object
    NonPersistentPublisherStats:
      example:
        msgRateIn: 3.0937452626664474
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        msgDropRate: 5.944895607614016
        producerName: producerName
        averageMsgSize: 3.353193347011243
        producerId: 0
        accessMode: Shared
        clientVersion: clientVersion
        msgThroughputIn: 6.704019297950036
        chunkedMessageRate: 7.143538047012306
      properties:
        msgDropRate:
          format: double
          type: number
        producerName:
          type: string
        msgThroughputIn:
          format: double
          type: number
        accessMode:
          enum:
          - Shared
          - Exclusive
          - WaitForExclusive
          type: string
        averageMsgSize:
          format: double
          type: number
        connectedSince:
          type: string
        msgRateIn:
          format: double
          type: number
        chunkedMessageRate:
          format: double
          type: number
        clientVersion:
          type: string
        producerId:
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        address:
          type: string
      type: object
    NonPersistentReplicatorStats:
      example:
        msgRateIn: 8.969578798196912
        replicationDelayInSeconds: 4
        msgRateExpired: 3.0205796992916243
        outboundConnectedSince: outboundConnectedSince
        outboundConnection: outboundConnection
        msgDropRate: 7.058770351582356
        msgThroughputIn: 6.519180951018382
        msgThroughputOut: 0.10263654006109402
        connected: true
        inboundConnection: inboundConnection
        replicationBacklog: 3
        inboundConnectedSince: inboundConnectedSince
        msgRateOut: 7.740351818741173
      properties:
        msgDropRate:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        replicationDelayInSeconds:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgRateExpired:
          format: double
          type: number
        outboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        inboundConnection:
          type: string
        outboundConnectedSince:
          type: string
        replicationBacklog:
          format: int64
          type: integer
        connected:
          type: boolean
      type: object
    NonPersistentSubscriptionStats:
      example:
        lastConsumedFlowTimestamp: 1
        nonContiguousDeletedMessagesRangesSerializedSize: 7
        msgRateExpired: 6.438423552598547
        lastMarkDeleteAdvancedTimestamp: 6
        backlogSize: 1
        msgOutCounter: 5
        type: type
        durable: true
        bytesOutCounter: 5
        totalMsgExpired: 3
        nonContiguousDeletedMessagesRanges: 2
        consumersAfterMarkDeletePosition:
          key: consumersAfterMarkDeletePosition
        consumers:
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 1.2315135367772556
          avgMessagesPerEntry: 1
          msgOutCounter: 4
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgThroughputOut: 9.301444243932576
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 3
          bytesOutCounter: 2
          connectedSince: connectedSince
          lastAckedTimestamp: 7
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 1
          chunkedMessageRate: 1.0246457001441578
          msgRateOut: 7.386281948385884
          lastConsumedTimestamp: 6
          consumerName: consumerName
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 1.2315135367772556
          avgMessagesPerEntry: 1
          msgOutCounter: 4
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgThroughputOut: 9.301444243932576
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 3
          bytesOutCounter: 2
          connectedSince: connectedSince
          lastAckedTimestamp: 7
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 1
          chunkedMessageRate: 1.0246457001441578
          msgRateOut: 7.386281948385884
          lastConsumedTimestamp: 6
          consumerName: consumerName
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 8
        unackedMessages: 9
        chunkedMessageRate: 9
        msgBacklog: 9
        lastConsumedTimestamp: 2
        activeConsumerName: activeConsumerName
        lastExpireTimestamp: 6
        msgDropRate: 0.8008281904610115
        msgRateRedeliver: 5.025004791520295
        msgThroughputOut: 6.027456183070403
        lastAckedTimestamp: 6
        replicated: true
        msgBacklogNoDelayed: 6
        msgRateOut: 4.965218492984954
      properties:
        msgDropRate:
          format: double
          type: number
        durable:
          type: boolean
        replicated:
          type: boolean
        msgThroughputOut:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        nonContiguousDeletedMessagesRanges:
          format: int32
          type: integer
        nonContiguousDeletedMessagesRangesSerializedSize:
          format: int32
          type: integer
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        chunkedMessageRate:
          format: int32
          type: integer
        msgBacklog:
          format: int64
          type: integer
        msgBacklogNoDelayed:
          format: int64
          type: integer
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          format: int64
          type: integer
        unackedMessages:
          format: int64
          type: integer
        activeConsumerName:
          type: string
        msgRateExpired:
          format: double
          type: number
        totalMsgExpired:
          format: int64
          type: integer
        lastExpireTimestamp:
          format: int64
          type: integer
        lastConsumedFlowTimestamp:
          format: int64
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        lastAckedTimestamp:
          format: int64
          type: integer
        lastMarkDeleteAdvancedTimestamp:
          format: int64
          type: integer
        consumersAfterMarkDeletePosition:
          additionalProperties:
            type: string
          type: object
        type:
          type: string
      type: object
    NonPersistentTopicStats:
      example:
        replication:
          key:
            msgRateIn: 8.969578798196912
            replicationDelayInSeconds: 4
            msgRateExpired: 3.0205796992916243
            outboundConnectedSince: outboundConnectedSince
            outboundConnection: outboundConnection
            msgDropRate: 7.058770351582356
            msgThroughputIn: 6.519180951018382
            msgThroughputOut: 0.10263654006109402
            connected: true
            inboundConnection: inboundConnection
            replicationBacklog: 3
            inboundConnectedSince: inboundConnectedSince
            msgRateOut: 7.740351818741173
        msgRateIn: 4.459605034958679
        offloadedStorageSize: 4
        subscriptions:
          key:
            lastConsumedFlowTimestamp: 1
            nonContiguousDeletedMessagesRangesSerializedSize: 7
            msgRateExpired: 6.438423552598547
            lastMarkDeleteAdvancedTimestamp: 6
            backlogSize: 1
            msgOutCounter: 5
            type: type
            durable: true
            bytesOutCounter: 5
            totalMsgExpired: 3
            nonContiguousDeletedMessagesRanges: 2
            consumersAfterMarkDeletePosition:
              key: consumersAfterMarkDeletePosition
            consumers:
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 1.2315135367772556
              avgMessagesPerEntry: 1
              msgOutCounter: 4
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgThroughputOut: 9.301444243932576
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 3
              bytesOutCounter: 2
              connectedSince: connectedSince
              lastAckedTimestamp: 7
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 1
              chunkedMessageRate: 1.0246457001441578
              msgRateOut: 7.386281948385884
              lastConsumedTimestamp: 6
              consumerName: consumerName
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 1.2315135367772556
              avgMessagesPerEntry: 1
              msgOutCounter: 4
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgThroughputOut: 9.301444243932576
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 3
              bytesOutCounter: 2
              connectedSince: connectedSince
              lastAckedTimestamp: 7
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 1
              chunkedMessageRate: 1.0246457001441578
              msgRateOut: 7.386281948385884
              lastConsumedTimestamp: 6
              consumerName: consumerName
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 8
            unackedMessages: 9
            chunkedMessageRate: 9
            msgBacklog: 9
            lastConsumedTimestamp: 2
            activeConsumerName: activeConsumerName
            lastExpireTimestamp: 6
            msgDropRate: 0.8008281904610115
            msgRateRedeliver: 5.025004791520295
            msgThroughputOut: 6.027456183070403
            lastAckedTimestamp: 6
            replicated: true
            msgBacklogNoDelayed: 6
            msgRateOut: 4.965218492984954
        nonContiguousDeletedMessagesRangesSerializedSize: 9
        msgChunkPublished: true
        msgDropRate: 7.04836565559697
        backlogSize: 4
        msgOutCounter: 1
        topicEpoch: 9
        msgThroughputIn: 5.533258397034986
        msgThroughputOut: 3.2588565619047607
        bytesInCounter: 0
        bytesOutCounter: 4
        waitingPublishers: 7
        msgInCounter: 6
        storageSize: 8
        nonContiguousDeletedMessagesRanges: 0
        publishers:
        - msgRateIn: 3.0937452626664474
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgDropRate: 5.944895607614016
          producerName: producerName
          averageMsgSize: 3.353193347011243
          producerId: 0
          accessMode: Shared
          clientVersion: clientVersion
          msgThroughputIn: 6.704019297950036
          chunkedMessageRate: 7.143538047012306
        - msgRateIn: 3.0937452626664474
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          msgDropRate: 5.944895607614016
          producerName: producerName
          averageMsgSize: 3.353193347011243
          producerId: 0
          accessMode: Shared
          clientVersion: clientVersion
          msgThroughputIn: 6.704019297950036
          chunkedMessageRate: 7.143538047012306
        compaction:
          lastCompactionDurationTimeInMills: 4
          lastCompactionRemovedEventCount: 0
          lastCompactionSucceedTimestamp: 7
          lastCompactionFailedTimestamp: 5
        averageMsgSize: 6.073898085781152
        deduplicationStatus: deduplicationStatus
        msgRateOut: 3.901545264248647
      properties:
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentSubscriptionStats'
          type: object
        publishers:
          items:
            $ref: '#/components/schemas/NonPersistentPublisherStats'
          type: array
        replication:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentReplicatorStats'
          type: object
        msgDropRate:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        bytesInCounter:
          format: int64
          type: integer
        msgInCounter:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        offloadedStorageSize:
          format: int64
          type: integer
        waitingPublishers:
          format: int32
          type: integer
        deduplicationStatus:
          type: string
        topicEpoch:
          format: int64
          type: integer
        nonContiguousDeletedMessagesRanges:
          format: int32
          type: integer
        nonContiguousDeletedMessagesRangesSerializedSize:
          format: int32
          type: integer
        compaction:
          $ref: '#/components/schemas/CompactionStats'
        averageMsgSize:
          format: double
          type: number
        msgChunkPublished:
          type: boolean
        storageSize:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
      type: object
    Number:
      type: object
    NumberFormat:
      properties:
        groupingUsed:
          type: boolean
        parseIntegerOnly:
          type: boolean
        maximumIntegerDigits:
          format: int32
          type: integer
        minimumIntegerDigits:
          format: int32
          type: integer
        maximumFractionDigits:
          format: int32
          type: integer
        minimumFractionDigits:
          format: int32
          type: integer
        currency:
          $ref: '#/components/schemas/Currency'
        roundingMode:
          enum:
          - UP
          - DOWN
          - CEILING
          - FLOOR
          - HALF_UP
          - HALF_DOWN
          - HALF_EVEN
          - UNNECESSARY
          type: string
      type: object
    ObjectCodec:
      properties:
        jsonFactory:
          $ref: '#/components/schemas/JsonFactory'
        factory:
          $ref: '#/components/schemas/JsonFactory'
      type: object
    ObjectMapper:
      properties:
        jsonFactory:
          $ref: '#/components/schemas/JsonFactory'
        serializationConfig:
          $ref: '#/components/schemas/SerializationConfig'
        deserializationConfig:
          $ref: '#/components/schemas/DeserializationConfig'
        deserializationContext:
          $ref: '#/components/schemas/DeserializationContext'
        serializerFactory:
          type: object
        serializerProvider:
          $ref: '#/components/schemas/SerializerProvider'
        serializerProviderInstance:
          $ref: '#/components/schemas/SerializerProvider'
        visibilityChecker:
          type: object
        subtypeResolver:
          type: object
        propertyNamingStrategy:
          type: object
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        nodeFactory:
          type: object
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        injectableValues:
          type: object
        factory:
          $ref: '#/components/schemas/JsonFactory'
      type: object
    OffloadPolicies:
      example:
        managedLedgerOffloadThresholdInBytes: 6
        fileSystemProfilePath: fileSystemProfilePath
        gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
        s3ManagedLedgerOffloadCredentialId: s3ManagedLedgerOffloadCredentialId
        managedLedgerOffloadPrefetchRounds: 5
        s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
        gcsManagedLedgerOffloadReadBufferSizeInBytes: 7
        managedLedgerOffloadMaxBlockSizeInBytes: 0
        s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
        gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
        managedLedgerOffloadedReadPriority: BOOKKEEPER_FIRST
        managedLedgerOffloadServiceEndpoint: managedLedgerOffloadServiceEndpoint
        managedLedgerOffloadReadBufferSizeInBytes: 7
        fileSystemURI: fileSystemURI
        s3ManagedLedgerOffloadCredentialSecret: s3ManagedLedgerOffloadCredentialSecret
        gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadMaxBlockSizeInBytes: 6
        s3ManagedLedgerOffloadReadBufferSizeInBytes: 3
        managedLedgerOffloadMaxThreads: 4
        offloadersDirectory: offloadersDirectory
        gcsManagedLedgerOffloadMaxBlockSizeInBytes: 3
        s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
        managedLedgerOffloadDeletionLagInMillis: 0
        managedLedgerOffloadRegion: managedLedgerOffloadRegion
        managedLedgerOffloadDriver: managedLedgerOffloadDriver
        managedLedgerOffloadBucket: managedLedgerOffloadBucket
        s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
      properties:
        managedLedgerOffloadPrefetchRounds:
          format: int32
          type: integer
        s3ManagedLedgerOffloadRegion:
          type: string
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadCredentialId:
          type: string
        s3ManagedLedgerOffloadCredentialSecret:
          type: string
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        managedLedgerOffloadBucket:
          type: string
        managedLedgerOffloadedReadPriority:
          enum:
          - BOOKKEEPER_FIRST
          - TIERED_STORAGE_FIRST
          type: string
        managedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadServiceEndpoint:
          type: string
        managedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        managedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        managedLedgerOffloadThresholdInBytes:
          format: int64
          type: integer
        managedLedgerOffloadDeletionLagInMillis:
          format: int64
          type: integer
        managedLedgerOffloadDriver:
          type: string
        offloadersDirectory:
          type: string
        managedLedgerOffloadMaxThreads:
          format: int32
          type: integer
      type: object
    OffloadPoliciesImpl:
      example:
        managedLedgerOffloadThresholdInBytes: 1
        fileSystemProfilePath: fileSystemProfilePath
        gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
        s3ManagedLedgerOffloadCredentialId: s3ManagedLedgerOffloadCredentialId
        managedLedgerOffloadPrefetchRounds: 6
        gcsDriver: true
        s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
        gcsManagedLedgerOffloadReadBufferSizeInBytes: 9
        managedLedgerOffloadMaxBlockSizeInBytes: 3
        s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
        gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
        managedLedgerOffloadedReadPriority: BOOKKEEPER_FIRST
        managedLedgerOffloadServiceEndpoint: managedLedgerOffloadServiceEndpoint
        managedLedgerOffloadReadBufferSizeInBytes: 2
        fileSystemDriver: true
        fileSystemURI: fileSystemURI
        s3ManagedLedgerOffloadCredentialSecret: s3ManagedLedgerOffloadCredentialSecret
        gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadMaxBlockSizeInBytes: 5
        s3ManagedLedgerOffloadReadBufferSizeInBytes: 2
        managedLedgerOffloadMaxThreads: 0
        offloadersDirectory: offloadersDirectory
        s3Driver: true
        gcsManagedLedgerOffloadMaxBlockSizeInBytes: 7
        managedLedgerOffloadDeletionLagInMillis: 5
        s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
        managedLedgerOffloadRegion: managedLedgerOffloadRegion
        managedLedgerOffloadDriver: managedLedgerOffloadDriver
        managedLedgerOffloadBucket: managedLedgerOffloadBucket
        s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
      properties:
        offloadersDirectory:
          type: string
        managedLedgerOffloadDriver:
          type: string
        managedLedgerOffloadMaxThreads:
          format: int32
          type: integer
        managedLedgerOffloadPrefetchRounds:
          format: int32
          type: integer
        managedLedgerOffloadThresholdInBytes:
          format: int64
          type: integer
        managedLedgerOffloadDeletionLagInMillis:
          format: int64
          type: integer
        managedLedgerOffloadedReadPriority:
          enum:
          - BOOKKEEPER_FIRST
          - TIERED_STORAGE_FIRST
          type: string
        s3ManagedLedgerOffloadRegion:
          type: string
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadCredentialId:
          type: string
        s3ManagedLedgerOffloadCredentialSecret:
          type: string
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        managedLedgerOffloadBucket:
          type: string
        managedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadServiceEndpoint:
          type: string
        managedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        managedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        s3Driver:
          type: boolean
        gcsDriver:
          type: boolean
        fileSystemDriver:
          type: boolean
      type: object
    OffloadProcessStatus:
      example:
        lastError: lastError
        firstUnoffloadedMessage: '{}'
        status: NOT_RUN
      properties:
        firstUnoffloadedMessage:
          type: object
        lastError:
          type: string
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
      type: object
    OutputDecorator:
      type: object
    OutputStream:
      type: object
    Package:
      properties:
        name:
          type: string
        specificationTitle:
          type: string
        specificationVersion:
          type: string
        specificationVendor:
          type: string
        implementationTitle:
          type: string
        implementationVersion:
          type: string
        implementationVendor:
          type: string
        annotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        declaredAnnotations:
          items:
            $ref: '#/components/schemas/Annotation'
          type: array
        sealed:
          type: boolean
      type: object
    PartitionedTopicMetadata:
      example:
        partitions: 0
      properties:
        partitions:
          format: int32
          type: integer
      type: object
    PendingBookieOpsStats:
      properties:
        dataLedgerOpenOp:
          format: int64
          type: integer
        dataLedgerCloseOp:
          format: int64
          type: integer
        dataLedgerCreateOp:
          format: int64
          type: integer
        dataLedgerDeleteOp:
          format: int64
          type: integer
        cursorLedgerOpenOp:
          format: int64
          type: integer
        cursorLedgerCloseOp:
          format: int64
          type: integer
        cursorLedgerCreateOp:
          format: int64
          type: integer
        cursorLedgerDeleteOp:
          format: int64
          type: integer
      type: object
    PersistencePolicies:
      example:
        bookkeeperWriteQuorum: 2
        bookkeeperAckQuorum: 4
        bookkeeperEnsemble: 3
        managedLedgerMaxMarkDeleteRate: 7.386281948385884
      properties:
        bookkeeperEnsemble:
          format: int32
          type: integer
        bookkeeperWriteQuorum:
          format: int32
          type: integer
        bookkeeperAckQuorum:
          format: int32
          type: integer
        managedLedgerMaxMarkDeleteRate:
          format: double
          type: number
      type: object
    PersistentOfflineTopicStats:
      example:
        dataLedgerDetails:
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        - ledgerId: 7
          entries: 5
          size: 2
          timestamp: 5
        messageBacklog: 1
        statGeneratedAt: 2000-01-23T04:56:07.000+00:00
        storageSize: 0
        totalMessages: 6
        topicName: topicName
        cursorDetails:
          key:
            cursorLedgerId: 3
            cursorBacklog: 9
        brokerName: brokerName
      properties:
        storageSize:
          format: int64
          type: integer
        totalMessages:
          format: int64
          type: integer
        messageBacklog:
          format: int64
          type: integer
        brokerName:
          type: string
        topicName:
          type: string
        dataLedgerDetails:
          items:
            $ref: '#/components/schemas/LedgerDetails'
          type: array
        cursorDetails:
          additionalProperties:
            $ref: '#/components/schemas/CursorDetails'
          type: object
        statGeneratedAt:
          format: date-time
          type: string
      type: object
    PersistentTopicInternalStats:
      example:
        numberOfEntries: 6
        compactedLedger:
          ledgerId: 9
          offloaded: true
          entries: 3
          metadata: metadata
          size: 2
          underReplicated: true
        schemaLedgers:
        - ledgerId: 9
          offloaded: true
          entries: 3
          metadata: metadata
          size: 2
          underReplicated: true
        - ledgerId: 9
          offloaded: true
          entries: 3
          metadata: metadata
          size: 2
          underReplicated: true
        currentLedgerSize: 5
        ledgers:
        - ledgerId: 9
          offloaded: true
          entries: 3
          metadata: metadata
          size: 2
          underReplicated: true
        - ledgerId: 9
          offloaded: true
          entries: 3
          metadata: metadata
          size: 2
          underReplicated: true
        lastLedgerCreationFailureTimestamp: lastLedgerCreationFailureTimestamp
        currentLedgerEntries: 5
        cursors:
          key:
            numberOfEntriesSinceFirstNotAckedMessage: 1
            markDeletePosition: markDeletePosition
            cursorLedgerLastEntry: 1
            pendingReadOps: 4
            totalNonContiguousDeletedMessagesRange: 6
            lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
            subscriptionHavePendingReplayRead: true
            readPosition: readPosition
            individuallyDeletedMessages: individuallyDeletedMessages
            waitingReadOp: true
            messagesConsumedCounter: 7
            subscriptionHavePendingRead: true
            state: state
            cursorLedger: 1
            properties:
              key: 7
        totalSize: 1
        lastLedgerCreatedTimestamp: lastLedgerCreatedTimestamp
        lastConfirmedEntry: lastConfirmedEntry
        entriesAddedCounter: 0
        state: state
        waitingCursorsCount: 2
        pendingAddEntriesCount: 7
      properties:
        entriesAddedCounter:
          format: int64
          type: integer
        numberOfEntries:
          format: int64
          type: integer
        totalSize:
          format: int64
          type: integer
        currentLedgerEntries:
          format: int64
          type: integer
        currentLedgerSize:
          format: int64
          type: integer
        lastLedgerCreatedTimestamp:
          type: string
        lastLedgerCreationFailureTimestamp:
          type: string
        waitingCursorsCount:
          format: int32
          type: integer
        pendingAddEntriesCount:
          format: int32
          type: integer
        lastConfirmedEntry:
          type: string
        state:
          type: string
        ledgers:
          items:
            $ref: '#/components/schemas/LedgerInfo'
          type: array
        cursors:
          additionalProperties:
            $ref: '#/components/schemas/CursorStats'
          type: object
        schemaLedgers:
          items:
            $ref: '#/components/schemas/LedgerInfo'
          type: array
        compactedLedger:
          $ref: '#/components/schemas/LedgerInfo'
      type: object
    Policies:
      example:
        backlog_quota_map:
          key:
            limitTime: 1
            limitSize: 6
            policy: producer_request_hold
        message_ttl_in_seconds: 7
        clusterSubscribeRate:
          key:
            ratePeriodInSecond: 9
            subscribeThrottlingRatePerConsumer: 7
        max_consumers_per_topic: 8
        autoTopicCreationOverride:
          defaultNumPartitions: 1
          allowAutoTopicCreation: true
          topicType: topicType
        replicatorDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        publishMaxMessageRate:
          key:
            publishThrottlingRateInMsg: 1
            publishThrottlingRateInByte: 1
        resource_group_name: resource_group_name
        subscription_expiration_time_minutes: 1
        auth_policies:
          topicAuthentication:
            key:
              key:
              - produce
              - produce
          subscriptionAuthentication:
            key:
            - subscriptionAuthentication
            - subscriptionAuthentication
          namespaceAuthentication:
            key:
            - produce
            - produce
        subscription_auth_mode: None
        max_consumers_per_subscription: 9
        max_topics_per_namespace: 6
        is_allow_auto_update_schema: true
        max_producers_per_topic: 6
        schema_auto_update_compatibility_strategy: AutoUpdateDisabled
        latency_stats_sample_rate:
          key: 6
        schema_validation_enforced: true
        inactive_topic_policies:
          inactiveTopicDeleteMode: delete_when_no_subscriptions
          maxInactiveDurationSeconds: 9
          deleteWhileInactive: true
        offload_policies:
          managedLedgerOffloadThresholdInBytes: 6
          fileSystemProfilePath: fileSystemProfilePath
          gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
          s3ManagedLedgerOffloadCredentialId: s3ManagedLedgerOffloadCredentialId
          managedLedgerOffloadPrefetchRounds: 5
          s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
          gcsManagedLedgerOffloadReadBufferSizeInBytes: 7
          managedLedgerOffloadMaxBlockSizeInBytes: 0
          s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
          s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
          gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
          managedLedgerOffloadedReadPriority: BOOKKEEPER_FIRST
          managedLedgerOffloadServiceEndpoint: managedLedgerOffloadServiceEndpoint
          managedLedgerOffloadReadBufferSizeInBytes: 7
          fileSystemURI: fileSystemURI
          s3ManagedLedgerOffloadCredentialSecret: s3ManagedLedgerOffloadCredentialSecret
          gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
          s3ManagedLedgerOffloadMaxBlockSizeInBytes: 6
          s3ManagedLedgerOffloadReadBufferSizeInBytes: 3
          managedLedgerOffloadMaxThreads: 4
          offloadersDirectory: offloadersDirectory
          gcsManagedLedgerOffloadMaxBlockSizeInBytes: 3
          s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
          managedLedgerOffloadDeletionLagInMillis: 0
          managedLedgerOffloadRegion: managedLedgerOffloadRegion
          managedLedgerOffloadDriver: managedLedgerOffloadDriver
          managedLedgerOffloadBucket: managedLedgerOffloadBucket
          s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
        max_unacked_messages_per_consumer: 6
        offload_threshold: 2
        compaction_threshold: 1
        autoSubscriptionCreationOverride:
          allowAutoSubscriptionCreation: true
        subscriptionDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        deduplicationSnapshotIntervalSeconds: 8
        clusterDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        schema_compatibility_strategy: UNDEFINED
        deduplicationEnabled: true
        encryption_required: true
        max_unacked_messages_per_subscription: 3
        replication_clusters:
        - replication_clusters
        - replication_clusters
        retention_policies:
          retentionSizeInMB: 5
          retentionTimeInMinutes: 4
        offload_deletion_lag_ms: 6
        topicDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        deleted: true
        max_subscriptions_per_topic: 6
        subscription_types_enabled:
        - subscription_types_enabled
        - subscription_types_enabled
        bundles:
          boundaries:
          - boundaries
          - boundaries
          numBundles: 0
        persistence:
          bookkeeperWriteQuorum: 2
          bookkeeperAckQuorum: 4
          bookkeeperEnsemble: 3
          managedLedgerMaxMarkDeleteRate: 7.386281948385884
        properties:
          key: properties
        delayed_delivery_policies:
          tickTime: 9
          active: true
      properties:
        auth_policies:
          $ref: '#/components/schemas/AuthPolicies'
        replication_clusters:
          items:
            type: string
          type: array
          uniqueItems: true
        bundles:
          $ref: '#/components/schemas/BundlesData'
        backlog_quota_map:
          additionalProperties:
            $ref: '#/components/schemas/BacklogQuota'
          type: object
        clusterDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
          type: object
        topicDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
          type: object
        subscriptionDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
          type: object
        replicatorDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRateImpl'
          type: object
        clusterSubscribeRate:
          additionalProperties:
            $ref: '#/components/schemas/SubscribeRate'
          type: object
        persistence:
          $ref: '#/components/schemas/PersistencePolicies'
        deduplicationEnabled:
          type: boolean
        autoTopicCreationOverride:
          $ref: '#/components/schemas/AutoTopicCreationOverride'
        autoSubscriptionCreationOverride:
          $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        publishMaxMessageRate:
          additionalProperties:
            $ref: '#/components/schemas/PublishRate'
          type: object
        latency_stats_sample_rate:
          additionalProperties:
            format: int32
            type: integer
          type: object
        message_ttl_in_seconds:
          format: int32
          type: integer
        subscription_expiration_time_minutes:
          format: int32
          type: integer
        retention_policies:
          $ref: '#/components/schemas/RetentionPolicies'
        deleted:
          type: boolean
        encryption_required:
          type: boolean
        delayed_delivery_policies:
          $ref: '#/components/schemas/DelayedDeliveryPolicies'
        inactive_topic_policies:
          $ref: '#/components/schemas/InactiveTopicPolicies'
        subscription_auth_mode:
          enum:
          - None
          - Prefix
          type: string
        max_producers_per_topic:
          format: int32
          type: integer
        max_consumers_per_topic:
          format: int32
          type: integer
        max_consumers_per_subscription:
          format: int32
          type: integer
        max_unacked_messages_per_consumer:
          format: int32
          type: integer
        max_unacked_messages_per_subscription:
          format: int32
          type: integer
        max_subscriptions_per_topic:
          format: int32
          type: integer
        compaction_threshold:
          format: int64
          type: integer
        offload_threshold:
          format: int64
          type: integer
        offload_deletion_lag_ms:
          format: int64
          type: integer
        max_topics_per_namespace:
          format: int32
          type: integer
        schema_auto_update_compatibility_strategy:
          enum:
          - AutoUpdateDisabled
          - Backward
          - Forward
          - Full
          - AlwaysCompatible
          - BackwardTransitive
          - ForwardTransitive
          - FullTransitive
          type: string
        schema_compatibility_strategy:
          enum:
          - UNDEFINED
          - ALWAYS_INCOMPATIBLE
          - ALWAYS_COMPATIBLE
          - BACKWARD
          - FORWARD
          - FULL
          - BACKWARD_TRANSITIVE
          - FORWARD_TRANSITIVE
          - FULL_TRANSITIVE
          type: string
        is_allow_auto_update_schema:
          type: boolean
        schema_validation_enforced:
          type: boolean
        offload_policies:
          $ref: '#/components/schemas/OffloadPolicies'
        deduplicationSnapshotIntervalSeconds:
          format: int32
          type: integer
        subscription_types_enabled:
          items:
            type: string
          type: array
          uniqueItems: true
        properties:
          additionalProperties:
            type: string
          type: object
        resource_group_name:
          type: string
      type: object
    PoolArenaStats:
      example:
        numActiveNormalAllocations: 6
        numDeallocations: 8
        tinySubpages:
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        smallSubpages:
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        - numAvailable: 4
          elementSize: 7
          pageSize: 1
          maxNumElements: 2
        numActiveTinyAllocations: 2
        numActiveAllocations: 1
        chunkLists:
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        - chunks:
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          - chunkSize: 7
            usage: 6
            freeBytes: 1
          minUsage: 1
          maxUsage: 1
        numHugeDeallocations: 6
        numActiveSmallAllocations: 6
        numAllocations: 4
        numTinySubpages: 7
        numSmallAllocations: 9
        numTinyDeallocations: 9
        numTinyAllocations: 5
        numNormalDeallocations: 3
        numActiveHugeAllocations: 5
        numNormalAllocations: 9
        numSmallSubpages: 9
        numHugeAllocations: 6
        numChunkLists: 3
        numSmallDeallocations: 6
      properties:
        numTinySubpages:
          format: int32
          type: integer
        numSmallSubpages:
          format: int32
          type: integer
        numChunkLists:
          format: int32
          type: integer
        tinySubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
        smallSubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
        chunkLists:
          items:
            $ref: '#/components/schemas/PoolChunkListStats'
          type: array
        numAllocations:
          format: int64
          type: integer
        numTinyAllocations:
          format: int64
          type: integer
        numSmallAllocations:
          format: int64
          type: integer
        numNormalAllocations:
          format: int64
          type: integer
        numHugeAllocations:
          format: int64
          type: integer
        numDeallocations:
          format: int64
          type: integer
        numTinyDeallocations:
          format: int64
          type: integer
        numSmallDeallocations:
          format: int64
          type: integer
        numNormalDeallocations:
          format: int64
          type: integer
        numHugeDeallocations:
          format: int64
          type: integer
        numActiveAllocations:
          format: int64
          type: integer
        numActiveTinyAllocations:
          format: int64
          type: integer
        numActiveSmallAllocations:
          format: int64
          type: integer
        numActiveNormalAllocations:
          format: int64
          type: integer
        numActiveHugeAllocations:
          format: int64
          type: integer
      type: object
    PoolChunkListStats:
      example:
        chunks:
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        - chunkSize: 7
          usage: 6
          freeBytes: 1
        minUsage: 1
        maxUsage: 1
      properties:
        minUsage:
          format: int32
          type: integer
        maxUsage:
          format: int32
          type: integer
        chunks:
          items:
            $ref: '#/components/schemas/PoolChunkStats'
          type: array
      type: object
    PoolChunkStats:
      example:
        chunkSize: 7
        usage: 6
        freeBytes: 1
      properties:
        usage:
          format: int32
          type: integer
        chunkSize:
          format: int32
          type: integer
        freeBytes:
          format: int32
          type: integer
      type: object
    PoolSubpageStats:
      example:
        numAvailable: 4
        elementSize: 7
        pageSize: 1
        maxNumElements: 2
      properties:
        maxNumElements:
          format: int32
          type: integer
        numAvailable:
          format: int32
          type: integer
        elementSize:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
      type: object
    PostSchemaPayload:
      example:
        schema: schema
        type: type
        properties:
          key: properties
      properties:
        type:
          type: string
        schema:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
      type: object
    PostSchemaResponse:
      example:
        version: '{}'
      properties:
        version:
          type: object
      type: object
    PrettyPrinter:
      type: object
    Principal:
      properties:
        name:
          type: string
      type: object
    ProcessContainerFactory:
      properties:
        javaInstanceJarLocation:
          type: string
        pythonInstanceLocation:
          type: string
        logDirectory:
          type: string
        extraFunctionDependenciesDir:
          type: string
      type: object
    PropertyName:
      properties:
        namespace:
          type: string
        empty:
          type: boolean
        simpleName:
          type: string
      type: object
    PropertyNamingStrategy:
      type: object
    PublicKey:
      properties:
        format:
          type: string
        algorithm:
          type: string
        encoded:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
      type: object
    PublishRate:
      example:
        publishThrottlingRateInMsg: 1
        publishThrottlingRateInByte: 1
      properties:
        publishThrottlingRateInMsg:
          format: int32
          type: integer
        publishThrottlingRateInByte:
          format: int64
          type: integer
      type: object
    PublisherStats:
      example:
        msgRateIn: 6.778324963048013
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        producerName: producerName
        averageMsgSize: 2.8841621266687802
        producerId: 5
        accessMode: Shared
        clientVersion: clientVersion
        msgThroughputIn: 1.284659006116532
        chunkedMessageRate: 6.878052220127876
      properties:
        producerName:
          type: string
        msgThroughputIn:
          format: double
          type: number
        accessMode:
          enum:
          - Shared
          - Exclusive
          - WaitForExclusive
          type: string
        averageMsgSize:
          format: double
          type: number
        connectedSince:
          type: string
        msgRateIn:
          format: double
          type: number
        chunkedMessageRate:
          format: double
          type: number
        clientVersion:
          type: string
        producerId:
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        address:
          type: string
      type: object
    RawBookieInfo:
      example:
        bookieId: bookieId
      properties:
        bookieId:
          type: string
      type: object
    ReplicatorStats:
      example:
        msgRateIn: 0.8851374739011653
        connected: true
        replicationDelayInSeconds: 7
        inboundConnection: inboundConnection
        msgRateExpired: 6.519180951018382
        outboundConnectedSince: outboundConnectedSince
        replicationBacklog: 0
        outboundConnection: outboundConnection
        inboundConnectedSince: inboundConnectedSince
        msgThroughputIn: 3.353193347011243
        msgThroughputOut: 3.0937452626664474
        msgRateOut: 7.058770351582356
      properties:
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        replicationDelayInSeconds:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgRateExpired:
          format: double
          type: number
        outboundConnection:
          type: string
        inboundConnectedSince:
          type: string
        inboundConnection:
          type: string
        outboundConnectedSince:
          type: string
        replicationBacklog:
          format: int64
          type: integer
        connected:
          type: boolean
      type: object
    ResetCursorData:
      example:
        ledgerId: 0
        partitionIndex: 1
        excluded: true
        batchIndex: 5
        entryId: 6
      properties:
        ledgerId:
          format: int64
          type: integer
        entryId:
          format: int64
          type: integer
        partitionIndex:
          format: int32
          type: integer
        batchIndex:
          format: int32
          type: integer
        excluded:
          type: boolean
      type: object
    ResourceDescription:
      properties:
        usagePct:
          format: int32
          type: integer
        resourceUsage:
          additionalProperties:
            $ref: '#/components/schemas/ResourceUsage'
          type: object
      type: object
    ResourceGroup:
      example:
        publishRateInMsgs: 0
        publishRateInBytes: 6
        dispatchRateInMsgs: 1
        dispatchRateInBytes: 5
      properties:
        publishRateInMsgs:
          format: int32
          type: integer
        publishRateInBytes:
          format: int64
          type: integer
        dispatchRateInMsgs:
          format: int32
          type: integer
        dispatchRateInBytes:
          format: int64
          type: integer
      type: object
    ResourceQuota:
      example:
        msgRateIn: 0.8008281904610115
        valid: true
        bandwidthIn: 1.4658129805029452
        memory: 5.637376656633329
        bandwidthOut: 5.962133916683182
        dynamic: true
        msgRateOut: 6.027456183070403
      properties:
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        bandwidthIn:
          format: double
          type: number
        bandwidthOut:
          format: double
          type: number
        memory:
          format: double
          type: number
        dynamic:
          type: boolean
        valid:
          type: boolean
      type: object
    ResourceUnit:
      properties:
        availableResource:
          $ref: '#/components/schemas/ResourceDescription'
        resourceId:
          type: string
      type: object
    ResourceUsage:
      example:
        usage: 9.301444243932576
        limit: 3.616076749251911
      properties:
        usage:
          format: double
          type: number
        limit:
          format: double
          type: number
      type: object
    Resources:
      properties:
        cpu:
          format: double
          type: number
        ram:
          format: int64
          type: integer
        disk:
          format: int64
          type: integer
      type: object
    RetentionPolicies:
      example:
        retentionSizeInMB: 5
        retentionTimeInMinutes: 4
      properties:
        retentionTimeInMinutes:
          format: int32
          type: integer
        retentionSizeInMB:
          format: int64
          type: integer
      type: object
    SchemaVersion:
      type: object
    SerializationConfig:
      properties:
        defaultPropertyInclusion:
          $ref: '#/components/schemas/Value'
        filterProvider:
          type: object
        defaultPrettyPrinter:
          type: object
        annotationIntrospector:
          type: object
        serializationInclusion:
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
          type: string
        serializationFeatures:
          format: int32
          type: integer
        fullRootName:
          $ref: '#/components/schemas/PropertyName'
        subtypeResolver:
          type: object
        defaultVisibilityChecker:
          type: object
        attributes:
          type: object
        rootName:
          type: string
        propertyNamingStrategy:
          type: object
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        dateFormat:
          $ref: '#/components/schemas/DateFormat'
        base64Variant:
          $ref: '#/components/schemas/Base64Variant'
        handlerInstantiator:
          type: object
        annotationProcessingEnabled:
          type: boolean
        classIntrospector:
          type: object
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        locale:
          $ref: '#/components/schemas/Locale'
      type: object
    SerializerFactory:
      type: object
    SerializerProvider:
      properties:
        filterProvider:
          type: object
        defaultNullKeySerializer:
          $ref: '#/components/schemas/JsonSerializerObject'
        defaultNullValueSerializer:
          $ref: '#/components/schemas/JsonSerializerObject'
        typeFactory:
          $ref: '#/components/schemas/TypeFactory'
        annotationIntrospector:
          type: object
        timeZone:
          $ref: '#/components/schemas/TimeZone'
        locale:
          $ref: '#/components/schemas/Locale'
        config:
          $ref: '#/components/schemas/SerializationConfig'
        generator:
          $ref: '#/components/schemas/JsonGenerator'
      type: object
    ShortBuilder:
      type: object
    Sinks:
      properties:
        sinkList:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    SinksWorkerService:
      properties:
        sinkList:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    SocketAddress:
      type: object
    Sources:
      properties:
        sourceList:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    SourcesWorkerService:
      properties:
        sourceList:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
        listOfConnectors:
          items:
            $ref: '#/components/schemas/ConnectorDefinition'
          type: array
      type: object
    SubscribeRate:
      example:
        ratePeriodInSecond: 9
        subscribeThrottlingRatePerConsumer: 7
      properties:
        subscribeThrottlingRatePerConsumer:
          format: int32
          type: integer
        ratePeriodInSecond:
          format: int32
          type: integer
      type: object
    SubscriptionStats:
      example:
        lastConsumedFlowTimestamp: 5
        nonContiguousDeletedMessagesRangesSerializedSize: 3
        msgRateExpired: 7.457744773683766
        lastMarkDeleteAdvancedTimestamp: 6
        backlogSize: 5
        msgOutCounter: 7
        type: type
        durable: true
        bytesOutCounter: 2
        totalMsgExpired: 1
        nonContiguousDeletedMessagesRanges: 9
        consumersAfterMarkDeletePosition:
          key: consumersAfterMarkDeletePosition
        consumers:
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 1.2315135367772556
          avgMessagesPerEntry: 1
          msgOutCounter: 4
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgThroughputOut: 9.301444243932576
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 3
          bytesOutCounter: 2
          connectedSince: connectedSince
          lastAckedTimestamp: 7
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 1
          chunkedMessageRate: 1.0246457001441578
          msgRateOut: 7.386281948385884
          lastConsumedTimestamp: 6
          consumerName: consumerName
        - metadata:
            key: metadata
          address: address
          msgRateRedeliver: 1.2315135367772556
          avgMessagesPerEntry: 1
          msgOutCounter: 4
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgThroughputOut: 9.301444243932576
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 3
          bytesOutCounter: 2
          connectedSince: connectedSince
          lastAckedTimestamp: 7
          blockedConsumerOnUnackedMsgs: true
          unackedMessages: 1
          chunkedMessageRate: 1.0246457001441578
          msgRateOut: 7.386281948385884
          lastConsumedTimestamp: 6
          consumerName: consumerName
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 1
        unackedMessages: 6
        chunkedMessageRate: 7
        msgBacklog: 1
        lastConsumedTimestamp: 9
        activeConsumerName: activeConsumerName
        lastExpireTimestamp: 4
        msgRateRedeliver: 4.145608029883936
        msgThroughputOut: 5.962133916683182
        lastAckedTimestamp: 9
        replicated: true
        msgBacklogNoDelayed: 1
        msgRateOut: 2.027123023002322
      properties:
        durable:
          type: boolean
        replicated:
          type: boolean
        msgThroughputOut:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        nonContiguousDeletedMessagesRanges:
          format: int32
          type: integer
        nonContiguousDeletedMessagesRangesSerializedSize:
          format: int32
          type: integer
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        chunkedMessageRate:
          format: int32
          type: integer
        msgBacklog:
          format: int64
          type: integer
        msgBacklogNoDelayed:
          format: int64
          type: integer
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        msgDelayed:
          format: int64
          type: integer
        unackedMessages:
          format: int64
          type: integer
        activeConsumerName:
          type: string
        msgRateExpired:
          format: double
          type: number
        totalMsgExpired:
          format: int64
          type: integer
        lastExpireTimestamp:
          format: int64
          type: integer
        lastConsumedFlowTimestamp:
          format: int64
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        lastAckedTimestamp:
          format: int64
          type: integer
        lastMarkDeleteAdvancedTimestamp:
          format: int64
          type: integer
        consumersAfterMarkDeletePosition:
          additionalProperties:
            type: string
          type: object
        type:
          type: string
      type: object
    SubtypeResolver:
      type: object
    SystemResourceUsage:
      example:
        bandwidthIn:
          usage: 9.301444243932576
          limit: 3.616076749251911
        memory:
          usage: 9.301444243932576
          limit: 3.616076749251911
        bandwidthOut:
          usage: 9.301444243932576
          limit: 3.616076749251911
        cpu:
          usage: 9.301444243932576
          limit: 3.616076749251911
        directMemory:
          usage: 9.301444243932576
          limit: 3.616076749251911
      properties:
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    TenantInfo:
      description: Information of adminRoles and allowedClusters for tenant
      example:
        adminRoles:
        - adminRoles
        - adminRoles
        allowedClusters:
        - allowedClusters
        - allowedClusters
      properties:
        adminRoles:
          description: Comma separated list of auth principal allowed to administrate
            the tenant.
          items:
            type: string
          type: array
          uniqueItems: true
        allowedClusters:
          description: Comma separated allowed clusters.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    ThreadContainerFactory:
      properties:
        threadGroupName:
          type: string
        pulsarClientMemoryLimit:
          $ref: '#/components/schemas/MemoryLimit'
      type: object
    TimeZone:
      properties:
        displayName:
          type: string
        id:
          type: string
        dstsavings:
          format: int32
          type: integer
        rawOffset:
          format: int32
          type: integer
      type: object
    TopicStats:
      example:
        replication:
          key:
            msgRateIn: 0.8851374739011653
            connected: true
            replicationDelayInSeconds: 7
            inboundConnection: inboundConnection
            msgRateExpired: 6.519180951018382
            outboundConnectedSince: outboundConnectedSince
            replicationBacklog: 0
            outboundConnection: outboundConnection
            inboundConnectedSince: inboundConnectedSince
            msgThroughputIn: 3.353193347011243
            msgThroughputOut: 3.0937452626664474
            msgRateOut: 7.058770351582356
        msgRateIn: 7.04836565559697
        offloadedStorageSize: 6
        subscriptions:
          key:
            lastConsumedFlowTimestamp: 5
            nonContiguousDeletedMessagesRangesSerializedSize: 3
            msgRateExpired: 7.457744773683766
            lastMarkDeleteAdvancedTimestamp: 6
            backlogSize: 5
            msgOutCounter: 7
            type: type
            durable: true
            bytesOutCounter: 2
            totalMsgExpired: 1
            nonContiguousDeletedMessagesRanges: 9
            consumersAfterMarkDeletePosition:
              key: consumersAfterMarkDeletePosition
            consumers:
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 1.2315135367772556
              avgMessagesPerEntry: 1
              msgOutCounter: 4
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgThroughputOut: 9.301444243932576
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 3
              bytesOutCounter: 2
              connectedSince: connectedSince
              lastAckedTimestamp: 7
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 1
              chunkedMessageRate: 1.0246457001441578
              msgRateOut: 7.386281948385884
              lastConsumedTimestamp: 6
              consumerName: consumerName
            - metadata:
                key: metadata
              address: address
              msgRateRedeliver: 1.2315135367772556
              avgMessagesPerEntry: 1
              msgOutCounter: 4
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgThroughputOut: 9.301444243932576
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 3
              bytesOutCounter: 2
              connectedSince: connectedSince
              lastAckedTimestamp: 7
              blockedConsumerOnUnackedMsgs: true
              unackedMessages: 1
              chunkedMessageRate: 1.0246457001441578
              msgRateOut: 7.386281948385884
              lastConsumedTimestamp: 6
              consumerName: consumerName
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 1
            unackedMessages: 6
            chunkedMessageRate: 7
            msgBacklog: 1
            lastConsumedTimestamp: 9
            activeConsumerName: activeConsumerName
            lastExpireTimestamp: 4
            msgRateRedeliver: 4.145608029883936
            msgThroughputOut: 5.962133916683182
            lastAckedTimestamp: 9
            replicated: true
            msgBacklogNoDelayed: 1
            msgRateOut: 2.027123023002322
        nonContiguousDeletedMessagesRangesSerializedSize: 7
        msgChunkPublished: true
        backlogSize: 1
        msgOutCounter: 3
        topicEpoch: 4
        msgThroughputIn: 0.8008281904610115
        msgThroughputOut: 6.027456183070403
        bytesInCounter: 8
        bytesOutCounter: 6
        waitingPublishers: 6
        msgInCounter: 9
        storageSize: 3
        nonContiguousDeletedMessagesRanges: 8
        publishers:
        - msgRateIn: 6.778324963048013
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 2.8841621266687802
          producerId: 5
          accessMode: Shared
          clientVersion: clientVersion
          msgThroughputIn: 1.284659006116532
          chunkedMessageRate: 6.878052220127876
        - msgRateIn: 6.778324963048013
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 2.8841621266687802
          producerId: 5
          accessMode: Shared
          clientVersion: clientVersion
          msgThroughputIn: 1.284659006116532
          chunkedMessageRate: 6.878052220127876
        compaction:
          lastCompactionDurationTimeInMills: 4
          lastCompactionRemovedEventCount: 0
          lastCompactionSucceedTimestamp: 7
          lastCompactionFailedTimestamp: 5
        averageMsgSize: 3.0205796992916243
        deduplicationStatus: deduplicationStatus
        msgRateOut: 5.533258397034986
      properties:
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionStats'
          type: object
        bytesInCounter:
          format: int64
          type: integer
        msgInCounter:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        offloadedStorageSize:
          format: int64
          type: integer
        publishers:
          items:
            $ref: '#/components/schemas/PublisherStats'
          type: array
        waitingPublishers:
          format: int32
          type: integer
        replication:
          additionalProperties:
            $ref: '#/components/schemas/ReplicatorStats'
          type: object
        deduplicationStatus:
          type: string
        topicEpoch:
          format: int64
          type: integer
        nonContiguousDeletedMessagesRanges:
          format: int32
          type: integer
        nonContiguousDeletedMessagesRangesSerializedSize:
          format: int32
          type: integer
        compaction:
          $ref: '#/components/schemas/CompactionStats'
        averageMsgSize:
          format: double
          type: number
        msgChunkPublished:
          type: boolean
        storageSize:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
      type: object
    TypeBindings:
      properties:
        empty:
          type: boolean
        typeParameters:
          items:
            $ref: '#/components/schemas/JavaType'
          type: array
      type: object
    TypeFactory:
      properties:
        classLoader:
          $ref: '#/components/schemas/ClassLoader'
      type: object
    Value:
      properties:
        contentInclusion:
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
          type: string
        valueInclusion:
          enum:
          - ALWAYS
          - NON_NULL
          - NON_ABSENT
          - NON_EMPTY
          - NON_DEFAULT
          - USE_DEFAULTS
          type: string
      type: object
    VisibilityChecker:
      type: object
    VisibilityCheckerObject:
      type: object
    WorkerConfig:
      properties:
        workerId:
          type: string
        workerHostname:
          type: string
        workerPort:
          format: int32
          type: integer
        workerPortTls:
          format: int32
          type: integer
        authenticateMetricsEndpoint:
          type: boolean
        includeStandardPrometheusMetrics:
          type: boolean
        jvmGCMetricsLoggerClassName:
          type: string
        numHttpServerThreads:
          format: int32
          type: integer
        httpRequestsLimitEnabled:
          type: boolean
        httpRequestsMaxPerSecond:
          format: double
          type: number
        configurationStoreServers:
          type: string
        zooKeeperSessionTimeoutMillis:
          format: int64
          type: integer
        zooKeeperOperationTimeoutSeconds:
          format: int32
          type: integer
        zooKeeperCacheExpirySeconds:
          format: int32
          type: integer
        connectorsDirectory:
          type: string
        narExtractionDirectory:
          type: string
        validateConnectorConfig:
          type: boolean
        functionsDirectory:
          type: string
        functionMetadataTopicName:
          type: string
        useCompactedMetadataTopic:
          type: boolean
        functionWebServiceUrl:
          type: string
        pulsarServiceUrl:
          type: string
        pulsarWebServiceUrl:
          type: string
        clusterCoordinationTopicName:
          type: string
        pulsarFunctionsNamespace:
          type: string
        pulsarFunctionsCluster:
          type: string
        numFunctionPackageReplicas:
          format: int32
          type: integer
        downloadDirectory:
          type: string
        stateStorageServiceUrl:
          type: string
        functionAssignmentTopicName:
          type: string
        schedulerClassName:
          type: string
        failureCheckFreqMs:
          format: int64
          type: integer
        rescheduleTimeoutMs:
          format: int64
          type: integer
        rebalanceCheckFreqSec:
          format: int64
          type: integer
        initialBrokerReconnectMaxRetries:
          format: int32
          type: integer
        assignmentWriteMaxRetries:
          format: int32
          type: integer
        instanceLivenessCheckFreqMs:
          format: int64
          type: integer
        brokerClientAuthenticationEnabled:
          type: boolean
        brokerClientAuthenticationPlugin:
          type: string
        brokerClientAuthenticationParameters:
          type: string
        bookkeeperClientAuthenticationPlugin:
          type: string
        bookkeeperClientAuthenticationParametersName:
          type: string
        bookkeeperClientAuthenticationParameters:
          type: string
        topicCompactionFrequencySec:
          format: int64
          type: integer
        tlsEnabled:
          type: boolean
        tlsCertificateFilePath:
          type: string
        tlsKeyFilePath:
          type: string
        tlsTrustCertsFilePath:
          type: string
        tlsAllowInsecureConnection:
          type: boolean
        tlsRequireTrustedClientCertOnConnect:
          type: boolean
        useTls:
          type: boolean
        tlsEnableHostnameVerification:
          type: boolean
        tlsCertRefreshCheckDurationSec:
          format: int64
          type: integer
        authenticationEnabled:
          type: boolean
        authenticationProviders:
          items:
            type: string
          type: array
          uniqueItems: true
        authorizationEnabled:
          type: boolean
        authorizationProvider:
          type: string
        superUserRoles:
          items:
            type: string
          type: array
          uniqueItems: true
        properties:
          additionalProperties:
            type: string
          type: object
        initializedDlogMetadata:
          type: boolean
        brokerClientTrustCertsFilePath:
          type: string
        functionRuntimeFactoryClassName:
          type: string
        functionRuntimeFactoryConfigs:
          additionalProperties:
            properties: {}
            type: object
          type: object
        secretsProviderConfiguratorClassName:
          type: string
        secretsProviderConfiguratorConfig:
          additionalProperties:
            type: string
          type: object
        functionInstanceMinResources:
          $ref: '#/components/schemas/Resources'
        functionInstanceMaxResources:
          $ref: '#/components/schemas/Resources'
        functionInstanceResourceGranularities:
          $ref: '#/components/schemas/Resources'
        functionInstanceResourceChangeInLockStep:
          type: boolean
        functionAuthProviderClassName:
          type: string
        runtimeCustomizerClassName:
          type: string
        runtimeCustomizerConfig:
          additionalProperties:
            properties: {}
            type: object
          type: object
        maxPendingAsyncRequests:
          format: int32
          type: integer
        forwardSourceMessageProperty:
          type: boolean
        functionsWorkerServiceNarPackage:
          type: string
        functionsWorkerServiceCustomConfigs:
          additionalProperties:
            properties: {}
            type: object
          type: object
        exposeAdminClientEnabled:
          type: boolean
        threadContainerFactory:
          $ref: '#/components/schemas/ThreadContainerFactory'
        processContainerFactory:
          $ref: '#/components/schemas/ProcessContainerFactory'
        kubernetesContainerFactory:
          $ref: '#/components/schemas/KubernetesContainerFactory'
        clientAuthenticationParameters:
          type: string
        clientAuthenticationPlugin:
          type: string
        functionMetadataTopic:
          type: string
        clusterCoordinationTopic:
          type: string
        functionAssignmentTopic:
          type: string
        tlsTrustChainBytes:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        workerWebAddress:
          type: string
        workerWebAddressTls:
          type: string
      type: object
    WorkerFunctionInstanceStats:
      example:
        name: name
        metrics:
          avgProcessLatency: 3.616076749251911
          userExceptionsTotal: 9
          userMetrics:
            key: 2.3021358869347655
          receivedTotal: 4
          oneMin:
            avgProcessLatency: 6.027456183070403
            userExceptionsTotal: 0
            receivedTotal: 5
            systemExceptionsTotal: 5
            processedSuccessfullyTotal: 1
          systemExceptionsTotal: 7
          processedSuccessfullyTotal: 2
          lastInvocation: 7
      properties:
        name:
          type: string
        metrics:
          $ref: '#/components/schemas/FunctionInstanceStatsData'
      type: object
    WorkerInfo:
      example:
        workerId: workerId
        port: 0
        workerHostname: workerHostname
      properties:
        workerId:
          type: string
        workerHostname:
          type: string
        port:
          format: int32
          type: integer
      type: object
    WorkerService:
      properties:
        functionsV2:
          $ref: '#/components/schemas/FunctionsV2WorkerService'
        workerConfig:
          $ref: '#/components/schemas/WorkerConfig'
        sinks:
          $ref: '#/components/schemas/SinksWorkerService'
        functions:
          $ref: '#/components/schemas/FunctionsWorkerService'
        workers:
          type: object
        initialized:
          type: boolean
        sources:
          $ref: '#/components/schemas/SourcesWorkerService'
      type: object
    Workers:
      type: object
    WorkersWorkerService:
      type: object
    X500Principal:
      properties:
        name:
          type: string
        encoded:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
      type: object
    X509Certificate:
      properties:
        type:
          type: string
        subjectX500Principal:
          $ref: '#/components/schemas/X500Principal'
        issuerX500Principal:
          $ref: '#/components/schemas/X500Principal'
        subjectAlternativeNames:
          items:
            items:
              properties: {}
              type: object
            type: array
          type: array
        issuerAlternativeNames:
          items:
            items:
              properties: {}
              type: object
            type: array
          type: array
        keyUsage:
          items:
            type: boolean
          type: array
        version:
          format: int32
          type: integer
        issuerDN:
          $ref: '#/components/schemas/Principal'
        subjectDN:
          $ref: '#/components/schemas/Principal'
        signature:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        basicConstraints:
          format: int32
          type: integer
        sigAlgName:
          type: string
        serialNumber:
          type: integer
        notBefore:
          format: date-time
          type: string
        notAfter:
          format: date-time
          type: string
        tbscertificate:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        sigAlgOID:
          type: string
        sigAlgParams:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        issuerUniqueID:
          items:
            type: boolean
          type: array
        subjectUniqueID:
          items:
            type: boolean
          type: array
        extendedKeyUsage:
          items:
            type: string
          type: array
        criticalExtensionOIDs:
          items:
            type: string
          type: array
          uniqueItems: true
        nonCriticalExtensionOIDs:
          items:
            type: string
          type: array
          uniqueItems: true
        encoded:
          items:
            format: byte
            pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
            type: string
          type: array
        publicKey:
          $ref: '#/components/schemas/PublicKey'
      type: object
x-original-swagger-version: "2.0"
