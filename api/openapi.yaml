openapi: 3.0.1
info:
  description: This provides the REST API for admin operations
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Pulsar Admin REST API
  version: v2
servers:
- url: /admin/v2
tags:
- name: bookies
- name: broker-stats
- name: brokers
- name: clusters
- name: namespaces
- name: non-persistent topic
- name: persistent topic
- name: resource-quotas
- name: schemas
- name: tenants
paths:
  /bookies/racks-info:
    get:
      operationId: getBookiesRackInfo
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  additionalProperties:
                    $ref: '#/components/schemas/BookieInfo'
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for all the bookies in the cluster
      tags:
      - bookies
  /bookies/racks-info/{bookie}:
    delete:
      operationId: deleteBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Removed the rack placement information for a specific bookie in the
        cluster
      tags:
      - bookies
    get:
      operationId: getBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieInfo'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the rack placement information for a specific bookie in the cluster
      tags:
      - bookies
    post:
      operationId: updateBookieRackInfo
      parameters:
      - in: path
        name: bookie
        required: true
        schema:
          type: string
      - in: query
        name: group
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Updates the rack placement information for a specific bookie in the
        cluster (note. bookie address format:`address:port`)
      tags:
      - bookies
  /broker-stats/allocator-stats/{allocator}:
    get:
      operationId: getAllocatorStats
      parameters:
      - in: path
        name: allocator
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllocatorStats'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the stats for the Netty allocator. Available allocators are 'default'
        and 'ml-cache'
      tags:
      - broker-stats
  /broker-stats/bookieops:
    get:
      operationId: getPendingBookieOpsStats
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/PendingBookieOpsStats'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get pending bookie client op stats by namesapce
      tags:
      - broker-stats
  /broker-stats/broker-resource-availability/{tenant}/{namespace}:
    get:
      description: This API gives the current broker availability in percent, each
        resource percentage usage is calculated and thensum of all of the resource
        usage percent is called broker-resource-availability<br/><br/>THIS API IS
        ONLY FOR USE BY TESTING FOR CONFIRMING NAMESPACE ALLOCATION ALGORITHM
      operationId: getBrokerResourceAvailability
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/ResourceUnit'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Load-manager doesn't support operation
      summary: Broker availability report
      tags:
      - broker-stats
  /broker-stats/load-report:
    get:
      description: consists of topics stats & systemResourceUsage
      operationId: getLoadReport
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoadReport'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get Load for this broker
      tags:
      - broker-stats
  /broker-stats/mbeans:
    get:
      operationId: getMBeans
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all the mbean details of this broker JVM
      tags:
      - broker-stats
  /broker-stats/metrics:
    get:
      description: Requested should be executed by Monitoring agent on each broker
        to fetch the metrics
      operationId: getMetrics
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/Metrics'
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Gets the metrics for Monitoring
      tags:
      - broker-stats
  /broker-stats/topics:
    get:
      operationId: getTopics2
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OutputStream'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all the topic stats by namespace
      tags:
      - broker-stats
  /brokers/backlog-quota-check:
    get:
      operationId: backlogQuotaCheck
      responses:
        "200":
          content: {}
          description: Everything is OK
        "403":
          content: {}
          description: Don't have admin permission
        "500":
          content: {}
          description: Internal server error
      summary: An REST endpoint to trigger backlogQuotaCheck
      tags:
      - brokers
  /brokers/configuration:
    get:
      operationId: getDynamicConfigurationName
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        "403":
          content: {}
          description: You don't have admin permission to get configuration
      summary: Get all updatable dynamic configurations's name
      tags:
      - brokers
  /brokers/configuration/runtime:
    get:
      operationId: getRuntimeConfiguration
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get all runtime configurations. This operation requires Pulsar super-user
        privileges.
      tags:
      - brokers
  /brokers/configuration/values:
    get:
      operationId: getAllDynamicConfigurations
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: You don't have admin permission to view configuration
        "404":
          content: {}
          description: Configuration not found
        "500":
          content: {}
          description: Internal server error
      summary: Get value of all dynamic configurations' value overridden on local
        config
      tags:
      - brokers
  /brokers/configuration/{configName}:
    delete:
      operationId: deleteDynamicConfiguration
      parameters:
      - in: path
        name: configName
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Service configuration updated successfully
        "403":
          content: {}
          description: You don't have admin permission to update service-configuration
        "412":
          content: {}
          description: Invalid dynamic-config value
        "500":
          content: {}
          description: Internal server error
      summary: Delete dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      tags:
      - brokers
  /brokers/configuration/{configName}/{configValue}:
    post:
      operationId: updateDynamicConfiguration
      parameters:
      - in: path
        name: configName
        required: true
        schema:
          type: string
      - in: path
        name: configValue
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Service configuration updated successfully
        "403":
          content: {}
          description: You don't have admin permission to update service-configuration
        "404":
          content: {}
          description: Configuration not found
        "412":
          content: {}
          description: Invalid dynamic-config value
        "500":
          content: {}
          description: Internal server error
      summary: Update dynamic serviceconfiguration into zk only. This operation requires
        Pulsar super-user privileges.
      tags:
      - brokers
  /brokers/health:
    get:
      operationId: healthcheck
      responses:
        "200":
          content: {}
          description: Everything is OK
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Run a healthcheck against the broker
      tags:
      - brokers
  /brokers/internal-configuration:
    get:
      operationId: getInternalConfigurationData
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InternalConfigurationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the internal configuration data
      tags:
      - brokers
  /brokers/ready:
    get:
      operationId: isReady
      responses:
        "200":
          content: {}
          description: Broker is ready
        "500":
          content: {}
          description: Broker is not ready
      summary: Check if the broker is fully initialized
      tags:
      - brokers
  /brokers/{clusterName}/{broker-webserviceurl}/ownedNamespaces:
    get:
      operationId: getOwnedNamespaces
      parameters:
      - in: path
        name: clusterName
        required: true
        schema:
          type: string
      - in: path
        name: broker-webserviceurl
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceOwnershipStatus'
                type: object
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the cluster
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Cluster doesn't exist
      summary: Get the list of namespaces served by the specific broker
      tags:
      - brokers
  /brokers/{cluster}:
    get:
      operationId: getActiveBrokers
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve this cluster
        "401":
          content: {}
          description: Authentication required
        "403":
          content: {}
          description: This operation requires super-user access
        "404":
          content: {}
          description: 'Cluster does not exist: cluster={clustername}'
      summary: Get the list of active brokers (web service addresses) in the cluster.If
        authorization is not enabled, any cluster name is valid.
      tags:
      - brokers
  /clusters:
    get:
      operationId: getClusters
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: Return a list of clusters.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the list of all the Pulsar clusters.
      tags:
      - clusters
  /clusters/{cluster}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "204":
          content: {}
          description: Cluster has been deleted.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "412":
          content: {}
          description: Cluster is not empty.
        "500":
          content: {}
          description: Internal server error.
      summary: Delete an existing cluster.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClusterData'
          description: Return the cluster data.
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the configuration for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: updateCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been updated.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Update the configuration for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar superuser privileges, and the name
        cannot contain the '/' characters.
      operationId: createCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ClusterData'
        description: The cluster data
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been created.
        "403":
          content: {}
          description: You don't have admin permission to create the cluster.
        "409":
          content: {}
          description: Cluster already exists.
        "412":
          content: {}
          description: Cluster name is not valid.
        "500":
          content: {}
          description: Internal server error.
      summary: Create a new cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/failureDomains:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getFailureDomains
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/FailureDomain'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "500":
          content: {}
          description: Internal server error
      summary: Get the cluster failure domains.
      tags:
      - clusters
  /clusters/{cluster}/failureDomains/{domainName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission or policy is read only
        "404":
          content: {}
          description: FailureDomain doesn't exist
        "412":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Delete the failure domain of the cluster
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FailureDomain'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: FailureDomain doesn't exist
        "412":
          content: {}
          description: Cluster doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get a domain in a cluster
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setFailureDomain
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The failure domain name
        in: path
        name: domainName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/FailureDomain'
        description: The configuration data of a failure domain
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Failure domain doesn't exist.
        "409":
          content: {}
          description: Broker already exists in another domain.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Set the failure domain of the cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/namespaceIsolationPolicies:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicies
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/NamespaceIsolationData'
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the namespace isolation policies assigned to the cluster.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokersWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/BrokerNamespaceIsolationData'
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Namespace-isolation policies not found.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get list of brokers with namespace-isolation policies attached to them.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/brokers/{broker}:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getBrokerWithNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The broker name (<broker-hostname>:<web-service-port>)
        example: broker1:8080
        in: path
        name: broker
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BrokerNamespaceIsolationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Namespace-isolation policies/ Broker not found.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get a broker with namespace-isolation policies attached to it.
      tags:
      - clusters
  /clusters/{cluster}/namespaceIsolationPolicies/{policyName}:
    delete:
      description: This operation requires Pulsar superuser privileges.
      operationId: deleteNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission or policies are read only.
        "404":
          content: {}
          description: Namespace isolation policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Delete namespace isolation policy.
      tags:
      - clusters
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The name of the namespace isolation policy
        in: path
        name: policyName
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NamespaceIsolationData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the single namespace isolation policy assigned to the cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setNamespaceIsolationPolicy
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      - description: The namespace isolation policy name
        in: path
        name: policyName
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/NamespaceIsolationData'
        description: The namespace isolation policy data
        required: true
      responses:
        "400":
          content: {}
          description: Namespace isolation policy data is invalid.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Namespace isolation policy doesn't exist.
        "412":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Set namespace isolation policy.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /clusters/{cluster}/peers:
    get:
      description: This operation requires Pulsar superuser privileges.
      operationId: getPeerCluster
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Get the peer-cluster data for the specified cluster.
      tags:
      - clusters
    post:
      description: This operation requires Pulsar superuser privileges.
      operationId: setPeerClusterNames
      parameters:
      - description: The cluster name
        in: path
        name: cluster
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                type: string
              type: array
        description: The list of peer cluster names
        required: true
      responses:
        "204":
          content: {}
          description: Cluster has been updated.
        "403":
          content: {}
          description: Don't have admin permission or policies are read-only.
        "404":
          content: {}
          description: Cluster doesn't exist.
        "412":
          content: {}
          description: Peer cluster doesn't exist.
        "500":
          content: {}
          description: Internal server error.
      summary: Update peer-cluster-list for a cluster.
      tags:
      - clusters
      x-codegen-request-body-name: body
  /namespaces/{cluster}/antiAffinity/{group}:
    get:
      operationId: getAntiAffinityNamespaces
      parameters:
      - in: path
        name: cluster
        required: true
        schema:
          type: string
      - in: path
        name: group
        required: true
        schema:
          type: string
      - in: query
        name: tenant
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  properties: {}
                  type: object
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "412":
          content: {}
          description: Cluster not exist/Anti-affinity group can't be empty.
      summary: Get all namespaces that are grouped by given anti-affinity group in
        a given cluster. api can be only accessed by admin of any of the existing
        tenant
      tags:
      - namespaces
  /namespaces/{property}/{namespace}/persistence/bookieAffinity:
    delete:
      operationId: deleteBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Delete the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
    get:
      operationId: getBookieAffinityGroup
      parameters:
      - in: path
        name: property
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookieAffinityGroupData'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get the bookie-affinity-group from namespace-local policy.
      tags:
      - namespaces
  /namespaces/{tenant}:
    get:
      operationId: getTenantNamespaces
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of all the namespaces for a certain tenant.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}:
    delete:
      operationId: deleteNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: force
        schema:
          default: false
          type: boolean
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Namespace is not empty
      summary: Delete a namespace and all the topics under it.
      tags:
      - namespaces
    get:
      operationId: getPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Policies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the dump all the policies specified for a namespace.
      tags:
      - namespaces
    put:
      operationId: createNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Policies'
        description: Policies for the namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster doesn't exist
        "409":
          content: {}
          description: Namespace already exists
        "412":
          content: {}
          description: Namespace name is not valid
      summary: Creates a new namespace with the specified policies
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/antiAffinity:
    delete:
      operationId: removeNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove anti-affinity group of a namespace.
      tags:
      - namespaces
    get:
      operationId: getNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get anti-affinity group of a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceAntiAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Anti-affinity group for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid antiAffinityGroup
      summary: Set anti-affinity group for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/autoSubscriptionCreation:
    delete:
      operationId: removeAutoSubscriptionCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove override of broker's allowAutoSubscriptionCreation in a namespace
      tags:
      - namespaces
    post:
      operationId: setAutoSubscriptionCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        description: Settings for automatic subscription creation
        required: false
      responses:
        "400":
          content: {}
          description: Invalid autoSubscriptionCreation override
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Override broker's allowAutoSubscriptionCreation setting for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/autoTopicCreation:
    delete:
      operationId: removeAutoTopicCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Remove override of broker's allowAutoTopicCreation in a namespace
      tags:
      - namespaces
    post:
      operationId: setAutoTopicCreation
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AutoTopicCreationOverride'
        description: Settings for automatic topic creation
        required: true
      responses:
        "400":
          content: {}
          description: Invalid autoTopicCreation override
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "406":
          content: {}
          description: The number of partitions should be less than or equal to maxNumPartitionsPerPartitionedTopic
      summary: Override broker's allowAutoTopicCreation setting for a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/backlogQuota:
    delete:
      operationId: removeNameSpaceBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BacklogQuota'
        description: Backlog quota for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: ' Set a backlog quota for all the topics on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/backlogQuotaMap:
    get:
      operationId: getNameSpaceBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get backlog quota map on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/bundles:
    get:
      operationId: getBundlesData
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BundlesData'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is not setup to split in bundles
      summary: Get the bundles split data.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog:
    post:
      operationId: clearNamespaceBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/compactionThreshold:
    get:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: getNameSpaceCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of uncompacted bytes in topics before compaction is
        triggered.
      tags:
      - namespaces
    put:
      description: The backlog size is compared to the threshold periodically. A threshold
        of 0 disabled automatic compaction
      operationId: setNameSpaceCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: Maximum number of uncompacted bytes in a topic of the specified
          namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: compactionThreshold value is not valid
      summary: Set maximum number of uncompacted bytes in a topic before compaction
        is triggered.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/deduplication:
    post:
      operationId: modifyDeduplication
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag for disabling or enabling broker side deduplication for
          all topics in the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Enable or disable broker side deduplication for all topics in a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/deduplicationSnapshotInterval:
    get:
      operationId: getNameSpaceDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get deduplicationSnapshotInterval config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Set deduplicationSnapshotInterval config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/delayedDelivery:
    get:
      operationId: getNameSpaceDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DelayedDeliveryPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get delayed delivery messages config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Set delayed delivery messages config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/dispatchRate:
    get:
      operationId: getNameSpaceDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get dispatch-rate configured for the namespace, -1 represents not configured
        yet
      tags:
      - namespaces
    post:
      operationId: setNameSpaceDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/encryptionRequired:
    post:
      operationId: modifyEncryptionRequired
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag defining if message encryption is required
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Message encryption is required or not for all topics in a namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/inactiveTopicPolicies:
    delete:
      operationId: removeInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove inactive topic policies from a namespace.
      tags:
      - namespaces
    get:
      operationId: getNameSpaceInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InactiveTopicPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get inactive topic policies config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: Inactive topic policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Set inactive topic policies config on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/isAllowAutoUpdateSchema:
    get:
      operationId: getIsAllowAutoUpdateSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: The flag of whether allow auto update schema
      tags:
      - namespaces
    post:
      operationId: setIsAllowAutoUpdateSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag of whether to allow auto update schema
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update flag of whether allow auto update schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxConsumersPerSubscription:
    get:
      operationId: getNameSpaceMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerSubscription config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum consumers per subscription
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxConsumersPerSubscription value is not valid
      summary: ' Set maxConsumersPerSubscription configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxConsumersPerTopic:
    get:
      operationId: getMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxConsumersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxConsumersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum consumers per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxConsumersPerTopic value is not valid
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxProducersPerTopic:
    get:
      operationId: getMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxProducersPerTopic config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxProducersPerTopic
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum producers per topic
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxProducersPerTopic value is not valid
      summary: ' Set maxProducersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerConsumer:
    get:
      operationId: getMaxUnackedMessagesPerConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxUnackedMessagesPerConsumer config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxUnackedMessagesPerConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum unacked messages per consumer
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxUnackedMessagesPerConsumer value is not valid
      summary: ' Set maxConsumersPerTopic configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/maxUnackedMessagesPerSubscription:
    get:
      operationId: getMaxUnackedmessagesPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get maxUnackedMessagesPerSubscription config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setMaxUnackedMessagesPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Number of maximum unacked messages per subscription
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: maxUnackedMessagesPerSubscription value is not valid
      summary: ' Set maxUnackedMessagesPerSubscription configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/messageTTL:
    delete:
      operationId: removeNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid TTL
      summary: Set message TTL in seconds for namespace
      tags:
      - namespaces
    get:
      operationId: getNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the message TTL for the namespace
      tags:
      - namespaces
    post:
      operationId: setNamespaceMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: TTL in seconds for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid TTL
      summary: Set message TTL in seconds for namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadDeletionLagMs:
    delete:
      operationId: clearOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Clear the namespace configured offload deletion lag. The topics in
        the namespace will fallback to using the default configured deletion lag for
        the broker
      tags:
      - namespaces
    get:
      description: A negative value denotes that deletion has been completely disabled.
        'null' denotes that the topics in the namespace will fall back to the broker
        default for deletion lag.
      operationId: getOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Number of milliseconds to wait before deleting a ledger segment which
        has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
    put:
      description: A negative value disables the deletion completely.
      operationId: setOffloadDeletionLag
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: New number of milliseconds to wait before deleting a ledger segment
          which has been offloaded
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: offloadDeletionLagMs value is not valid
      summary: Set number of milliseconds to wait before deleting a ledger segment
        which has been offloaded from the Pulsar cluster's local storage (i.e. BookKeeper)
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadPolicies:
    get:
      operationId: getNameSpaceOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get offload configuration on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OffloadPolicies'
        description: Offload policies for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
      summary: ' Set offload configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/offloadThreshold:
    get:
      description: A negative value disables automatic offloading
      operationId: getOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int64
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
      summary: Maximum number of bytes stored on the pulsar cluster for a topic, before
        the broker will start offloading to longterm storage
      tags:
      - namespaces
    put:
      description: '-1 will revert to using the cluster default. A negative value
        disables automatic offloading. '
      operationId: setOffloadThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int64
              type: integer
        description: Maximum number of bytes stored on the pulsar cluster for a topic
          of the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: offloadThreshold value is not valid
      summary: Set maximum number of bytes stored on the pulsar cluster for a topic,
        before the broker will start offloading to longterm storage
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/permissions:
    get:
      operationId: getPermissions
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Namespace is not empty
      summary: Retrieve the permissions for a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/permissions/{role}:
    delete:
      operationId: revokePermissionsOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Revoke all permissions to a role on a namespace.
      tags:
      - namespaces
    post:
      operationId: grantPermissionOnNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                type: string
              type: array
        description: List of permissions for the specified role
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
        "501":
          content: {}
          description: Authorization is not enabled
      summary: Grant a new permission to a role on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/persistence:
    get:
      operationId: getNameSpacePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistencePolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Get the persistence configuration for a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpacePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Persistence policies for the specified namespace
        required: true
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Set the persistence configuration for all the topics on a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/persistence/bookieAffinity:
    post:
      operationId: setBookieAffinityGroup
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookieAffinityGroupData'
        description: Bookie affinity group for the specified namespace
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Set the bookie-affinity-group to namespace-persistent policy.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/removeOffloadPolicies:
    delete:
      operationId: removeNameSpaceOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: OffloadPolicies is empty or driver is not supported or bucket
            is not valid
      summary: ' Set offload configuration on a namespace.'
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/replication:
    get:
      operationId: getNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is not global
      summary: Get the replication clusters for a namespace.
      tags:
      - namespaces
    post:
      operationId: setNamespaceReplicationClusters
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              items:
                type: string
              type: array
        description: List of replication clusters
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Peer-cluster can't be part of replication-cluster
        "412":
          content: {}
          description: Namespace is not global or invalid cluster ids
      summary: Set the replication clusters for a namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/replicatorDispatchRate:
    get:
      operationId: getReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get replicator dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setReplicatorDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Replicator dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set replicator dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/retention:
    get:
      operationId: getNameSpaceRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetentionPolicies'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get retention config on a namespace.
      tags:
      - namespaces
    post:
      operationId: setNameSpaceRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: ' Set retention configuration on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaAutoUpdateCompatibilityStrategy:
    get:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: getSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - AutoUpdateDisabled
                - Backward
                - Forward
                - Full
                - AlwaysCompatible
                - BackwardTransitive
                - ForwardTransitive
                - FullTransitive
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: The strategy used to check the compatibility of new schemas, provided
        by producers, before automatically updating the schema
      tags:
      - namespaces
    put:
      description: The value AutoUpdateDisabled prevents producers from updating the
        schema.  If set to AutoUpdateDisabled, schemas must be updated through the
        REST api
      operationId: setSchemaAutoUpdateCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Strategy used to check the compatibility of new schemas
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update the strategy used to check the compatibility of new schemas,
        provided by producers, before automatically updating the schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaCompatibilityStrategy:
    get:
      operationId: getSchemaCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                enum:
                - UNDEFINED
                - ALWAYS_INCOMPATIBLE
                - ALWAYS_COMPATIBLE
                - BACKWARD
                - FORWARD
                - FULL
                - BACKWARD_TRANSITIVE
                - FORWARD_TRANSITIVE
                - FULL_TRANSITIVE
                type: string
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: 'The strategy of the namespace schema compatibility '
      tags:
      - namespaces
    put:
      operationId: setSchemaCompatibilityStrategy
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Strategy used to check the compatibility of new schema
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "409":
          content: {}
          description: Concurrent modification
      summary: Update the strategy used to check the compatibility of new schema
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/schemaValidationEnforced:
    get:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: getSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: boolean
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenants or Namespace doesn't exist
      summary: Get schema validation enforced flag for namespace.
      tags:
      - namespaces
    post:
      description: If the flag is set to true, when a producer without a schema attempts
        to produce to a topic with schema in this namespace, the producer will be
        failed to connect. PLEASE be carefully on using this, since non-java clients
        don't support schema.if you enable this setting, it will cause non-java clients
        failed to produce.
      operationId: setSchemaValidtionEnforced
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: boolean
        description: Flag of whether validation is enforced on the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or Namespace doesn't exist
        "412":
          content: {}
          description: schemaValidationEnforced value is not valid
      summary: Set schema validation enforced flag on namespace.
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscribeRate:
    get:
      operationId: getNameSpaceSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get subscribe-rate configured for the namespace
      tags:
      - namespaces
    post:
      operationId: setNameSpaceSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set subscribe-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionAuthMode:
    post:
      operationId: setSubscriptionAuthMode
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
        description: Subscription auth mode for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
        "409":
          content: {}
          description: Concurrent modification
      summary: ' Set a subscription auth mode for all the topics on a namespace.'
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionDispatchRate:
    get:
      operationId: getNameSpaceSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DispatchRate'
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get Subscription dispatch-rate configured for the namespace, -1 represents
        not configured yet
      tags:
      - namespaces
    post:
      operationId: setNameSpaceSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Subscription dispatch rate for all topics of the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set Subscription dispatch-rate throttling for all topics of the namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/subscriptionExpirationTime:
    get:
      operationId: getSubscriptionExpirationTime
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the subscription expiration time for the namespace
      tags:
      - namespaces
    post:
      operationId: setSubscriptionExpirationTime
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              format: int32
              type: integer
        description: Expiration time in minutes for the specified namespace
        required: true
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "412":
          content: {}
          description: Invalid expiration time
      summary: Set subscription expiration time in minutes for namespace
      tags:
      - namespaces
      x-codegen-request-body-name: body
  /namespaces/{tenant}/{namespace}/topics:
    get:
      operationId: getTopics
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: query
        name: mode
        schema:
          default: PERSISTENT
          enum:
          - PERSISTENT
          - NON_PERSISTENT
          - ALL
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
      summary: Get the list of all the topics under a certain namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unload:
    put:
      description: Unload an active namespace from the current broker serving it.
        Performing this operation will let the brokerremoves all producers, consumers,
        and connections using this namespace, and close all topics (includingtheir
        persistent store). During that operation, the namespace is marked as tentatively
        unavailable until thebroker completes the unloading action. This operation
        requires strictly super user privileges, since it wouldresult in non-persistent
        message loss and unexpected connection closure to the clients.
      operationId: unloadNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or namespace doesn't exist
        "412":
          content: {}
          description: Namespace is already unloaded or Namespace has bundles activated
      summary: Unload namespace
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespace
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: deleteNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: force
        schema:
          default: false
          type: boolean
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace doesn't exist
        "409":
          content: {}
          description: Namespace bundle is not empty
      summary: Delete a namespace bundle and all the topics under it.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog:
    post:
      operationId: clearNamespaceBundleBacklog
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for all topics on a namespace bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/clearBacklog/{subscription}:
    post:
      operationId: clearNamespaceBundleBacklogForSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Clear backlog for a given subscription on all topics on a namespace
        bundle.
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/split:
    put:
      operationId: splitNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: unload
        schema:
          default: false
          type: boolean
      - in: query
        name: splitAlgorithmName
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
      summary: Split a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unload:
    put:
      operationId: unloadNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
      summary: Unload a namespace bundle
      tags:
      - namespaces
  /namespaces/{tenant}/{namespace}/{bundle}/unsubscribe/{subscription}:
    post:
      operationId: unsubscribeNamespaceBundle
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: subscription
        required: true
        schema:
          type: string
      - in: path
        name: bundle
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Unsubscribes the given subscription on all topics on a namespace bundle.
      tags:
      - namespaces
  /non-persistent/{tenant}/{namespace}:
    get:
      operationId: getListNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace does not exist
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of non-persistent topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicListNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{bundle}:
    get:
      operationId: getListFromBundle
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Bundle range of a topic
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace doesn't exist
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of non-persistent topics under a namespace bundle.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic has active producers/subscriptions
        "500":
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - non-persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptionsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklogNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        "404":
          content: {}
          description: Namespace does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    delete:
      operationId: removeBacklogQuotaNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setBacklogQuotaNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: Set a backlog quota for a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMapNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic policy does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get backlog quota map on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatusNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist, or compaction hasn't run
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - non-persistent topic
    put:
      operationId: compactNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Compaction already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    delete:
      operationId: removeCompactionThresholdNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getCompactionThresholdNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setCompactionThresholdNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int64
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set compaction threshold configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      operationId: createMissedPartitionsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Create missed partitions of an existing partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    delete:
      operationId: removeDeduplicationEnabledNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove deduplication configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDeduplicationEnabledNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get deduplication configuration of a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDeduplicationEnabledNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: DeduplicationEnabled policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Set deduplication enabled on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    delete:
      operationId: deleteDeduplicationSnapshotIntervalNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDeduplicationSnapshotIntervalNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDeduplicationSnapshotIntervalNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set deduplicationSnapshotInterval config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    delete:
      operationId: deleteDelayedDeliveryPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDelayedDeliveryPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDelayedDeliveryPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    delete:
      operationId: removeDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message dispatch rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      operationId: examineMessageNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        in: query
        name: initialPosition
        schema:
          default: latest
          enum:
          - latest
          - earliest
          type: string
      - description: The position of messages (default 1)
        in: query
        name: messagePosition
        schema:
          default: 1
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, the message position does not exist
        "405":
          content: {}
          description: If given partitioned topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    delete:
      operationId: deleteInactiveTopicPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete inactive topic policies on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getInactiveTopicPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get inactive topic policies on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setInactiveTopicPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: inactive topic policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set inactive topic policies on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfoNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stored topic metadata.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStatsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: metadata
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the internal stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageIdNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      operationId: getMessageByIdNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: The ledger id
        in: path
        name: ledgerId
        required: true
        schema:
          format: int64
          type: integer
      - description: The entry id
        in: path
        name: entryId
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get message by its messageId.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    delete:
      operationId: removeMaxConsumersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxConsumers config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxConsumersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxConsumers config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxConsumersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max consumers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxConsumers config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    delete:
      operationId: removeMaxConsumersPerSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxConsumersPerSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxConsumersPerSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set max consumers per subscription configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxProducers:
    delete:
      operationId: removeMaxProducersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxProducers config for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxProducersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxProducers config for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxProducersNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max producers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxProducers
      summary: Set maxProducers config for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    delete:
      operationId: deleteMaxUnackedMessagesOnConsumerNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxUnackedMessagesOnConsumerNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxUnackedMessagesOnConsumerNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on consumer policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per consumer config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    delete:
      operationId: deleteMaxUnackedMessagesOnSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getMaxUnackedMessagesOnSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setMaxUnackedMessagesOnSubscriptionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on subscription policies for the specified
          topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per subscription config on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/messageTTL:
    delete:
      operationId: removeMessageTTLNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Remove message TTL in seconds for a topic
      tags:
      - non-persistent topic
    get:
      operationId: getMessageTTLNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
      summary: Get message TTL in seconds for a topic
      tags:
      - non-persistent topic
    post:
      operationId: setMessageTTLNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: TTL in seconds for the specified namespace
        in: query
        name: messageTTL
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Set message TTL in seconds for a topic
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatusNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
    put:
      operationId: triggerOffloadNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Offload already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    delete:
      operationId: removeOffloadPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete offload policies on a topic.
      tags:
      - non-persistent topic
    get:
      operationId: getOffloadPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get offload policies on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: setOffloadPoliciesNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPolicies'
        description: Offload policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set offload policies on a topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStatsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Get per partition stats
        in: query
        name: perPartition
        schema:
          default: true
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Partitioned topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPartitionedMetadataNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is check configuration required to automatically create topic
        in: query
        name: checkAllowAutoCreation
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate cluster configuration
      summary: Get partitioned topic metadata.
      tags:
      - non-persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: updateLocalTopicOnly
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Increment partitions of an existing partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic already exists
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Permissions are not set at the topic level
        "500":
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - non-persistent topic
    post:
      operationId: grantPermissionsOnTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/persistence:
    delete:
      operationId: removePersistenceNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPersistenceNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setPersistenceNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Bookkeeper persistence policies for specified topic
        required: false
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set configuration of persistence policies for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/publishRate:
    delete:
      operationId: removePublishRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message publish rate configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getPublishRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get publish rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setPublishRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message publish rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/retention:
    delete:
      operationId: removeRetentionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Remove retention configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getRetentionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get retention configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setRetentionNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Set retention configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStatsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to manage resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the stats for the topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    delete:
      operationId: removeSubscribeRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
    get:
      operationId: getSubscribeRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
    post:
      operationId: setSubscribeRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscribe rate configuration for specified topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deleteSubscriptionNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Disconnect and close all consumers and delete subscription forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Subscription has active consumers
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessagesNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessageNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPositionNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "412":
          content: {}
          description: Unable to find position for position specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Method Not Allowed
        "412":
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessagesNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessagesNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on non-persistent topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscriptionNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is replicated required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Create subscription on non persistent topic is not supported
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a subscription on the topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: messageId
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    delete:
      operationId: removeSubscriptionDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
    get:
      operationId: getSubscriptionDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
    post:
      operationId: setSubscriptionDispatchRateNP
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Subscription message dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      tags:
      - non-persistent topic
      x-codegen-request-body-name: body
  /non-persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptionsNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - non-persistent topic
  /non-persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopicNP
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: This operation requires super-user access
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: The tenant/namespace/topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Unload a topic
      tags:
      - non-persistent topic
  /persistent/{tenant}/{namespace}:
    get:
      operationId: getList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/partitioned:
    get:
      operationId: getPartitionedTopicList
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Namespace name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get the list of partitioned topics under a namespace.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}:
    delete:
      description: The topic cannot be deleted if delete is not forcefully and there's
        any active subscription or producer connected to the it. Force delete ignores
        connected clients and deletes topic by explicitly closing them.
      operationId: deleteTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic has active producers/subscriptions
        "500":
          content: {}
          description: Internal server error
      summary: Delete a topic.
      tags:
      - persistent topic
    put:
      description: This is the only REST endpoint from which non-partitioned topics
        could be created.
      operationId: createNonPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a non-partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/all_subscription/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireMessagesForAllSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on all subscriptions of topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlog:
    get:
      operationId: getBacklog
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentOfflineTopicStats'
          description: successful operation
        "404":
          content: {}
          description: Namespace does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get estimated backlog for offline topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlogQuota:
    delete:
      operationId: removeBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove a backlog quota policy from a topic.
      tags:
      - persistent topic
    post:
      operationId: setBacklogQuota
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: backlogQuotaType
        schema:
          enum:
          - destination_storage
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Specified backlog quota exceeds retention quota. Increase retention
            quota and retry request
      summary: Set a backlog quota for a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/backlogQuotaMap:
    get:
      operationId: getBacklogQuotaMap
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic policy does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get backlog quota map on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/compaction:
    get:
      operationId: compactionStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongRunningProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist, or compaction hasn't run
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the status of a compaction operation for a topic.
      tags:
      - persistent topic
    put:
      operationId: compact
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Compaction already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Trigger a compaction operation on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/compactionThreshold:
    delete:
      operationId: removeCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove compaction threshold configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get compaction threshold configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setCompactionThreshold
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int64
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set compaction threshold configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/createMissedPartitions:
    post:
      operationId: createMissedPartitions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Create missed partitions of an existing partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/deduplicationEnabled:
    delete:
      operationId: removeDeduplicationEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove deduplication configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getDeduplicationEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Get deduplication configuration of a topic.
      tags:
      - persistent topic
    post:
      operationId: setDeduplicationEnabled
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              type: boolean
        description: DeduplicationEnabled policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
      summary: Set deduplication enabled on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/deduplicationSnapshotInterval:
    delete:
      operationId: deleteDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setDeduplicationSnapshotInterval
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Interval to take deduplication snapshot for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set deduplicationSnapshotInterval config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/delayedDelivery:
    delete:
      operationId: deleteDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get delayed delivery messages config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setDelayedDeliveryPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DelayedDeliveryPolicies'
        description: Delayed delivery policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set delayed delivery messages config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/dispatchRate:
    delete:
      operationId: removeDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message dispatch rate configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get dispatch rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message dispatch rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/examinemessage:
    get:
      operationId: examineMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Relative start position to examine message.It can be 'latest'
          or 'earliest'
        in: query
        name: initialPosition
        schema:
          default: latest
          enum:
          - latest
          - earliest
          type: string
      - description: The position of messages (default 1)
        in: query
        name: messagePosition
        schema:
          default: 1
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, the message position does not exist
        "405":
          content: {}
          description: If given partitioned topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Examine a specific message on a topic by position relative to the earliest
        or the latest message.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/inactiveTopicPolicies:
    delete:
      operationId: deleteInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete inactive topic policies on a topic.
      tags:
      - persistent topic
    get:
      operationId: getInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get inactive topic policies on a topic.
      tags:
      - persistent topic
    post:
      operationId: setInactiveTopicPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InactiveTopicPolicies'
        description: inactive topic policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set inactive topic policies on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/internal-info:
    get:
      operationId: getManagedLedgerInfo
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stored topic metadata.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/internalStats:
    get:
      operationId: getInternalStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - in: query
        name: metadata
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PersistentTopicInternalStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the internal stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/lastMessageId:
    get:
      operationId: getLastMessageId
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Return the last commit message id of topic
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/ledger/{ledgerId}/entry/{entryId}:
    get:
      operationId: getMessageById
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: The ledger id
        in: path
        name: ledgerId
        required: true
        schema:
          format: int64
          type: integer
      - description: The entry id
        in: path
        name: entryId
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get message by its messageId.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/maxConsumers:
    delete:
      operationId: removeMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxConsumers config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxConsumers config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxConsumers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max consumers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxConsumers
      summary: Set maxConsumers config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxConsumersPerSubscription:
    delete:
      operationId: removeMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxConsumersPerSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set max consumers per subscription configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxProducers:
    delete:
      operationId: removeMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove maxProducers config for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get maxProducers config for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxProducers
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: The max producers of the topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Invalid value of maxProducers
      summary: Set maxProducers config for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnConsumer:
    delete:
      operationId: deleteMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxUnackedMessagesOnConsumer
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on consumer policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per consumer config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/maxUnackedMessagesOnSubscription:
    delete:
      operationId: deleteMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
    get:
      operationId: getMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
    post:
      operationId: setMaxUnackedMessagesOnSubscription
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              format: int32
              type: integer
        description: Max unacked messages on subscription policies for the specified
          topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set max unacked messages per subscription config on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/messageTTL:
    delete:
      operationId: removeMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Remove message TTL in seconds for a topic
      tags:
      - persistent topic
    get:
      operationId: getMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                format: int32
                type: integer
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
      summary: Get message TTL in seconds for a topic
      tags:
      - persistent topic
    post:
      operationId: setMessageTTL
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - description: TTL in seconds for the specified namespace
        in: query
        name: messageTTL
        required: true
        schema:
          format: int32
          type: integer
      responses:
        "403":
          content: {}
          description: Not authenticate to perform the request or policy is read only
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, enable the topic level policy
            and retry
        "412":
          content: {}
          description: Invalid message TTL value
      summary: Set message TTL in seconds for a topic
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/offload:
    get:
      operationId: offloadStatus
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OffloadProcessStatus'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
    put:
      operationId: triggerOffload
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Operation is not allowed on the persistent topic
        "409":
          content: {}
          description: Offload already running
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Offload a prefix of a topic to long term storage
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/offloadPolicies:
    delete:
      operationId: removeOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Delete offload policies on a topic.
      tags:
      - persistent topic
    get:
      operationId: getOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
        "500":
          content: {}
          description: Internal server error
      summary: Get offload policies on a topic.
      tags:
      - persistent topic
    post:
      operationId: setOffloadPolicies
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/OffloadPolicies'
        description: Offload policies for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant or cluster or namespace or topic doesn't exist
      summary: Set offload policies on a topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/partitioned-stats:
    get:
      operationId: getPartitionedStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Get per partition stats
        in: query
        name: perPartition
        schema:
          default: true
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the partitioned topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/partitions:
    delete:
      description: It will also delete all the partitions of the topic if it exists.
      operationId: deletePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Stop all producer/consumer/replicator and delete topic forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Delete the topic's schema storage
        in: query
        name: deleteSchema
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Partitioned topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Delete a partitioned topic.
      tags:
      - persistent topic
    get:
      operationId: getPartitionedMetadata
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is check configuration required to automatically create topic
        in: query
        name: checkAllowAutoCreation
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PartitionedTopicMetadata'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Get partitioned topic metadata.
      tags:
      - persistent topic
    post:
      description: It only increments partitions of existing non-global partitioned-topic
      operationId: updatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: updateLocalTopicOnly
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to adminisActions to be grantedtrate
            resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic does not exist
        "412":
          content: {}
          description: Partitioned topic name is invalid
        "500":
          content: {}
          description: Internal server error
      summary: Increment partitions of an existing partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
    put:
      description: It needs to be called before creating a producer on a partitioned
        topic.
      operationId: createPartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              default: 0
              format: int32
              type: integer
        description: The number of partitions for the topic
        required: true
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Tenant does not exist
        "406":
          content: {}
          description: The number of partitions should be more than 0 and less than
            or equal to maxNumPartitionsPerPartitionedTopic
        "409":
          content: {}
          description: Partitioned topic already exist
        "412":
          content: {}
          description: 'Failed Reason : Name is invalid or Namespace does not have
            any clusters configured'
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a partitioned topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/permissions:
    get:
      description: Retrieve the effective permissions for a topic. These permissions
        are defined by the permissions set at thenamespace level combined (union)
        with any eventual specific permission set on the topic.
      operationId: getPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  properties: {}
                  type: object
                type: object
          description: successful operation
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Get permissions on a topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/permissions/{role}:
    delete:
      description: Revoke permissions to a role on a single topic. If the permission
        was not set at the topiclevel, but rather at the namespace level, this operation
        will return an error (HTTP status code 412).
      operationId: revokePermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "412":
          content: {}
          description: Permissions are not set at the topic level
        "500":
          content: {}
          description: Internal server error
      summary: Revoke permissions on a topic.
      tags:
      - persistent topic
    post:
      operationId: grantPermissionsOnTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Client role to which grant permissions
        in: path
        name: role
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                type: string
              type: array
        description: Actions to be granted (produce,functions,consume)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: tenant/namespace/topic doesn't exit
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
      summary: Grant a new permission to a role on a single topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/persistence:
    delete:
      operationId: removePersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove configuration of persistence policies for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get configuration of persistence policies for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setPersistence
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PersistencePolicies'
        description: Bookkeeper persistence policies for specified topic
        required: false
      responses:
        "400":
          content: {}
          description: Invalid persistence policies
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set configuration of persistence policies for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/publishRate:
    delete:
      operationId: removePublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove message publish rate configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get publish rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setPublishRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/PublishRate'
        description: Dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set message publish rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/retention:
    delete:
      operationId: removeRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Remove retention configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get retention configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setRetention
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/RetentionPolicies'
        description: Retention policies for the specified namespace
        required: false
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, to enable the topic level policy
            and retry
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Retention Quota must exceed backlog quota
      summary: Set retention configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/stats:
    get:
      operationId: getStats
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is return precise backlog or imprecise backlog
        in: query
        name: getPreciseBacklog
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TopicStats'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the stats for the topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscribeRate:
    delete:
      operationId: removeSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscribe rate configuration for specified topic.
      tags:
      - persistent topic
    get:
      operationId: getSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscribe rate configuration for specified topic.
      tags:
      - persistent topic
    post:
      operationId: setSubscribeRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SubscribeRate'
        description: Subscribe rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscribe rate configuration for specified topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}:
    delete:
      description: The subscription cannot be deleted if delete is not forcefully
        and there are any active consumers attached to it. Force delete ignores connected
        consumers and deletes subscription by explicitly closing them.
      operationId: deleteSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be deleted
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Disconnect and close all consumers and delete subscription forcefully
        in: query
        name: force
        schema:
          default: false
          type: boolean
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Subscription has active consumers
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Delete a subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/expireMessages/{expireTimeInSeconds}:
    post:
      operationId: expireTopicMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to be Expiry messages on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Expires beyond the specified number of seconds
        in: path
        name: expireTimeInSeconds
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Expiry messages on a non-persistent topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Expiry messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/position/{messagePosition}:
    get:
      operationId: peekNthMessage
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscribed message expired
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages (default 1)
        in: path
        name: messagePosition
        required: true
        schema:
          default: 1
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic, subscription or the message position does not exist
        "405":
          content: {}
          description: Skipping messages on a non-persistent topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Peek nth message on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursorOnPosition
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResetCursorData'
        description: messageId to reset back to (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "412":
          content: {}
          description: Unable to find position for position specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to given position.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/resetcursor/{timestamp}:
    post:
      description: It fence cursor and disconnects all active consumers before reseting
        cursor.
      operationId: resetCursor
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to reset position on
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: time in minutes to reset back to (or minutes, hours,days,weeks
          eg:100m, 3h, 2d, 5w)
        in: path
        name: timestamp
        required: true
        schema:
          format: int64
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Method Not Allowed
        "412":
          content: {}
          description: Failed to reset cursor on subscription or Unable to find position
            for timestamp specified
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Reset subscription to message position closest to absolute timestamp
        (in ms).
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip/{numMessages}:
    post:
      operationId: skipMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: The number of messages to skip
        in: path
        name: numMessages
        required: true
        schema:
          default: 0
          format: int32
          type: integer
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Skipping messages on a partitioned topic is not allowed
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skipping messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subName}/skip_all:
    post:
      description: Completely clears the backlog on the subscription.
      operationId: skipAllMessages
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Name of subscription
        in: path
        name: subName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic or subscription does not exist
        "405":
          content: {}
          description: Operation not allowed on non-persistent topic
        "412":
          content: {}
          description: Can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Skip all messages on a topic subscription.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/subscription/{subscriptionName}:
    put:
      description: Creates a subscription on the topic at the specified message id
      operationId: createSubscription
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Subscription to create position on
        in: path
        name: subscriptionName
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      - description: Is replicated required to perform this operation
        in: query
        name: replicated
        schema:
          type: boolean
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MessageIdImpl'
        description: messageId where to create the subscription. It can be 'latest',
          'earliest' or (ledgerId:entryId)
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "400":
          content: {}
          description: Create subscription on non persistent topic is not supported
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic/Subscription does not exist
        "405":
          content: {}
          description: Not supported for partitioned topics
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Create a subscription on the topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: messageId
  /persistent/{tenant}/{namespace}/{topic}/subscriptionDispatchRate:
    delete:
      operationId: removeSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
    get:
      operationId: getSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Get subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
    post:
      operationId: setSubscriptionDispatchRate
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DispatchRate'
        description: Subscription message dispatch rate for the specified topic
        required: false
      responses:
        "403":
          content: {}
          description: Topic does not exist
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Topic level policy is disabled, please enable the topic level
            policy and retry
        "409":
          content: {}
          description: Concurrent modification
      summary: Set subscription message dispatch rate configuration for specified
        topic.
      tags:
      - persistent topic
      x-codegen-request-body-name: body
  /persistent/{tenant}/{namespace}/{topic}/subscriptions:
    get:
      operationId: getSubscriptions
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Get the list of persistent subscriptions for a given topic.
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/terminate:
    post:
      operationId: terminate
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageId'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate a persistent topic. A topic that is terminated will not accept
        any more messages to be published and will let consumer to drain existing
        messages in backlog
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/terminate/partitions:
    post:
      operationId: terminatePartitionedTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
            orsubscriber is not authorized to access this operation
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "405":
          content: {}
          description: Termination of a partitioned topic is not allowed
        "412":
          content: {}
          description: Topic name is not valid
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Terminate all partitioned topic. A topic that is terminated will not
        accept any more messages to be published and will let consumer to drain existing
        messages in backlog
      tags:
      - persistent topic
  /persistent/{tenant}/{namespace}/{topic}/unload:
    put:
      operationId: unloadTopic
      parameters:
      - description: Specify the tenant
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Specify the namespace
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Specify topic name
        in: path
        name: topic
        required: true
        schema:
          type: string
      - description: Is authentication required to perform this operation
        in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "401":
          content: {}
          description: Don't have permission to administrate resources on this tenant
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Topic does not exist
        "409":
          content: {}
          description: Concurrent modification
        "412":
          content: {}
          description: Topic name is not valid or can't find owner for topic
        "500":
          content: {}
          description: Internal server error
        "503":
          content: {}
          description: Failed to validate global cluster configuration
      summary: Unload a topic
      tags:
      - persistent topic
  /resource-quotas:
    get:
      operationId: getDefaultResourceQuota
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Get the default quota
      tags:
      - resource-quotas
    post:
      operationId: setDefaultResourceQuota
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        description: Default resource quota
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
                uniqueItems: true
          description: successful operation
        "403":
          content: {}
          description: Don't have admin permission
      summary: Set the default quota
      tags:
      - resource-quotas
      x-codegen-request-body-name: body
  /resource-quotas/{tenant}/{namespace}/{bundle}:
    delete:
      operationId: removeNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Concurrent modification
      summary: Remove resource quota for a namespace.
      tags:
      - resource-quotas
    get:
      operationId: getNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceQuota'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "404":
          content: {}
          description: Namespace does not exist
      summary: Get resource quota of a namespace bundle.
      tags:
      - resource-quotas
    post:
      operationId: setNamespaceBundleResourceQuota
      parameters:
      - description: Tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      - description: Namespace name within the specified tenant
        in: path
        name: namespace
        required: true
        schema:
          type: string
      - description: Namespace bundle range
        in: path
        name: bundle
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceQuota'
        description: Resource quota for the specified namespace
        required: false
      responses:
        "307":
          content: {}
          description: Current broker doesn't serve the namespace
        "403":
          content: {}
          description: Don't have admin permission
        "409":
          content: {}
          description: Concurrent modification
      summary: Set resource quota on a namespace.
      tags:
      - resource-quotas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/compatibility:
    post:
      operationId: testCompatibility
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IsCompatibilityResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: test the schema compatibility
      tags:
      - schemas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema:
    delete:
      operationId: deleteSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Delete the schema of a topic
      tags:
      - schemas
    get:
      operationId: getSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the schema of a topic
      tags:
      - schemas
    post:
      operationId: postSchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "409":
          content: {}
          description: Incompatible schema
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "422":
          content: {}
          description: Invalid schema data
        "500":
          content: {}
          description: Internal Server Error
      summary: Update the schema of a topic
      tags:
      - schemas
      x-codegen-request-body-name: body
  /schemas/{tenant}/{namespace}/{topic}/schema/{version}:
    get:
      operationId: getSchemaVersion
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: path
        name: version
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the schema of a topic at a given version
      tags:
      - schemas
  /schemas/{tenant}/{namespace}/{topic}/schemas:
    get:
      operationId: getAllSchemas
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllVersionsSchemaResponse'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist; or Schema is not
            found for this topic
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "500":
          content: {}
          description: Internal Server Error
      summary: Get the all schemas of a topic
      tags:
      - schemas
  /schemas/{tenant}/{namespace}/{topic}/version:
    post:
      operationId: getVersionBySchema
      parameters:
      - in: path
        name: tenant
        required: true
        schema:
          type: string
      - in: path
        name: namespace
        required: true
        schema:
          type: string
      - in: path
        name: topic
        required: true
        schema:
          type: string
      - in: query
        name: authoritative
        schema:
          default: false
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostSchemaPayload'
        description: A JSON value presenting a schema playload. An example of the
          expected schema can be found down here.
        required: false
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LongSchemaVersion'
          description: successful operation
        "307":
          content: {}
          description: Current broker doesn't serve the namespace of this topic
        "401":
          content: {}
          description: Client is not authorized or Don't have admin permission
        "403":
          content: {}
          description: Client is not authenticated
        "404":
          content: {}
          description: Tenant or Namespace or Topic doesn't exist
        "412":
          content: {}
          description: Failed to find the ownership for the topic
        "422":
          content: {}
          description: Invalid schema data
        "500":
          content: {}
          description: Internal Server Error
      summary: get the version of the schema
      tags:
      - schemas
      x-codegen-request-body-name: body
  /tenants:
    get:
      operationId: getTenants
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  type: string
                type: array
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant doesn't exist
      summary: Get the list of existing tenants.
      tags:
      - tenants
  /tenants/{tenant}:
    delete:
      operationId: deleteTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: The tenant still has active namespaces
      summary: Delete a tenant and all namespaces and topics under it.
      tags:
      - tenants
    get:
      operationId: getTenantAdmin
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TenantInfo'
          description: successful operation
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
      summary: Get the admin configuration for a given tenant.
      tags:
      - tenants
    post:
      description: This operation requires Pulsar super-user privileges.
      operationId: updateTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "404":
          content: {}
          description: Tenant does not exist
        "409":
          content: {}
          description: Tenant already exists
        "412":
          content: {}
          description: Clusters do not exist
      summary: Update the admins for a tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
    put:
      description: This operation requires Pulsar super-user privileges.
      operationId: createTenant
      parameters:
      - description: The tenant name
        in: path
        name: tenant
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TenantInfo'
        description: TenantInfo
        required: false
      responses:
        "403":
          content: {}
          description: The requester doesn't have admin permissions
        "409":
          content: {}
          description: Tenant already exists
        "412":
          content: {}
          description: Clusters do not exist
      summary: Create a new tenant.
      tags:
      - tenants
      x-codegen-request-body-name: body
components:
  schemas:
    AllocatorStats:
      example:
        numDirectArenas: 1
        normalCacheSize: 6
        smallCacheSize: 6
        heapArenas:
        - numActiveNormalAllocations: 9
          numDeallocations: 1
          smallSubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          tinySubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          numActiveTinyAllocations: 2
          numActiveAllocations: 2
          chunkLists:
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          numHugeDeallocations: 1
          numActiveSmallAllocations: 3
          numAllocations: 4
          numTinySubpages: 6
          numSmallAllocations: 1
          numTinyDeallocations: 9
          numActiveHugeAllocations: 7
          numNormalDeallocations: 7
          numTinyAllocations: 9
          numNormalAllocations: 6
          numSmallSubpages: 5
          numHugeAllocations: 1
          numChunkLists: 7
          numSmallDeallocations: 4
        - numActiveNormalAllocations: 9
          numDeallocations: 1
          smallSubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          tinySubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          numActiveTinyAllocations: 2
          numActiveAllocations: 2
          chunkLists:
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          numHugeDeallocations: 1
          numActiveSmallAllocations: 3
          numAllocations: 4
          numTinySubpages: 6
          numSmallAllocations: 1
          numTinyDeallocations: 9
          numActiveHugeAllocations: 7
          numNormalDeallocations: 7
          numTinyAllocations: 9
          numNormalAllocations: 6
          numSmallSubpages: 5
          numHugeAllocations: 1
          numChunkLists: 7
          numSmallDeallocations: 4
        numThreadLocalCaches: 6
        tinyCacheSize: 5
        directArenas:
        - numActiveNormalAllocations: 9
          numDeallocations: 1
          smallSubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          tinySubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          numActiveTinyAllocations: 2
          numActiveAllocations: 2
          chunkLists:
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          numHugeDeallocations: 1
          numActiveSmallAllocations: 3
          numAllocations: 4
          numTinySubpages: 6
          numSmallAllocations: 1
          numTinyDeallocations: 9
          numActiveHugeAllocations: 7
          numNormalDeallocations: 7
          numTinyAllocations: 9
          numNormalAllocations: 6
          numSmallSubpages: 5
          numHugeAllocations: 1
          numChunkLists: 7
          numSmallDeallocations: 4
        - numActiveNormalAllocations: 9
          numDeallocations: 1
          smallSubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          tinySubpages:
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          - numAvailable: 6
            elementSize: 8
            pageSize: 3
            maxNumElements: 9
          numActiveTinyAllocations: 2
          numActiveAllocations: 2
          chunkLists:
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          - chunks:
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            - chunkSize: 0
              usage: 1
              freeBytes: 6
            maxUsage: 5
            minUsage: 5
          numHugeDeallocations: 1
          numActiveSmallAllocations: 3
          numAllocations: 4
          numTinySubpages: 6
          numSmallAllocations: 1
          numTinyDeallocations: 9
          numActiveHugeAllocations: 7
          numNormalDeallocations: 7
          numTinyAllocations: 9
          numNormalAllocations: 6
          numSmallSubpages: 5
          numHugeAllocations: 1
          numChunkLists: 7
          numSmallDeallocations: 4
        numHeapArenas: 2
      properties:
        directArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
        heapArenas:
          items:
            $ref: '#/components/schemas/PoolArenaStats'
          type: array
        normalCacheSize:
          format: int32
          type: integer
        numDirectArenas:
          format: int32
          type: integer
        numHeapArenas:
          format: int32
          type: integer
        numThreadLocalCaches:
          format: int32
          type: integer
        smallCacheSize:
          format: int32
          type: integer
        tinyCacheSize:
          format: int32
          type: integer
      type: object
    AuthPolicies:
      example:
        subscription_auth_roles:
          key:
          - subscription_auth_roles
          - subscription_auth_roles
        namespace_auth:
          key:
          - produce
          - produce
        destination_auth:
          key:
            key:
            - produce
            - produce
      properties:
        destination_auth:
          additionalProperties:
            additionalProperties:
              items:
                enum:
                - produce
                - consume
                - functions
                - sources
                - sinks
                type: string
              type: array
              uniqueItems: true
            type: object
          type: object
        namespace_auth:
          additionalProperties:
            items:
              enum:
              - produce
              - consume
              - functions
              - sources
              - sinks
              type: string
            type: array
            uniqueItems: true
          type: object
        subscription_auth_roles:
          additionalProperties:
            items:
              type: string
            type: array
            uniqueItems: true
          type: object
      type: object
    AutoFailoverPolicyData:
      description: The auto failover policy configuration data
      example:
        policy_type: min_available
        parameters: |
          {
            "min_limit": 3,
            "usage_threshold": 80
          }
      properties:
        parameters:
          additionalProperties:
            type: string
          description: |
            The parameters applied to the auto failover policy specified by `policy_type`.
            The parameters for 'min_available' are :
              - 'min_limit': the limit of minimal number of available brokers in primary group before auto failover
              - 'usage_threshold': the resource usage threshold. If the usage of a broker is beyond this value, it would be marked as unavailable
          example: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
          type: object
        policy_type:
          description: The auto failover policy type
          enum:
          - min_available
          type: string
      type: object
    AutoSubscriptionCreationOverride:
      example:
        allowAutoSubscriptionCreation: true
      properties:
        allowAutoSubscriptionCreation:
          type: boolean
      type: object
    AutoTopicCreationOverride:
      example:
        defaultNumPartitions: 0
        allowAutoTopicCreation: true
        topicType: topicType
      properties:
        allowAutoTopicCreation:
          type: boolean
        defaultNumPartitions:
          format: int32
          type: integer
        topicType:
          type: string
      type: object
    BacklogQuota:
      example:
        limit: 6
        policy: producer_request_hold
      properties:
        limit:
          format: int64
          type: integer
        policy:
          enum:
          - producer_request_hold
          - producer_exception
          - consumer_backlog_eviction
          type: string
      type: object
    BookieAffinityGroupData:
      example:
        bookkeeperAffinityGroupSecondary: bookkeeperAffinityGroupSecondary
        bookkeeperAffinityGroupPrimary: bookkeeperAffinityGroupPrimary
      properties:
        bookkeeperAffinityGroupPrimary:
          type: string
        bookkeeperAffinityGroupSecondary:
          type: string
      type: object
    BookieInfo:
      example:
        hostname: hostname
        rack: rack
      properties:
        hostname:
          type: string
        rack:
          type: string
      type: object
    BrokerNamespaceIsolationData:
      description: The namespace isolation data for a given broker
      example:
        policyName: my-policy
        isPrimary: false
        namespaceRegex:
        - namespaceRegex
        - namespaceRegex
        brokerName: broker1:8080
      properties:
        brokerName:
          description: The broker name
          example: broker1:8080
          type: string
        isPrimary:
          description: Is Primary broker
          example: false
          type: boolean
        namespaceRegex:
          description: The namespace-isolation policies attached to this broker
          items:
            type: string
          type: array
        policyName:
          description: Policy name
          example: my-policy
          type: string
      type: object
    BundlesData:
      example:
        boundaries:
        - boundaries
        - boundaries
        numBundles: 1
      properties:
        boundaries:
          items:
            type: string
          type: array
        numBundles:
          format: int32
          type: integer
      type: object
    ClusterData:
      description: The configuration data for a cluster
      example:
        peerClusterNames:
        - peerClusterNames
        - peerClusterNames
        serviceUrlTls: https://pulsar.example.com:8443
        proxyProtocol: SNI
        serviceUrl: http://pulsar.example.com:8080
        proxyServiceUrl: pulsar+ssl://ats-proxy.example.com:4443 or pulsar://ats-proxy.example.com:4080
        brokerServiceUrlTls: pulsar+ssl://pulsar.example.com:6651
        brokerServiceUrl: pulsar://pulsar.example.com:6650
      properties:
        brokerServiceUrl:
          description: The broker service url (for produce and consume operations)
          example: pulsar://pulsar.example.com:6650
          type: string
        brokerServiceUrlTls:
          description: The secured broker service url (for produce and consume operations)
          example: pulsar+ssl://pulsar.example.com:6651
          type: string
        peerClusterNames:
          description: A set of peer cluster names
          items:
            type: string
          type: array
          uniqueItems: true
        proxyProtocol:
          description: 'protocol to decide type of proxy routing eg: SNI-routing'
          enum:
          - SNI
          example: SNI
          type: string
        proxyServiceUrl:
          description: Proxy-service url when client would like to connect to broker
            via proxy.
          example: pulsar+ssl://ats-proxy.example.com:4443 or pulsar://ats-proxy.example.com:4080
          type: string
        serviceUrl:
          description: The HTTP rest service URL (for admin operations)
          example: http://pulsar.example.com:8080
          type: string
        serviceUrlTls:
          description: The HTTPS rest service URL (for admin operations)
          example: https://pulsar.example.com:8443
          type: string
      type: object
    ConsumerStats:
      example:
        metadata:
          key: metadata
        address: address
        chuckedMessageRate: 1.284659006116532
        avgMessagesPerEntry: 3
        msgRateRedeliver: 6.704019297950036
        clientVersion: clientVersion
        keyHashRanges:
        - keyHashRanges
        - keyHashRanges
        msgOutCounter: 6
        msgThroughputOut: 3.353193347011243
        readPositionWhenJoining: readPositionWhenJoining
        availablePermits: 6
        bytesOutCounter: 6
        connectedSince: connectedSince
        blockedConsumerOnUnackedMsgs: true
        lastAckedTimestamp: 2
        unackedMessages: 3
        consumerName: consumerName
        lastConsumedTimestamp: 6
        msgRateOut: 5.944895607614016
      properties:
        address:
          type: string
        availablePermits:
          format: int32
          type: integer
        avgMessagesPerEntry:
          format: int32
          type: integer
        blockedConsumerOnUnackedMsgs:
          type: boolean
        bytesOutCounter:
          format: int64
          type: integer
        chuckedMessageRate:
          format: double
          type: number
        clientVersion:
          type: string
        connectedSince:
          type: string
        consumerName:
          type: string
        keyHashRanges:
          items:
            type: string
          type: array
        lastAckedTimestamp:
          format: int64
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        metadata:
          additionalProperties:
            type: string
          type: object
        msgOutCounter:
          format: int64
          type: integer
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        readPositionWhenJoining:
          type: string
        unackedMessages:
          format: int32
          type: integer
      type: object
    CursorDetails:
      example:
        cursorLedgerId: 6
        cursorBacklog: 0
      properties:
        cursorBacklog:
          format: int64
          type: integer
        cursorLedgerId:
          format: int64
          type: integer
      type: object
    CursorStats:
      example:
        numberOfEntriesSinceFirstNotAckedMessage: 3
        markDeletePosition: markDeletePosition
        cursorLedgerLastEntry: 7
        pendingReadOps: 2
        totalNonContiguousDeletedMessagesRange: 7
        lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
        readPosition: readPosition
        individuallyDeletedMessages: individuallyDeletedMessages
        waitingReadOp: true
        messagesConsumedCounter: 9
        state: state
        cursorLedger: 2
        properties:
          key: 4
      properties:
        cursorLedger:
          format: int64
          type: integer
        cursorLedgerLastEntry:
          format: int64
          type: integer
        individuallyDeletedMessages:
          type: string
        lastLedgerSwitchTimestamp:
          type: string
        markDeletePosition:
          type: string
        messagesConsumedCounter:
          format: int64
          type: integer
        numberOfEntriesSinceFirstNotAckedMessage:
          format: int64
          type: integer
        pendingReadOps:
          format: int32
          type: integer
        properties:
          additionalProperties:
            format: int64
            type: integer
          type: object
        readPosition:
          type: string
        state:
          type: string
        totalNonContiguousDeletedMessagesRange:
          format: int32
          type: integer
        waitingReadOp:
          type: boolean
      type: object
    DelayedDeliveryPolicies:
      example:
        tickTime: 4
        active: true
      properties:
        active:
          type: boolean
        tickTime:
          format: int64
          type: integer
      type: object
    DeleteSchemaResponse:
      example:
        version: 0
      properties:
        version:
          format: int64
          type: integer
      type: object
    DispatchRate:
      example:
        dispatchThrottlingRateInMsg: 5
        relativeToPublishRate: true
        ratePeriodInSecond: 2
        dispatchThrottlingRateInByte: 5
      properties:
        dispatchThrottlingRateInByte:
          format: int64
          type: integer
        dispatchThrottlingRateInMsg:
          format: int32
          type: integer
        ratePeriodInSecond:
          format: int32
          type: integer
        relativeToPublishRate:
          type: boolean
      type: object
    FailureDomain:
      description: The data of a failure domain configuration in a cluster
      example:
        brokers: '[ ''broker-1'', ''broker-2'' ]'
      properties:
        brokers:
          description: The collection of brokers in the same failure domain
          example: '[ ''broker-1'', ''broker-2'' ]'
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    GetAllVersionsSchemaResponse:
      example:
        getSchemaResponses:
        - data: data
          type: NONE
          version: 6
          properties:
            key: properties
          timestamp: 0
        - data: data
          type: NONE
          version: 6
          properties:
            key: properties
          timestamp: 0
      properties:
        getSchemaResponses:
          items:
            $ref: '#/components/schemas/GetSchemaResponse'
          type: array
      type: object
    GetSchemaResponse:
      example:
        data: data
        type: NONE
        version: 6
        properties:
          key: properties
        timestamp: 0
      properties:
        data:
          type: string
        properties:
          additionalProperties:
            type: string
          type: object
        timestamp:
          format: int64
          type: integer
        type:
          enum:
          - NONE
          - STRING
          - JSON
          - PROTOBUF
          - AVRO
          - BOOLEAN
          - INT8
          - INT16
          - INT32
          - INT64
          - FLOAT
          - DOUBLE
          - DATE
          - TIME
          - TIMESTAMP
          - KEY_VALUE
          - INSTANT
          - LOCAL_DATE
          - LOCAL_TIME
          - LOCAL_DATE_TIME
          - PROTOBUF_NATIVE
          - BYTES
          - AUTO
          - AUTO_CONSUME
          - AUTO_PUBLISH
          type: string
        version:
          format: int64
          type: integer
      type: object
    InactiveTopicPolicies:
      example:
        inactiveTopicDeleteMode: delete_when_no_subscriptions
        maxInactiveDurationSeconds: 7
        deleteWhileInactive: true
      properties:
        deleteWhileInactive:
          type: boolean
        inactiveTopicDeleteMode:
          enum:
          - delete_when_no_subscriptions
          - delete_when_subscriptions_caught_up
          type: string
        maxInactiveDurationSeconds:
          format: int32
          type: integer
      type: object
    InternalConfigurationData:
      example:
        stateStorageServiceUrl: stateStorageServiceUrl
        bookkeeperMetadataServiceUri: bookkeeperMetadataServiceUri
        ledgersRootPath: ledgersRootPath
        zookeeperServers: zookeeperServers
        configurationStoreServers: configurationStoreServers
      properties:
        bookkeeperMetadataServiceUri:
          type: string
        configurationStoreServers:
          type: string
        ledgersRootPath:
          type: string
        stateStorageServiceUrl:
          type: string
        zookeeperServers:
          type: string
      type: object
    IsCompatibilityResponse:
      example:
        schemaCompatibilityStrategy: schemaCompatibilityStrategy
        compatibility: true
      properties:
        compatibility:
          type: boolean
        schemaCompatibilityStrategy:
          type: string
      type: object
    LedgerDetails:
      example:
        ledgerId: 5
        entries: 1
        size: 5
        timestamp: 2
      properties:
        entries:
          format: int64
          type: integer
        ledgerId:
          format: int64
          type: integer
        size:
          format: int64
          type: integer
        timestamp:
          format: int64
          type: integer
      type: object
    LedgerInfo:
      example:
        ledgerId: 6
        offloaded: true
        entries: 0
        metadata: metadata
        size: 1
      properties:
        entries:
          format: int64
          type: integer
        ledgerId:
          format: int64
          type: integer
        metadata:
          type: string
        offloaded:
          type: boolean
        size:
          format: int64
          type: integer
      type: object
    LoadReport:
      example:
        bundleStats:
          key:
            msgRateIn: 4.145608029883936
            cacheSize: 3
            consumerCount: 2
            topics: 6
            producerCount: 1
            msgThroughputIn: 1.2315135367772556
            msgThroughputOut: 1.0246457001441578
            msgRateOut: 7.386281948385884
        preAllocatedMsgRateIn: 2.8841621266687802
        allocatedMsgRateOut: 2.3021358869347655
        memory:
          usage: 9.301444243932576
          limit: 7.061401241503109
        overLoaded: true
        preAllocatedBandwidthIn: 6.438423552598547
        preAllocatedBandwidthOut: 3.5571952270680973
        preAllocatedMemory: 1.284659006116532
        numTopics: 9
        bandwidthIn:
          usage: 9.301444243932576
          limit: 7.061401241503109
        allocatedCPU: 1.4658129805029452
        bundleLosses:
        - bundleLosses
        - bundleLosses
        preAllocatedCPU: 6.965117697638846
        bandwidthOut:
          usage: 9.301444243932576
          limit: 7.061401241503109
        numProducers: 8
        underLoaded: true
        protocols:
          key: protocols
        allocatedMemory: 5.962133916683182
        systemResourceUsage:
          bandwidthIn:
            usage: 9.301444243932576
            limit: 7.061401241503109
          memory:
            usage: 9.301444243932576
            limit: 7.061401241503109
          bandwidthOut:
            usage: 9.301444243932576
            limit: 7.061401241503109
          cpu:
            usage: 9.301444243932576
            limit: 7.061401241503109
          directMemory:
            usage: 9.301444243932576
            limit: 7.061401241503109
        brokerVersionString: brokerVersionString
        timestamp: 6
        msgRateIn: 1.1730742509559433
        webServiceUrl: webServiceUrl
        loadReportType: loadReportType
        webServiceUrlTls: webServiceUrlTls
        pulsarServiceUrl: pulsarServiceUrl
        cpu:
          usage: 9.301444243932576
          limit: 7.061401241503109
        msgThroughputIn: 5.025004791520295
        msgThroughputOut: 9.965781217890562
        numConsumers: 6
        persistentTopicsEnabled: true
        preAllocatedMsgRateOut: 6.778324963048013
        allocatedMsgRateIn: 5.637376656633329
        pulsarServiceUrlTls: pulsarServiceUrlTls
        allocatedBandwidthIn: 0.8008281904610115
        lastUpdate: 7
        name: name
        nonPersistentTopicsEnabled: true
        bundleGains:
        - bundleGains
        - bundleGains
        allocatedBandwidthOut: 6.027456183070403
        directMemory:
          usage: 9.301444243932576
          limit: 7.061401241503109
        msgRateOut: 4.965218492984954
        numBundles: 9
      properties:
        allocatedBandwidthIn:
          format: double
          type: number
        allocatedBandwidthOut:
          format: double
          type: number
        allocatedCPU:
          format: double
          type: number
        allocatedMemory:
          format: double
          type: number
        allocatedMsgRateIn:
          format: double
          type: number
        allocatedMsgRateOut:
          format: double
          type: number
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        brokerVersionString:
          type: string
        bundleGains:
          items:
            type: string
          type: array
          uniqueItems: true
        bundleLosses:
          items:
            type: string
          type: array
          uniqueItems: true
        bundleStats:
          additionalProperties:
            $ref: '#/components/schemas/NamespaceBundleStats'
          type: object
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
        lastUpdate:
          format: int64
          type: integer
        loadReportType:
          type: string
        memory:
          $ref: '#/components/schemas/ResourceUsage'
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        name:
          type: string
        nonPersistentTopicsEnabled:
          type: boolean
        numBundles:
          format: int32
          type: integer
        numConsumers:
          format: int32
          type: integer
        numProducers:
          format: int32
          type: integer
        numTopics:
          format: int32
          type: integer
        overLoaded:
          type: boolean
        persistentTopicsEnabled:
          type: boolean
        preAllocatedBandwidthIn:
          format: double
          type: number
        preAllocatedBandwidthOut:
          format: double
          type: number
        preAllocatedCPU:
          format: double
          type: number
        preAllocatedMemory:
          format: double
          type: number
        preAllocatedMsgRateIn:
          format: double
          type: number
        preAllocatedMsgRateOut:
          format: double
          type: number
        protocols:
          additionalProperties:
            type: string
          type: object
        pulsarServiceUrl:
          type: string
        pulsarServiceUrlTls:
          type: string
        systemResourceUsage:
          $ref: '#/components/schemas/SystemResourceUsage'
        timestamp:
          format: int64
          type: integer
        underLoaded:
          type: boolean
        webServiceUrl:
          type: string
        webServiceUrlTls:
          type: string
      type: object
    LongRunningProcessStatus:
      example:
        lastError: lastError
        status: NOT_RUN
      properties:
        lastError:
          type: string
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
      type: object
    LongSchemaVersion:
      example:
        version: 0
      properties:
        version:
          format: int64
          type: integer
      type: object
    MessageId:
      type: object
    MessageIdImpl:
      example:
        ledgerId: 6
        partitionIndex: 1
        entryId: 0
      properties:
        entryId:
          format: int64
          type: integer
        ledgerId:
          format: int64
          type: integer
        partitionIndex:
          format: int32
          type: integer
      type: object
    Metrics:
      example:
        metrics:
          key: '{}'
        dimensions:
          key: dimensions
      properties:
        dimensions:
          additionalProperties:
            type: string
          type: object
        metrics:
          additionalProperties:
            properties: {}
            type: object
          type: object
      type: object
    NamespaceBundleStats:
      example:
        msgRateIn: 4.145608029883936
        cacheSize: 3
        consumerCount: 2
        topics: 6
        producerCount: 1
        msgThroughputIn: 1.2315135367772556
        msgThroughputOut: 1.0246457001441578
        msgRateOut: 7.386281948385884
      properties:
        cacheSize:
          format: int64
          type: integer
        consumerCount:
          format: int32
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        producerCount:
          format: int32
          type: integer
        topics:
          format: int64
          type: integer
      type: object
    NamespaceIsolationData:
      description: The data of namespace isolation configuration
      example:
        auto_failover_policy:
          policy_type: min_available
          parameters: |
            {
              "min_limit": 3,
              "usage_threshold": 80
            }
        namespaces:
        - namespaces
        - namespaces
        primary:
        - primary
        - primary
      properties:
        auto_failover_policy:
          $ref: '#/components/schemas/AutoFailoverPolicyData'
        namespaces:
          description: The list of namespaces to apply this namespace isolation data
          items:
            type: string
          type: array
        primary:
          description: The list of secondary brokers for serving the list of namespaces
            in this isolation policy
          items:
            type: string
          type: array
      type: object
    NamespaceOwnershipStatus:
      properties:
        broker_assignment:
          enum:
          - primary
          - secondary
          - shared
          type: string
        is_active:
          type: boolean
        is_controlled:
          type: boolean
      type: object
    NonPersistentPublisherStats:
      properties:
        address:
          type: string
        averageMsgSize:
          format: double
          type: number
        chunkedMessageRate:
          format: double
          type: number
        clientVersion:
          type: string
        connectedSince:
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        msgDropRate:
          format: double
          type: number
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        producerId:
          format: int64
          type: integer
        producerName:
          type: string
      type: object
    NonPersistentReplicatorStats:
      properties:
        connected:
          type: boolean
        inboundConnectedSince:
          type: string
        inboundConnection:
          type: string
        msgDropRate:
          format: double
          type: number
        msgRateExpired:
          format: double
          type: number
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        outboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        replicationBacklog:
          format: int64
          type: integer
        replicationDelayInSeconds:
          format: int64
          type: integer
      type: object
    NonPersistentSubscriptionStats:
      properties:
        activeConsumerName:
          type: string
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        bytesOutCounter:
          format: int64
          type: integer
        chuckedMessageRate:
          format: int32
          type: integer
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        consumersAfterMarkDeletePosition:
          additionalProperties:
            type: string
          type: object
        isDurable:
          type: boolean
        isReplicated:
          type: boolean
        lastAckedTimestamp:
          format: int64
          type: integer
        lastConsumedFlowTimestamp:
          format: int64
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        lastExpireTimestamp:
          format: int64
          type: integer
        msgBacklog:
          format: int64
          type: integer
        msgBacklogNoDelayed:
          format: int64
          type: integer
        msgDelayed:
          format: int64
          type: integer
        msgDropRate:
          format: double
          type: number
        msgOutCounter:
          format: int64
          type: integer
        msgRateExpired:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        type:
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
          type: string
        unackedMessages:
          format: int64
          type: integer
      type: object
    NonPersistentTopicStats:
      properties:
        averageMsgSize:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        bytesInCounter:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        deduplicationStatus:
          type: string
        msgChunkPublished:
          type: boolean
        msgDropRate:
          format: double
          type: number
        msgInCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        publishers:
          items:
            $ref: '#/components/schemas/NonPersistentPublisherStats'
          type: array
        replication:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentReplicatorStats'
          type: object
        storageSize:
          format: int64
          type: integer
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/NonPersistentSubscriptionStats'
          type: object
      type: object
    OffloadPolicies:
      example:
        managedLedgerOffloadThresholdInBytes: 6
        fileSystemProfilePath: fileSystemProfilePath
        gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
        managedLedgerOffloadPrefetchRounds: 6
        gcsDriver: true
        s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
        gcsManagedLedgerOffloadReadBufferSizeInBytes: 9
        managedLedgerOffloadMaxBlockSizeInBytes: 8
        s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
        gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
        managedLedgerOffloadServiceEndpoint: managedLedgerOffloadServiceEndpoint
        managedLedgerOffloadReadBufferSizeInBytes: 3
        fileSystemDriver: true
        fileSystemURI: fileSystemURI
        gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
        s3ManagedLedgerOffloadMaxBlockSizeInBytes: 1
        s3ManagedLedgerOffloadReadBufferSizeInBytes: 2
        managedLedgerOffloadMaxThreads: 9
        offloadersDirectory: offloadersDirectory
        s3Driver: true
        gcsManagedLedgerOffloadMaxBlockSizeInBytes: 9
        managedLedgerOffloadDeletionLagInMillis: 6
        s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
        managedLedgerOffloadRegion: managedLedgerOffloadRegion
        managedLedgerOffloadDriver: managedLedgerOffloadDriver
        managedLedgerOffloadBucket: managedLedgerOffloadBucket
        s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
      properties:
        fileSystemDriver:
          type: boolean
        fileSystemProfilePath:
          type: string
        fileSystemURI:
          type: string
        gcsDriver:
          type: boolean
        gcsManagedLedgerOffloadBucket:
          type: string
        gcsManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        gcsManagedLedgerOffloadRegion:
          type: string
        gcsManagedLedgerOffloadServiceAccountKeyFile:
          type: string
        managedLedgerOffloadBucket:
          type: string
        managedLedgerOffloadDeletionLagInMillis:
          format: int64
          type: integer
        managedLedgerOffloadDriver:
          type: string
        managedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        managedLedgerOffloadMaxThreads:
          format: int32
          type: integer
        managedLedgerOffloadPrefetchRounds:
          format: int32
          type: integer
        managedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        managedLedgerOffloadRegion:
          type: string
        managedLedgerOffloadServiceEndpoint:
          type: string
        managedLedgerOffloadThresholdInBytes:
          format: int64
          type: integer
        offloadersDirectory:
          type: string
        s3Driver:
          type: boolean
        s3ManagedLedgerOffloadBucket:
          type: string
        s3ManagedLedgerOffloadMaxBlockSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadReadBufferSizeInBytes:
          format: int32
          type: integer
        s3ManagedLedgerOffloadRegion:
          type: string
        s3ManagedLedgerOffloadRole:
          type: string
        s3ManagedLedgerOffloadRoleSessionName:
          type: string
        s3ManagedLedgerOffloadServiceEndpoint:
          type: string
      type: object
    OffloadProcessStatus:
      example:
        lastError: lastError
        firstUnoffloadedMessage:
          ledgerId: 6
          partitionIndex: 1
          entryId: 0
        status: NOT_RUN
      properties:
        firstUnoffloadedMessage:
          $ref: '#/components/schemas/MessageIdImpl'
        lastError:
          type: string
        status:
          enum:
          - NOT_RUN
          - RUNNING
          - SUCCESS
          - ERROR
          type: string
      type: object
    OutputStream:
      type: object
    PartitionedTopicMetadata:
      example:
        partitions: 0
      properties:
        partitions:
          format: int32
          type: integer
      type: object
    PendingBookieOpsStats:
      properties:
        cursorLedgerCloseOp:
          format: int64
          type: integer
        cursorLedgerCreateOp:
          format: int64
          type: integer
        cursorLedgerDeleteOp:
          format: int64
          type: integer
        cursorLedgerOpenOp:
          format: int64
          type: integer
        dataLedgerCloseOp:
          format: int64
          type: integer
        dataLedgerCreateOp:
          format: int64
          type: integer
        dataLedgerDeleteOp:
          format: int64
          type: integer
        dataLedgerOpenOp:
          format: int64
          type: integer
      type: object
    PersistencePolicies:
      example:
        bookkeeperWriteQuorum: 6
        bookkeeperAckQuorum: 6
        bookkeeperEnsemble: 5
        managedLedgerMaxMarkDeleteRate: 3.353193347011243
      properties:
        bookkeeperAckQuorum:
          format: int32
          type: integer
        bookkeeperEnsemble:
          format: int32
          type: integer
        bookkeeperWriteQuorum:
          format: int32
          type: integer
        managedLedgerMaxMarkDeleteRate:
          format: double
          type: number
      type: object
    PersistentOfflineTopicStats:
      example:
        dataLedgerDetails:
        - ledgerId: 5
          entries: 1
          size: 5
          timestamp: 2
        - ledgerId: 5
          entries: 1
          size: 5
          timestamp: 2
        messageBacklog: 7
        statGeneratedAt: 2000-01-23T04:56:07.000+00:00
        storageSize: 9
        totalMessages: 3
        cursorDetails:
          key:
            cursorLedgerId: 6
            cursorBacklog: 0
        topicName: topicName
        brokerName: brokerName
      properties:
        brokerName:
          type: string
        cursorDetails:
          additionalProperties:
            $ref: '#/components/schemas/CursorDetails'
          type: object
        dataLedgerDetails:
          items:
            $ref: '#/components/schemas/LedgerDetails'
          type: array
        messageBacklog:
          format: int64
          type: integer
        statGeneratedAt:
          format: date-time
          type: string
        storageSize:
          format: int64
          type: integer
        topicName:
          type: string
        totalMessages:
          format: int64
          type: integer
      type: object
    PersistentTopicInternalStats:
      example:
        compactedLedger:
          ledgerId: 6
          offloaded: true
          entries: 0
          metadata: metadata
          size: 1
        numberOfEntries: 1
        currentLedgerSize: 5
        ledgers:
        - ledgerId: 6
          offloaded: true
          entries: 0
          metadata: metadata
          size: 1
        - ledgerId: 6
          offloaded: true
          entries: 0
          metadata: metadata
          size: 1
        lastLedgerCreationFailureTimestamp: lastLedgerCreationFailureTimestamp
        currentLedgerEntries: 5
        cursors:
          key:
            numberOfEntriesSinceFirstNotAckedMessage: 3
            markDeletePosition: markDeletePosition
            cursorLedgerLastEntry: 7
            pendingReadOps: 2
            totalNonContiguousDeletedMessagesRange: 7
            lastLedgerSwitchTimestamp: lastLedgerSwitchTimestamp
            readPosition: readPosition
            individuallyDeletedMessages: individuallyDeletedMessages
            waitingReadOp: true
            messagesConsumedCounter: 9
            state: state
            cursorLedger: 2
            properties:
              key: 4
        totalSize: 6
        lastConfirmedEntry: lastConfirmedEntry
        lastLedgerCreatedTimestamp: lastLedgerCreatedTimestamp
        entriesAddedCounter: 1
        state: state
        waitingCursorsCount: 7
        pendingAddEntriesCount: 1
      properties:
        compactedLedger:
          $ref: '#/components/schemas/LedgerInfo'
        currentLedgerEntries:
          format: int64
          type: integer
        currentLedgerSize:
          format: int64
          type: integer
        cursors:
          additionalProperties:
            $ref: '#/components/schemas/CursorStats'
          type: object
        entriesAddedCounter:
          format: int64
          type: integer
        lastConfirmedEntry:
          type: string
        lastLedgerCreatedTimestamp:
          type: string
        lastLedgerCreationFailureTimestamp:
          type: string
        ledgers:
          items:
            $ref: '#/components/schemas/LedgerInfo'
          type: array
        numberOfEntries:
          format: int64
          type: integer
        pendingAddEntriesCount:
          format: int32
          type: integer
        state:
          type: string
        totalSize:
          format: int64
          type: integer
        waitingCursorsCount:
          format: int32
          type: integer
      type: object
    Policies:
      example:
        backlog_quota_map:
          key:
            limit: 6
            policy: producer_request_hold
        message_ttl_in_seconds: 4
        clusterSubscribeRate:
          key:
            ratePeriodInSecond: 7
            subscribeThrottlingRatePerConsumer: 9
        max_consumers_per_topic: 1
        autoTopicCreationOverride:
          defaultNumPartitions: 0
          allowAutoTopicCreation: true
          topicType: topicType
        publishMaxMessageRate:
          key:
            publishThrottlingRateInMsg: 7
            publishThrottlingRateInByte: 3
        replicatorDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        subscription_expiration_time_minutes: 6
        auth_policies:
          subscription_auth_roles:
            key:
            - subscription_auth_roles
            - subscription_auth_roles
          namespace_auth:
            key:
            - produce
            - produce
          destination_auth:
            key:
              key:
              - produce
              - produce
        max_consumers_per_subscription: 1
        subscription_auth_mode: None
        is_allow_auto_update_schema: true
        max_producers_per_topic: 6
        schema_auto_update_compatibility_strategy: AutoUpdateDisabled
        latency_stats_sample_rate:
          key: 1
        schema_validation_enforced: true
        inactive_topic_policies:
          inactiveTopicDeleteMode: delete_when_no_subscriptions
          maxInactiveDurationSeconds: 7
          deleteWhileInactive: true
        offload_policies:
          managedLedgerOffloadThresholdInBytes: 6
          fileSystemProfilePath: fileSystemProfilePath
          gcsManagedLedgerOffloadRegion: gcsManagedLedgerOffloadRegion
          managedLedgerOffloadPrefetchRounds: 6
          gcsDriver: true
          s3ManagedLedgerOffloadRoleSessionName: s3ManagedLedgerOffloadRoleSessionName
          gcsManagedLedgerOffloadReadBufferSizeInBytes: 9
          managedLedgerOffloadMaxBlockSizeInBytes: 8
          s3ManagedLedgerOffloadBucket: s3ManagedLedgerOffloadBucket
          s3ManagedLedgerOffloadRegion: s3ManagedLedgerOffloadRegion
          gcsManagedLedgerOffloadServiceAccountKeyFile: gcsManagedLedgerOffloadServiceAccountKeyFile
          managedLedgerOffloadServiceEndpoint: managedLedgerOffloadServiceEndpoint
          managedLedgerOffloadReadBufferSizeInBytes: 3
          fileSystemDriver: true
          fileSystemURI: fileSystemURI
          gcsManagedLedgerOffloadBucket: gcsManagedLedgerOffloadBucket
          s3ManagedLedgerOffloadMaxBlockSizeInBytes: 1
          s3ManagedLedgerOffloadReadBufferSizeInBytes: 2
          managedLedgerOffloadMaxThreads: 9
          offloadersDirectory: offloadersDirectory
          s3Driver: true
          gcsManagedLedgerOffloadMaxBlockSizeInBytes: 9
          managedLedgerOffloadDeletionLagInMillis: 6
          s3ManagedLedgerOffloadRole: s3ManagedLedgerOffloadRole
          managedLedgerOffloadRegion: managedLedgerOffloadRegion
          managedLedgerOffloadDriver: managedLedgerOffloadDriver
          managedLedgerOffloadBucket: managedLedgerOffloadBucket
          s3ManagedLedgerOffloadServiceEndpoint: s3ManagedLedgerOffloadServiceEndpoint
        max_unacked_messages_per_consumer: 7
        offload_threshold: 6
        compaction_threshold: 3
        autoSubscriptionCreationOverride:
          allowAutoSubscriptionCreation: true
        subscriptionDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        deduplicationSnapshotIntervalSeconds: 2
        clusterDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        schema_compatibility_strategy: UNDEFINED
        deduplicationEnabled: true
        encryption_required: true
        max_unacked_messages_per_subscription: 1
        offload_deletion_lag_ms: 5
        replication_clusters:
        - replication_clusters
        - replication_clusters
        retention_policies:
          retentionSizeInMB: 0
          retentionTimeInMinutes: 7
        deleted: true
        topicDispatchRate:
          key:
            dispatchThrottlingRateInMsg: 5
            relativeToPublishRate: true
            ratePeriodInSecond: 2
            dispatchThrottlingRateInByte: 5
        bundles:
          boundaries:
          - boundaries
          - boundaries
          numBundles: 1
        persistence:
          bookkeeperWriteQuorum: 6
          bookkeeperAckQuorum: 6
          bookkeeperEnsemble: 5
          managedLedgerMaxMarkDeleteRate: 3.353193347011243
        delayed_delivery_policies:
          tickTime: 4
          active: true
      properties:
        auth_policies:
          $ref: '#/components/schemas/AuthPolicies'
        autoSubscriptionCreationOverride:
          $ref: '#/components/schemas/AutoSubscriptionCreationOverride'
        autoTopicCreationOverride:
          $ref: '#/components/schemas/AutoTopicCreationOverride'
        backlog_quota_map:
          additionalProperties:
            $ref: '#/components/schemas/BacklogQuota'
          type: object
        bundles:
          $ref: '#/components/schemas/BundlesData'
        clusterDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        clusterSubscribeRate:
          additionalProperties:
            $ref: '#/components/schemas/SubscribeRate'
          type: object
        compaction_threshold:
          format: int64
          type: integer
        deduplicationEnabled:
          type: boolean
        deduplicationSnapshotIntervalSeconds:
          format: int32
          type: integer
        delayed_delivery_policies:
          $ref: '#/components/schemas/DelayedDeliveryPolicies'
        deleted:
          type: boolean
        encryption_required:
          type: boolean
        inactive_topic_policies:
          $ref: '#/components/schemas/InactiveTopicPolicies'
        is_allow_auto_update_schema:
          type: boolean
        latency_stats_sample_rate:
          additionalProperties:
            format: int32
            type: integer
          type: object
        max_consumers_per_subscription:
          format: int32
          type: integer
        max_consumers_per_topic:
          format: int32
          type: integer
        max_producers_per_topic:
          format: int32
          type: integer
        max_unacked_messages_per_consumer:
          format: int32
          type: integer
        max_unacked_messages_per_subscription:
          format: int32
          type: integer
        message_ttl_in_seconds:
          format: int32
          type: integer
        offload_deletion_lag_ms:
          format: int64
          type: integer
        offload_policies:
          $ref: '#/components/schemas/OffloadPolicies'
        offload_threshold:
          format: int64
          type: integer
        persistence:
          $ref: '#/components/schemas/PersistencePolicies'
        publishMaxMessageRate:
          additionalProperties:
            $ref: '#/components/schemas/PublishRate'
          type: object
        replication_clusters:
          items:
            type: string
          type: array
          uniqueItems: true
        replicatorDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        retention_policies:
          $ref: '#/components/schemas/RetentionPolicies'
        schema_auto_update_compatibility_strategy:
          enum:
          - AutoUpdateDisabled
          - Backward
          - Forward
          - Full
          - AlwaysCompatible
          - BackwardTransitive
          - ForwardTransitive
          - FullTransitive
          type: string
        schema_compatibility_strategy:
          enum:
          - UNDEFINED
          - ALWAYS_INCOMPATIBLE
          - ALWAYS_COMPATIBLE
          - BACKWARD
          - FORWARD
          - FULL
          - BACKWARD_TRANSITIVE
          - FORWARD_TRANSITIVE
          - FULL_TRANSITIVE
          type: string
        schema_validation_enforced:
          type: boolean
        subscriptionDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
        subscription_auth_mode:
          enum:
          - None
          - Prefix
          type: string
        subscription_expiration_time_minutes:
          format: int32
          type: integer
        topicDispatchRate:
          additionalProperties:
            $ref: '#/components/schemas/DispatchRate'
          type: object
      type: object
    PoolArenaStats:
      example:
        numActiveNormalAllocations: 9
        numDeallocations: 1
        smallSubpages:
        - numAvailable: 6
          elementSize: 8
          pageSize: 3
          maxNumElements: 9
        - numAvailable: 6
          elementSize: 8
          pageSize: 3
          maxNumElements: 9
        tinySubpages:
        - numAvailable: 6
          elementSize: 8
          pageSize: 3
          maxNumElements: 9
        - numAvailable: 6
          elementSize: 8
          pageSize: 3
          maxNumElements: 9
        numActiveTinyAllocations: 2
        numActiveAllocations: 2
        chunkLists:
        - chunks:
          - chunkSize: 0
            usage: 1
            freeBytes: 6
          - chunkSize: 0
            usage: 1
            freeBytes: 6
          maxUsage: 5
          minUsage: 5
        - chunks:
          - chunkSize: 0
            usage: 1
            freeBytes: 6
          - chunkSize: 0
            usage: 1
            freeBytes: 6
          maxUsage: 5
          minUsage: 5
        numHugeDeallocations: 1
        numActiveSmallAllocations: 3
        numAllocations: 4
        numTinySubpages: 6
        numSmallAllocations: 1
        numTinyDeallocations: 9
        numActiveHugeAllocations: 7
        numNormalDeallocations: 7
        numTinyAllocations: 9
        numNormalAllocations: 6
        numSmallSubpages: 5
        numHugeAllocations: 1
        numChunkLists: 7
        numSmallDeallocations: 4
      properties:
        chunkLists:
          items:
            $ref: '#/components/schemas/PoolChunkListStats'
          type: array
        numActiveAllocations:
          format: int64
          type: integer
        numActiveHugeAllocations:
          format: int64
          type: integer
        numActiveNormalAllocations:
          format: int64
          type: integer
        numActiveSmallAllocations:
          format: int64
          type: integer
        numActiveTinyAllocations:
          format: int64
          type: integer
        numAllocations:
          format: int64
          type: integer
        numChunkLists:
          format: int32
          type: integer
        numDeallocations:
          format: int64
          type: integer
        numHugeAllocations:
          format: int64
          type: integer
        numHugeDeallocations:
          format: int64
          type: integer
        numNormalAllocations:
          format: int64
          type: integer
        numNormalDeallocations:
          format: int64
          type: integer
        numSmallAllocations:
          format: int64
          type: integer
        numSmallDeallocations:
          format: int64
          type: integer
        numSmallSubpages:
          format: int32
          type: integer
        numTinyAllocations:
          format: int64
          type: integer
        numTinyDeallocations:
          format: int64
          type: integer
        numTinySubpages:
          format: int32
          type: integer
        smallSubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
        tinySubpages:
          items:
            $ref: '#/components/schemas/PoolSubpageStats'
          type: array
      type: object
    PoolChunkListStats:
      example:
        chunks:
        - chunkSize: 0
          usage: 1
          freeBytes: 6
        - chunkSize: 0
          usage: 1
          freeBytes: 6
        maxUsage: 5
        minUsage: 5
      properties:
        chunks:
          items:
            $ref: '#/components/schemas/PoolChunkStats'
          type: array
        maxUsage:
          format: int32
          type: integer
        minUsage:
          format: int32
          type: integer
      type: object
    PoolChunkStats:
      example:
        chunkSize: 0
        usage: 1
        freeBytes: 6
      properties:
        chunkSize:
          format: int32
          type: integer
        freeBytes:
          format: int32
          type: integer
        usage:
          format: int32
          type: integer
      type: object
    PoolSubpageStats:
      example:
        numAvailable: 6
        elementSize: 8
        pageSize: 3
        maxNumElements: 9
      properties:
        elementSize:
          format: int32
          type: integer
        maxNumElements:
          format: int32
          type: integer
        numAvailable:
          format: int32
          type: integer
        pageSize:
          format: int32
          type: integer
      type: object
    PostSchemaPayload:
      example:
        schema: schema
        type: type
        properties:
          key: properties
      properties:
        properties:
          additionalProperties:
            type: string
          type: object
        schema:
          type: string
        type:
          type: string
      type: object
    PostSchemaResponse:
      example:
        version: '{}'
      properties:
        version:
          type: object
      type: object
    PublishRate:
      example:
        publishThrottlingRateInMsg: 7
        publishThrottlingRateInByte: 3
      properties:
        publishThrottlingRateInByte:
          format: int64
          type: integer
        publishThrottlingRateInMsg:
          format: int32
          type: integer
      type: object
    PublisherStats:
      example:
        msgRateIn: 1.2315135367772556
        metadata:
          key: metadata
        address: address
        connectedSince: connectedSince
        producerName: producerName
        averageMsgSize: 4.145608029883936
        producerId: 1
        clientVersion: clientVersion
        chunkedMessageRate: 7.386281948385884
        msgThroughputIn: 1.0246457001441578
      properties:
        address:
          type: string
        averageMsgSize:
          format: double
          type: number
        chunkedMessageRate:
          format: double
          type: number
        clientVersion:
          type: string
        connectedSince:
          type: string
        metadata:
          additionalProperties:
            type: string
          type: object
        msgRateIn:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        producerId:
          format: int64
          type: integer
        producerName:
          type: string
      type: object
    ReplicatorStats:
      example:
        connected: true
        msgRateIn: 7.457744773683766
        replicationDelayInSeconds: 9
        inboundConnection: inboundConnection
        msgRateExpired: 6.84685269835264
        outboundConnectedSince: outboundConnectedSince
        replicationBacklog: 9
        outboundConnection: outboundConnection
        inboundConnectedSince: inboundConnectedSince
        msgThroughputIn: 4.965218492984954
        msgThroughputOut: 5.025004791520295
        msgRateOut: 1.1730742509559433
      properties:
        connected:
          type: boolean
        inboundConnectedSince:
          type: string
        inboundConnection:
          type: string
        msgRateExpired:
          format: double
          type: number
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        outboundConnectedSince:
          type: string
        outboundConnection:
          type: string
        replicationBacklog:
          format: int64
          type: integer
        replicationDelayInSeconds:
          format: int64
          type: integer
      type: object
    ResetCursorData:
      example:
        excluded: true
        ledgerId: 1
        partitionIndex: 5
        batchIndex: 0
        entryId: 6
      properties:
        batchIndex:
          format: int32
          type: integer
        entryId:
          format: int64
          type: integer
        excluded:
          type: boolean
        ledgerId:
          format: int64
          type: integer
        partitionIndex:
          format: int32
          type: integer
      type: object
    ResourceDescription:
      properties:
        resourceUsage:
          additionalProperties:
            $ref: '#/components/schemas/ResourceUsage'
          type: object
        usagePct:
          format: int32
          type: integer
      type: object
    ResourceQuota:
      example:
        msgRateIn: 5.962133916683182
        bandwidthIn: 0.8008281904610115
        memory: 1.4658129805029452
        bandwidthOut: 6.027456183070403
        dynamic: true
        msgRateOut: 5.637376656633329
      properties:
        bandwidthIn:
          format: double
          type: number
        bandwidthOut:
          format: double
          type: number
        dynamic:
          type: boolean
        memory:
          format: double
          type: number
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
      type: object
    ResourceUnit:
      properties:
        availableResource:
          $ref: '#/components/schemas/ResourceDescription'
        resourceId:
          type: string
      type: object
    ResourceUsage:
      example:
        usage: 9.301444243932576
        limit: 7.061401241503109
      properties:
        limit:
          format: double
          type: number
        usage:
          format: double
          type: number
      type: object
    RetentionPolicies:
      example:
        retentionSizeInMB: 0
        retentionTimeInMinutes: 7
      properties:
        retentionSizeInMB:
          format: int64
          type: integer
        retentionTimeInMinutes:
          format: int32
          type: integer
      type: object
    SchemaVersion:
      type: object
    SubscribeRate:
      example:
        ratePeriodInSecond: 7
        subscribeThrottlingRatePerConsumer: 9
      properties:
        ratePeriodInSecond:
          format: int32
          type: integer
        subscribeThrottlingRatePerConsumer:
          format: int32
          type: integer
      type: object
    SubscriptionStats:
      example:
        lastConsumedFlowTimestamp: 0
        activeConsumerName: activeConsumerName
        lastExpireTimestamp: 6
        msgRateExpired: 3.0205796992916243
        chuckedMessageRate: 9
        msgRateRedeliver: 7.04836565559697
        isDurable: true
        msgOutCounter: 7
        type: Exclusive
        msgThroughputOut: 5.533258397034986
        bytesOutCounter: 8
        isReplicated: true
        consumersAfterMarkDeletePosition:
          key: consumersAfterMarkDeletePosition
        lastAckedTimestamp: 7
        consumers:
        - metadata:
            key: metadata
          address: address
          chuckedMessageRate: 1.284659006116532
          avgMessagesPerEntry: 3
          msgRateRedeliver: 6.704019297950036
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgOutCounter: 6
          msgThroughputOut: 3.353193347011243
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 6
          bytesOutCounter: 6
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 2
          unackedMessages: 3
          consumerName: consumerName
          lastConsumedTimestamp: 6
          msgRateOut: 5.944895607614016
        - metadata:
            key: metadata
          address: address
          chuckedMessageRate: 1.284659006116532
          avgMessagesPerEntry: 3
          msgRateRedeliver: 6.704019297950036
          clientVersion: clientVersion
          keyHashRanges:
          - keyHashRanges
          - keyHashRanges
          msgOutCounter: 6
          msgThroughputOut: 3.353193347011243
          readPositionWhenJoining: readPositionWhenJoining
          availablePermits: 6
          bytesOutCounter: 6
          connectedSince: connectedSince
          blockedConsumerOnUnackedMsgs: true
          lastAckedTimestamp: 2
          unackedMessages: 3
          consumerName: consumerName
          lastConsumedTimestamp: 6
          msgRateOut: 5.944895607614016
        blockedSubscriptionOnUnackedMsgs: true
        msgDelayed: 8
        unackedMessages: 3
        msgBacklogNoDelayed: 4
        msgBacklog: 0
        lastConsumedTimestamp: 7
        msgRateOut: 3.0576100241049344
      properties:
        activeConsumerName:
          type: string
        blockedSubscriptionOnUnackedMsgs:
          type: boolean
        bytesOutCounter:
          format: int64
          type: integer
        chuckedMessageRate:
          format: int32
          type: integer
        consumers:
          items:
            $ref: '#/components/schemas/ConsumerStats'
          type: array
        consumersAfterMarkDeletePosition:
          additionalProperties:
            type: string
          type: object
        isDurable:
          type: boolean
        isReplicated:
          type: boolean
        lastAckedTimestamp:
          format: int64
          type: integer
        lastConsumedFlowTimestamp:
          format: int64
          type: integer
        lastConsumedTimestamp:
          format: int64
          type: integer
        lastExpireTimestamp:
          format: int64
          type: integer
        msgBacklog:
          format: int64
          type: integer
        msgBacklogNoDelayed:
          format: int64
          type: integer
        msgDelayed:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        msgRateExpired:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgRateRedeliver:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        type:
          enum:
          - Exclusive
          - Shared
          - Failover
          - Key_Shared
          type: string
        unackedMessages:
          format: int64
          type: integer
      type: object
    SystemResourceUsage:
      example:
        bandwidthIn:
          usage: 9.301444243932576
          limit: 7.061401241503109
        memory:
          usage: 9.301444243932576
          limit: 7.061401241503109
        bandwidthOut:
          usage: 9.301444243932576
          limit: 7.061401241503109
        cpu:
          usage: 9.301444243932576
          limit: 7.061401241503109
        directMemory:
          usage: 9.301444243932576
          limit: 7.061401241503109
      properties:
        bandwidthIn:
          $ref: '#/components/schemas/ResourceUsage'
        bandwidthOut:
          $ref: '#/components/schemas/ResourceUsage'
        cpu:
          $ref: '#/components/schemas/ResourceUsage'
        directMemory:
          $ref: '#/components/schemas/ResourceUsage'
        memory:
          $ref: '#/components/schemas/ResourceUsage'
      type: object
    TenantInfo:
      description: Information of adminRoles and allowedClusters for tenant
      example:
        adminRoles:
        - adminRoles
        - adminRoles
        allowedClusters:
        - allowedClusters
        - allowedClusters
      properties:
        adminRoles:
          description: Comma separated list of auth principal allowed to administrate
            the tenant.
          items:
            type: string
          type: array
          uniqueItems: true
        allowedClusters:
          description: Comma separated allowed clusters.
          items:
            type: string
          type: array
          uniqueItems: true
      type: object
    TopicStats:
      example:
        msgRateIn: 7.061401241503109
        replication:
          key:
            connected: true
            msgRateIn: 7.457744773683766
            replicationDelayInSeconds: 9
            inboundConnection: inboundConnection
            msgRateExpired: 6.84685269835264
            outboundConnectedSince: outboundConnectedSince
            replicationBacklog: 9
            outboundConnection: outboundConnection
            inboundConnectedSince: inboundConnectedSince
            msgThroughputIn: 4.965218492984954
            msgThroughputOut: 5.025004791520295
            msgRateOut: 1.1730742509559433
        subscriptions:
          key:
            lastConsumedFlowTimestamp: 0
            activeConsumerName: activeConsumerName
            lastExpireTimestamp: 6
            msgRateExpired: 3.0205796992916243
            chuckedMessageRate: 9
            msgRateRedeliver: 7.04836565559697
            isDurable: true
            msgOutCounter: 7
            type: Exclusive
            msgThroughputOut: 5.533258397034986
            bytesOutCounter: 8
            isReplicated: true
            consumersAfterMarkDeletePosition:
              key: consumersAfterMarkDeletePosition
            lastAckedTimestamp: 7
            consumers:
            - metadata:
                key: metadata
              address: address
              chuckedMessageRate: 1.284659006116532
              avgMessagesPerEntry: 3
              msgRateRedeliver: 6.704019297950036
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgOutCounter: 6
              msgThroughputOut: 3.353193347011243
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 6
              bytesOutCounter: 6
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 2
              unackedMessages: 3
              consumerName: consumerName
              lastConsumedTimestamp: 6
              msgRateOut: 5.944895607614016
            - metadata:
                key: metadata
              address: address
              chuckedMessageRate: 1.284659006116532
              avgMessagesPerEntry: 3
              msgRateRedeliver: 6.704019297950036
              clientVersion: clientVersion
              keyHashRanges:
              - keyHashRanges
              - keyHashRanges
              msgOutCounter: 6
              msgThroughputOut: 3.353193347011243
              readPositionWhenJoining: readPositionWhenJoining
              availablePermits: 6
              bytesOutCounter: 6
              connectedSince: connectedSince
              blockedConsumerOnUnackedMsgs: true
              lastAckedTimestamp: 2
              unackedMessages: 3
              consumerName: consumerName
              lastConsumedTimestamp: 6
              msgRateOut: 5.944895607614016
            blockedSubscriptionOnUnackedMsgs: true
            msgDelayed: 8
            unackedMessages: 3
            msgBacklogNoDelayed: 4
            msgBacklog: 0
            lastConsumedTimestamp: 7
            msgRateOut: 3.0576100241049344
        msgChunkPublished: true
        backlogSize: 6
        msgOutCounter: 2
        bytesInCounter: 1
        msgThroughputIn: 3.616076749251911
        msgThroughputOut: 2.027123023002322
        bytesOutCounter: 5
        msgInCounter: 5
        storageSize: 6
        publishers:
        - msgRateIn: 1.2315135367772556
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 4.145608029883936
          producerId: 1
          clientVersion: clientVersion
          chunkedMessageRate: 7.386281948385884
          msgThroughputIn: 1.0246457001441578
        - msgRateIn: 1.2315135367772556
          metadata:
            key: metadata
          address: address
          connectedSince: connectedSince
          producerName: producerName
          averageMsgSize: 4.145608029883936
          producerId: 1
          clientVersion: clientVersion
          chunkedMessageRate: 7.386281948385884
          msgThroughputIn: 1.0246457001441578
        averageMsgSize: 0.8008281904610115
        deduplicationStatus: deduplicationStatus
        msgRateOut: 9.301444243932576
      properties:
        averageMsgSize:
          format: double
          type: number
        backlogSize:
          format: int64
          type: integer
        bytesInCounter:
          format: int64
          type: integer
        bytesOutCounter:
          format: int64
          type: integer
        deduplicationStatus:
          type: string
        msgChunkPublished:
          type: boolean
        msgInCounter:
          format: int64
          type: integer
        msgOutCounter:
          format: int64
          type: integer
        msgRateIn:
          format: double
          type: number
        msgRateOut:
          format: double
          type: number
        msgThroughputIn:
          format: double
          type: number
        msgThroughputOut:
          format: double
          type: number
        publishers:
          items:
            $ref: '#/components/schemas/PublisherStats'
          type: array
        replication:
          additionalProperties:
            $ref: '#/components/schemas/ReplicatorStats'
          type: object
        storageSize:
          format: int64
          type: integer
        subscriptions:
          additionalProperties:
            $ref: '#/components/schemas/SubscriptionStats'
          type: object
      type: object
x-original-swagger-version: "2.0"
