/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Package struct for Package
type Package struct {
	Name *string `json:"name,omitempty"`
	SpecificationTitle *string `json:"specificationTitle,omitempty"`
	SpecificationVersion *string `json:"specificationVersion,omitempty"`
	SpecificationVendor *string `json:"specificationVendor,omitempty"`
	ImplementationTitle *string `json:"implementationTitle,omitempty"`
	ImplementationVersion *string `json:"implementationVersion,omitempty"`
	ImplementationVendor *string `json:"implementationVendor,omitempty"`
	Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
	DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
	Sealed *bool `json:"sealed,omitempty"`
}

// NewPackage instantiates a new Package object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPackage() *Package {
	this := Package{}
	return &this
}

// NewPackageWithDefaults instantiates a new Package object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPackageWithDefaults() *Package {
	this := Package{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Package) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Package) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Package) SetName(v string) {
	o.Name = &v
}

// GetSpecificationTitle returns the SpecificationTitle field value if set, zero value otherwise.
func (o *Package) GetSpecificationTitle() string {
	if o == nil || o.SpecificationTitle == nil {
		var ret string
		return ret
	}
	return *o.SpecificationTitle
}

// GetSpecificationTitleOk returns a tuple with the SpecificationTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSpecificationTitleOk() (*string, bool) {
	if o == nil || o.SpecificationTitle == nil {
		return nil, false
	}
	return o.SpecificationTitle, true
}

// HasSpecificationTitle returns a boolean if a field has been set.
func (o *Package) HasSpecificationTitle() bool {
	if o != nil && o.SpecificationTitle != nil {
		return true
	}

	return false
}

// SetSpecificationTitle gets a reference to the given string and assigns it to the SpecificationTitle field.
func (o *Package) SetSpecificationTitle(v string) {
	o.SpecificationTitle = &v
}

// GetSpecificationVersion returns the SpecificationVersion field value if set, zero value otherwise.
func (o *Package) GetSpecificationVersion() string {
	if o == nil || o.SpecificationVersion == nil {
		var ret string
		return ret
	}
	return *o.SpecificationVersion
}

// GetSpecificationVersionOk returns a tuple with the SpecificationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSpecificationVersionOk() (*string, bool) {
	if o == nil || o.SpecificationVersion == nil {
		return nil, false
	}
	return o.SpecificationVersion, true
}

// HasSpecificationVersion returns a boolean if a field has been set.
func (o *Package) HasSpecificationVersion() bool {
	if o != nil && o.SpecificationVersion != nil {
		return true
	}

	return false
}

// SetSpecificationVersion gets a reference to the given string and assigns it to the SpecificationVersion field.
func (o *Package) SetSpecificationVersion(v string) {
	o.SpecificationVersion = &v
}

// GetSpecificationVendor returns the SpecificationVendor field value if set, zero value otherwise.
func (o *Package) GetSpecificationVendor() string {
	if o == nil || o.SpecificationVendor == nil {
		var ret string
		return ret
	}
	return *o.SpecificationVendor
}

// GetSpecificationVendorOk returns a tuple with the SpecificationVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSpecificationVendorOk() (*string, bool) {
	if o == nil || o.SpecificationVendor == nil {
		return nil, false
	}
	return o.SpecificationVendor, true
}

// HasSpecificationVendor returns a boolean if a field has been set.
func (o *Package) HasSpecificationVendor() bool {
	if o != nil && o.SpecificationVendor != nil {
		return true
	}

	return false
}

// SetSpecificationVendor gets a reference to the given string and assigns it to the SpecificationVendor field.
func (o *Package) SetSpecificationVendor(v string) {
	o.SpecificationVendor = &v
}

// GetImplementationTitle returns the ImplementationTitle field value if set, zero value otherwise.
func (o *Package) GetImplementationTitle() string {
	if o == nil || o.ImplementationTitle == nil {
		var ret string
		return ret
	}
	return *o.ImplementationTitle
}

// GetImplementationTitleOk returns a tuple with the ImplementationTitle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetImplementationTitleOk() (*string, bool) {
	if o == nil || o.ImplementationTitle == nil {
		return nil, false
	}
	return o.ImplementationTitle, true
}

// HasImplementationTitle returns a boolean if a field has been set.
func (o *Package) HasImplementationTitle() bool {
	if o != nil && o.ImplementationTitle != nil {
		return true
	}

	return false
}

// SetImplementationTitle gets a reference to the given string and assigns it to the ImplementationTitle field.
func (o *Package) SetImplementationTitle(v string) {
	o.ImplementationTitle = &v
}

// GetImplementationVersion returns the ImplementationVersion field value if set, zero value otherwise.
func (o *Package) GetImplementationVersion() string {
	if o == nil || o.ImplementationVersion == nil {
		var ret string
		return ret
	}
	return *o.ImplementationVersion
}

// GetImplementationVersionOk returns a tuple with the ImplementationVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetImplementationVersionOk() (*string, bool) {
	if o == nil || o.ImplementationVersion == nil {
		return nil, false
	}
	return o.ImplementationVersion, true
}

// HasImplementationVersion returns a boolean if a field has been set.
func (o *Package) HasImplementationVersion() bool {
	if o != nil && o.ImplementationVersion != nil {
		return true
	}

	return false
}

// SetImplementationVersion gets a reference to the given string and assigns it to the ImplementationVersion field.
func (o *Package) SetImplementationVersion(v string) {
	o.ImplementationVersion = &v
}

// GetImplementationVendor returns the ImplementationVendor field value if set, zero value otherwise.
func (o *Package) GetImplementationVendor() string {
	if o == nil || o.ImplementationVendor == nil {
		var ret string
		return ret
	}
	return *o.ImplementationVendor
}

// GetImplementationVendorOk returns a tuple with the ImplementationVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetImplementationVendorOk() (*string, bool) {
	if o == nil || o.ImplementationVendor == nil {
		return nil, false
	}
	return o.ImplementationVendor, true
}

// HasImplementationVendor returns a boolean if a field has been set.
func (o *Package) HasImplementationVendor() bool {
	if o != nil && o.ImplementationVendor != nil {
		return true
	}

	return false
}

// SetImplementationVendor gets a reference to the given string and assigns it to the ImplementationVendor field.
func (o *Package) SetImplementationVendor(v string) {
	o.ImplementationVendor = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *Package) GetAnnotations() []map[string]interface{} {
	if o == nil || o.Annotations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetAnnotationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *Package) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []map[string]interface{} and assigns it to the Annotations field.
func (o *Package) SetAnnotations(v []map[string]interface{}) {
	o.Annotations = &v
}

// GetDeclaredAnnotations returns the DeclaredAnnotations field value if set, zero value otherwise.
func (o *Package) GetDeclaredAnnotations() []map[string]interface{} {
	if o == nil || o.DeclaredAnnotations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.DeclaredAnnotations
}

// GetDeclaredAnnotationsOk returns a tuple with the DeclaredAnnotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetDeclaredAnnotationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.DeclaredAnnotations == nil {
		return nil, false
	}
	return o.DeclaredAnnotations, true
}

// HasDeclaredAnnotations returns a boolean if a field has been set.
func (o *Package) HasDeclaredAnnotations() bool {
	if o != nil && o.DeclaredAnnotations != nil {
		return true
	}

	return false
}

// SetDeclaredAnnotations gets a reference to the given []map[string]interface{} and assigns it to the DeclaredAnnotations field.
func (o *Package) SetDeclaredAnnotations(v []map[string]interface{}) {
	o.DeclaredAnnotations = &v
}

// GetSealed returns the Sealed field value if set, zero value otherwise.
func (o *Package) GetSealed() bool {
	if o == nil || o.Sealed == nil {
		var ret bool
		return ret
	}
	return *o.Sealed
}

// GetSealedOk returns a tuple with the Sealed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Package) GetSealedOk() (*bool, bool) {
	if o == nil || o.Sealed == nil {
		return nil, false
	}
	return o.Sealed, true
}

// HasSealed returns a boolean if a field has been set.
func (o *Package) HasSealed() bool {
	if o != nil && o.Sealed != nil {
		return true
	}

	return false
}

// SetSealed gets a reference to the given bool and assigns it to the Sealed field.
func (o *Package) SetSealed(v bool) {
	o.Sealed = &v
}

func (o Package) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.SpecificationTitle != nil {
		toSerialize["specificationTitle"] = o.SpecificationTitle
	}
	if o.SpecificationVersion != nil {
		toSerialize["specificationVersion"] = o.SpecificationVersion
	}
	if o.SpecificationVendor != nil {
		toSerialize["specificationVendor"] = o.SpecificationVendor
	}
	if o.ImplementationTitle != nil {
		toSerialize["implementationTitle"] = o.ImplementationTitle
	}
	if o.ImplementationVersion != nil {
		toSerialize["implementationVersion"] = o.ImplementationVersion
	}
	if o.ImplementationVendor != nil {
		toSerialize["implementationVendor"] = o.ImplementationVendor
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.DeclaredAnnotations != nil {
		toSerialize["declaredAnnotations"] = o.DeclaredAnnotations
	}
	if o.Sealed != nil {
		toSerialize["sealed"] = o.Sealed
	}
	return json.Marshal(toSerialize)
}

type NullablePackage struct {
	value *Package
	isSet bool
}

func (v NullablePackage) Get() *Package {
	return v.value
}

func (v *NullablePackage) Set(val *Package) {
	v.value = val
	v.isSet = true
}

func (v NullablePackage) IsSet() bool {
	return v.isSet
}

func (v *NullablePackage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePackage(val *Package) *NullablePackage {
	return &NullablePackage{value: val, isSet: true}
}

func (v NullablePackage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePackage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


