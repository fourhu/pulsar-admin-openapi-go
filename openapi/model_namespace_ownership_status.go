/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NamespaceOwnershipStatus struct for NamespaceOwnershipStatus
type NamespaceOwnershipStatus struct {
	BrokerAssignment *string `json:"broker_assignment,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
	IsControlled *bool `json:"is_controlled,omitempty"`
}

// NewNamespaceOwnershipStatus instantiates a new NamespaceOwnershipStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceOwnershipStatus() *NamespaceOwnershipStatus {
	this := NamespaceOwnershipStatus{}
	return &this
}

// NewNamespaceOwnershipStatusWithDefaults instantiates a new NamespaceOwnershipStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceOwnershipStatusWithDefaults() *NamespaceOwnershipStatus {
	this := NamespaceOwnershipStatus{}
	return &this
}

// GetBrokerAssignment returns the BrokerAssignment field value if set, zero value otherwise.
func (o *NamespaceOwnershipStatus) GetBrokerAssignment() string {
	if o == nil || o.BrokerAssignment == nil {
		var ret string
		return ret
	}
	return *o.BrokerAssignment
}

// GetBrokerAssignmentOk returns a tuple with the BrokerAssignment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceOwnershipStatus) GetBrokerAssignmentOk() (*string, bool) {
	if o == nil || o.BrokerAssignment == nil {
		return nil, false
	}
	return o.BrokerAssignment, true
}

// HasBrokerAssignment returns a boolean if a field has been set.
func (o *NamespaceOwnershipStatus) HasBrokerAssignment() bool {
	if o != nil && o.BrokerAssignment != nil {
		return true
	}

	return false
}

// SetBrokerAssignment gets a reference to the given string and assigns it to the BrokerAssignment field.
func (o *NamespaceOwnershipStatus) SetBrokerAssignment(v string) {
	o.BrokerAssignment = &v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *NamespaceOwnershipStatus) GetIsActive() bool {
	if o == nil || o.IsActive == nil {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceOwnershipStatus) GetIsActiveOk() (*bool, bool) {
	if o == nil || o.IsActive == nil {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *NamespaceOwnershipStatus) HasIsActive() bool {
	if o != nil && o.IsActive != nil {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *NamespaceOwnershipStatus) SetIsActive(v bool) {
	o.IsActive = &v
}

// GetIsControlled returns the IsControlled field value if set, zero value otherwise.
func (o *NamespaceOwnershipStatus) GetIsControlled() bool {
	if o == nil || o.IsControlled == nil {
		var ret bool
		return ret
	}
	return *o.IsControlled
}

// GetIsControlledOk returns a tuple with the IsControlled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceOwnershipStatus) GetIsControlledOk() (*bool, bool) {
	if o == nil || o.IsControlled == nil {
		return nil, false
	}
	return o.IsControlled, true
}

// HasIsControlled returns a boolean if a field has been set.
func (o *NamespaceOwnershipStatus) HasIsControlled() bool {
	if o != nil && o.IsControlled != nil {
		return true
	}

	return false
}

// SetIsControlled gets a reference to the given bool and assigns it to the IsControlled field.
func (o *NamespaceOwnershipStatus) SetIsControlled(v bool) {
	o.IsControlled = &v
}

func (o NamespaceOwnershipStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BrokerAssignment != nil {
		toSerialize["broker_assignment"] = o.BrokerAssignment
	}
	if o.IsActive != nil {
		toSerialize["is_active"] = o.IsActive
	}
	if o.IsControlled != nil {
		toSerialize["is_controlled"] = o.IsControlled
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceOwnershipStatus struct {
	value *NamespaceOwnershipStatus
	isSet bool
}

func (v NullableNamespaceOwnershipStatus) Get() *NamespaceOwnershipStatus {
	return v.value
}

func (v *NullableNamespaceOwnershipStatus) Set(val *NamespaceOwnershipStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceOwnershipStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceOwnershipStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceOwnershipStatus(val *NamespaceOwnershipStatus) *NullableNamespaceOwnershipStatus {
	return &NullableNamespaceOwnershipStatus{value: val, isSet: true}
}

func (v NullableNamespaceOwnershipStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceOwnershipStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


