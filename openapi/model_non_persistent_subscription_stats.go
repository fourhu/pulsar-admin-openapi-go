/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NonPersistentSubscriptionStats struct for NonPersistentSubscriptionStats
type NonPersistentSubscriptionStats struct {
	MsgDropRate *float64 `json:"msgDropRate,omitempty"`
	Durable *bool `json:"durable,omitempty"`
	Replicated *bool `json:"replicated,omitempty"`
	MsgThroughputOut *float64 `json:"msgThroughputOut,omitempty"`
	BacklogSize *int64 `json:"backlogSize,omitempty"`
	BytesOutCounter *int64 `json:"bytesOutCounter,omitempty"`
	MsgOutCounter *int64 `json:"msgOutCounter,omitempty"`
	NonContiguousDeletedMessagesRanges *int32 `json:"nonContiguousDeletedMessagesRanges,omitempty"`
	NonContiguousDeletedMessagesRangesSerializedSize *int32 `json:"nonContiguousDeletedMessagesRangesSerializedSize,omitempty"`
	Consumers *[]ConsumerStats `json:"consumers,omitempty"`
	MsgRateOut *float64 `json:"msgRateOut,omitempty"`
	MsgRateRedeliver *float64 `json:"msgRateRedeliver,omitempty"`
	ChunkedMessageRate *int32 `json:"chunkedMessageRate,omitempty"`
	MsgBacklog *int64 `json:"msgBacklog,omitempty"`
	MsgBacklogNoDelayed *int64 `json:"msgBacklogNoDelayed,omitempty"`
	BlockedSubscriptionOnUnackedMsgs *bool `json:"blockedSubscriptionOnUnackedMsgs,omitempty"`
	MsgDelayed *int64 `json:"msgDelayed,omitempty"`
	UnackedMessages *int64 `json:"unackedMessages,omitempty"`
	ActiveConsumerName *string `json:"activeConsumerName,omitempty"`
	MsgRateExpired *float64 `json:"msgRateExpired,omitempty"`
	TotalMsgExpired *int64 `json:"totalMsgExpired,omitempty"`
	LastExpireTimestamp *int64 `json:"lastExpireTimestamp,omitempty"`
	LastConsumedFlowTimestamp *int64 `json:"lastConsumedFlowTimestamp,omitempty"`
	LastConsumedTimestamp *int64 `json:"lastConsumedTimestamp,omitempty"`
	LastAckedTimestamp *int64 `json:"lastAckedTimestamp,omitempty"`
	LastMarkDeleteAdvancedTimestamp *int64 `json:"lastMarkDeleteAdvancedTimestamp,omitempty"`
	ConsumersAfterMarkDeletePosition *map[string]string `json:"consumersAfterMarkDeletePosition,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewNonPersistentSubscriptionStats instantiates a new NonPersistentSubscriptionStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNonPersistentSubscriptionStats() *NonPersistentSubscriptionStats {
	this := NonPersistentSubscriptionStats{}
	return &this
}

// NewNonPersistentSubscriptionStatsWithDefaults instantiates a new NonPersistentSubscriptionStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNonPersistentSubscriptionStatsWithDefaults() *NonPersistentSubscriptionStats {
	this := NonPersistentSubscriptionStats{}
	return &this
}

// GetMsgDropRate returns the MsgDropRate field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgDropRate() float64 {
	if o == nil || o.MsgDropRate == nil {
		var ret float64
		return ret
	}
	return *o.MsgDropRate
}

// GetMsgDropRateOk returns a tuple with the MsgDropRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgDropRateOk() (*float64, bool) {
	if o == nil || o.MsgDropRate == nil {
		return nil, false
	}
	return o.MsgDropRate, true
}

// HasMsgDropRate returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgDropRate() bool {
	if o != nil && o.MsgDropRate != nil {
		return true
	}

	return false
}

// SetMsgDropRate gets a reference to the given float64 and assigns it to the MsgDropRate field.
func (o *NonPersistentSubscriptionStats) SetMsgDropRate(v float64) {
	o.MsgDropRate = &v
}

// GetDurable returns the Durable field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetDurable() bool {
	if o == nil || o.Durable == nil {
		var ret bool
		return ret
	}
	return *o.Durable
}

// GetDurableOk returns a tuple with the Durable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetDurableOk() (*bool, bool) {
	if o == nil || o.Durable == nil {
		return nil, false
	}
	return o.Durable, true
}

// HasDurable returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasDurable() bool {
	if o != nil && o.Durable != nil {
		return true
	}

	return false
}

// SetDurable gets a reference to the given bool and assigns it to the Durable field.
func (o *NonPersistentSubscriptionStats) SetDurable(v bool) {
	o.Durable = &v
}

// GetReplicated returns the Replicated field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetReplicated() bool {
	if o == nil || o.Replicated == nil {
		var ret bool
		return ret
	}
	return *o.Replicated
}

// GetReplicatedOk returns a tuple with the Replicated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetReplicatedOk() (*bool, bool) {
	if o == nil || o.Replicated == nil {
		return nil, false
	}
	return o.Replicated, true
}

// HasReplicated returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasReplicated() bool {
	if o != nil && o.Replicated != nil {
		return true
	}

	return false
}

// SetReplicated gets a reference to the given bool and assigns it to the Replicated field.
func (o *NonPersistentSubscriptionStats) SetReplicated(v bool) {
	o.Replicated = &v
}

// GetMsgThroughputOut returns the MsgThroughputOut field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgThroughputOut() float64 {
	if o == nil || o.MsgThroughputOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgThroughputOut
}

// GetMsgThroughputOutOk returns a tuple with the MsgThroughputOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgThroughputOutOk() (*float64, bool) {
	if o == nil || o.MsgThroughputOut == nil {
		return nil, false
	}
	return o.MsgThroughputOut, true
}

// HasMsgThroughputOut returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgThroughputOut() bool {
	if o != nil && o.MsgThroughputOut != nil {
		return true
	}

	return false
}

// SetMsgThroughputOut gets a reference to the given float64 and assigns it to the MsgThroughputOut field.
func (o *NonPersistentSubscriptionStats) SetMsgThroughputOut(v float64) {
	o.MsgThroughputOut = &v
}

// GetBacklogSize returns the BacklogSize field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetBacklogSize() int64 {
	if o == nil || o.BacklogSize == nil {
		var ret int64
		return ret
	}
	return *o.BacklogSize
}

// GetBacklogSizeOk returns a tuple with the BacklogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetBacklogSizeOk() (*int64, bool) {
	if o == nil || o.BacklogSize == nil {
		return nil, false
	}
	return o.BacklogSize, true
}

// HasBacklogSize returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasBacklogSize() bool {
	if o != nil && o.BacklogSize != nil {
		return true
	}

	return false
}

// SetBacklogSize gets a reference to the given int64 and assigns it to the BacklogSize field.
func (o *NonPersistentSubscriptionStats) SetBacklogSize(v int64) {
	o.BacklogSize = &v
}

// GetBytesOutCounter returns the BytesOutCounter field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetBytesOutCounter() int64 {
	if o == nil || o.BytesOutCounter == nil {
		var ret int64
		return ret
	}
	return *o.BytesOutCounter
}

// GetBytesOutCounterOk returns a tuple with the BytesOutCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetBytesOutCounterOk() (*int64, bool) {
	if o == nil || o.BytesOutCounter == nil {
		return nil, false
	}
	return o.BytesOutCounter, true
}

// HasBytesOutCounter returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasBytesOutCounter() bool {
	if o != nil && o.BytesOutCounter != nil {
		return true
	}

	return false
}

// SetBytesOutCounter gets a reference to the given int64 and assigns it to the BytesOutCounter field.
func (o *NonPersistentSubscriptionStats) SetBytesOutCounter(v int64) {
	o.BytesOutCounter = &v
}

// GetMsgOutCounter returns the MsgOutCounter field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgOutCounter() int64 {
	if o == nil || o.MsgOutCounter == nil {
		var ret int64
		return ret
	}
	return *o.MsgOutCounter
}

// GetMsgOutCounterOk returns a tuple with the MsgOutCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgOutCounterOk() (*int64, bool) {
	if o == nil || o.MsgOutCounter == nil {
		return nil, false
	}
	return o.MsgOutCounter, true
}

// HasMsgOutCounter returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgOutCounter() bool {
	if o != nil && o.MsgOutCounter != nil {
		return true
	}

	return false
}

// SetMsgOutCounter gets a reference to the given int64 and assigns it to the MsgOutCounter field.
func (o *NonPersistentSubscriptionStats) SetMsgOutCounter(v int64) {
	o.MsgOutCounter = &v
}

// GetNonContiguousDeletedMessagesRanges returns the NonContiguousDeletedMessagesRanges field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetNonContiguousDeletedMessagesRanges() int32 {
	if o == nil || o.NonContiguousDeletedMessagesRanges == nil {
		var ret int32
		return ret
	}
	return *o.NonContiguousDeletedMessagesRanges
}

// GetNonContiguousDeletedMessagesRangesOk returns a tuple with the NonContiguousDeletedMessagesRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetNonContiguousDeletedMessagesRangesOk() (*int32, bool) {
	if o == nil || o.NonContiguousDeletedMessagesRanges == nil {
		return nil, false
	}
	return o.NonContiguousDeletedMessagesRanges, true
}

// HasNonContiguousDeletedMessagesRanges returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasNonContiguousDeletedMessagesRanges() bool {
	if o != nil && o.NonContiguousDeletedMessagesRanges != nil {
		return true
	}

	return false
}

// SetNonContiguousDeletedMessagesRanges gets a reference to the given int32 and assigns it to the NonContiguousDeletedMessagesRanges field.
func (o *NonPersistentSubscriptionStats) SetNonContiguousDeletedMessagesRanges(v int32) {
	o.NonContiguousDeletedMessagesRanges = &v
}

// GetNonContiguousDeletedMessagesRangesSerializedSize returns the NonContiguousDeletedMessagesRangesSerializedSize field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetNonContiguousDeletedMessagesRangesSerializedSize() int32 {
	if o == nil || o.NonContiguousDeletedMessagesRangesSerializedSize == nil {
		var ret int32
		return ret
	}
	return *o.NonContiguousDeletedMessagesRangesSerializedSize
}

// GetNonContiguousDeletedMessagesRangesSerializedSizeOk returns a tuple with the NonContiguousDeletedMessagesRangesSerializedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetNonContiguousDeletedMessagesRangesSerializedSizeOk() (*int32, bool) {
	if o == nil || o.NonContiguousDeletedMessagesRangesSerializedSize == nil {
		return nil, false
	}
	return o.NonContiguousDeletedMessagesRangesSerializedSize, true
}

// HasNonContiguousDeletedMessagesRangesSerializedSize returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasNonContiguousDeletedMessagesRangesSerializedSize() bool {
	if o != nil && o.NonContiguousDeletedMessagesRangesSerializedSize != nil {
		return true
	}

	return false
}

// SetNonContiguousDeletedMessagesRangesSerializedSize gets a reference to the given int32 and assigns it to the NonContiguousDeletedMessagesRangesSerializedSize field.
func (o *NonPersistentSubscriptionStats) SetNonContiguousDeletedMessagesRangesSerializedSize(v int32) {
	o.NonContiguousDeletedMessagesRangesSerializedSize = &v
}

// GetConsumers returns the Consumers field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetConsumers() []ConsumerStats {
	if o == nil || o.Consumers == nil {
		var ret []ConsumerStats
		return ret
	}
	return *o.Consumers
}

// GetConsumersOk returns a tuple with the Consumers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetConsumersOk() (*[]ConsumerStats, bool) {
	if o == nil || o.Consumers == nil {
		return nil, false
	}
	return o.Consumers, true
}

// HasConsumers returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasConsumers() bool {
	if o != nil && o.Consumers != nil {
		return true
	}

	return false
}

// SetConsumers gets a reference to the given []ConsumerStats and assigns it to the Consumers field.
func (o *NonPersistentSubscriptionStats) SetConsumers(v []ConsumerStats) {
	o.Consumers = &v
}

// GetMsgRateOut returns the MsgRateOut field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgRateOut() float64 {
	if o == nil || o.MsgRateOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateOut
}

// GetMsgRateOutOk returns a tuple with the MsgRateOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgRateOutOk() (*float64, bool) {
	if o == nil || o.MsgRateOut == nil {
		return nil, false
	}
	return o.MsgRateOut, true
}

// HasMsgRateOut returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgRateOut() bool {
	if o != nil && o.MsgRateOut != nil {
		return true
	}

	return false
}

// SetMsgRateOut gets a reference to the given float64 and assigns it to the MsgRateOut field.
func (o *NonPersistentSubscriptionStats) SetMsgRateOut(v float64) {
	o.MsgRateOut = &v
}

// GetMsgRateRedeliver returns the MsgRateRedeliver field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgRateRedeliver() float64 {
	if o == nil || o.MsgRateRedeliver == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateRedeliver
}

// GetMsgRateRedeliverOk returns a tuple with the MsgRateRedeliver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgRateRedeliverOk() (*float64, bool) {
	if o == nil || o.MsgRateRedeliver == nil {
		return nil, false
	}
	return o.MsgRateRedeliver, true
}

// HasMsgRateRedeliver returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgRateRedeliver() bool {
	if o != nil && o.MsgRateRedeliver != nil {
		return true
	}

	return false
}

// SetMsgRateRedeliver gets a reference to the given float64 and assigns it to the MsgRateRedeliver field.
func (o *NonPersistentSubscriptionStats) SetMsgRateRedeliver(v float64) {
	o.MsgRateRedeliver = &v
}

// GetChunkedMessageRate returns the ChunkedMessageRate field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetChunkedMessageRate() int32 {
	if o == nil || o.ChunkedMessageRate == nil {
		var ret int32
		return ret
	}
	return *o.ChunkedMessageRate
}

// GetChunkedMessageRateOk returns a tuple with the ChunkedMessageRate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetChunkedMessageRateOk() (*int32, bool) {
	if o == nil || o.ChunkedMessageRate == nil {
		return nil, false
	}
	return o.ChunkedMessageRate, true
}

// HasChunkedMessageRate returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasChunkedMessageRate() bool {
	if o != nil && o.ChunkedMessageRate != nil {
		return true
	}

	return false
}

// SetChunkedMessageRate gets a reference to the given int32 and assigns it to the ChunkedMessageRate field.
func (o *NonPersistentSubscriptionStats) SetChunkedMessageRate(v int32) {
	o.ChunkedMessageRate = &v
}

// GetMsgBacklog returns the MsgBacklog field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgBacklog() int64 {
	if o == nil || o.MsgBacklog == nil {
		var ret int64
		return ret
	}
	return *o.MsgBacklog
}

// GetMsgBacklogOk returns a tuple with the MsgBacklog field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgBacklogOk() (*int64, bool) {
	if o == nil || o.MsgBacklog == nil {
		return nil, false
	}
	return o.MsgBacklog, true
}

// HasMsgBacklog returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgBacklog() bool {
	if o != nil && o.MsgBacklog != nil {
		return true
	}

	return false
}

// SetMsgBacklog gets a reference to the given int64 and assigns it to the MsgBacklog field.
func (o *NonPersistentSubscriptionStats) SetMsgBacklog(v int64) {
	o.MsgBacklog = &v
}

// GetMsgBacklogNoDelayed returns the MsgBacklogNoDelayed field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgBacklogNoDelayed() int64 {
	if o == nil || o.MsgBacklogNoDelayed == nil {
		var ret int64
		return ret
	}
	return *o.MsgBacklogNoDelayed
}

// GetMsgBacklogNoDelayedOk returns a tuple with the MsgBacklogNoDelayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgBacklogNoDelayedOk() (*int64, bool) {
	if o == nil || o.MsgBacklogNoDelayed == nil {
		return nil, false
	}
	return o.MsgBacklogNoDelayed, true
}

// HasMsgBacklogNoDelayed returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgBacklogNoDelayed() bool {
	if o != nil && o.MsgBacklogNoDelayed != nil {
		return true
	}

	return false
}

// SetMsgBacklogNoDelayed gets a reference to the given int64 and assigns it to the MsgBacklogNoDelayed field.
func (o *NonPersistentSubscriptionStats) SetMsgBacklogNoDelayed(v int64) {
	o.MsgBacklogNoDelayed = &v
}

// GetBlockedSubscriptionOnUnackedMsgs returns the BlockedSubscriptionOnUnackedMsgs field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetBlockedSubscriptionOnUnackedMsgs() bool {
	if o == nil || o.BlockedSubscriptionOnUnackedMsgs == nil {
		var ret bool
		return ret
	}
	return *o.BlockedSubscriptionOnUnackedMsgs
}

// GetBlockedSubscriptionOnUnackedMsgsOk returns a tuple with the BlockedSubscriptionOnUnackedMsgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetBlockedSubscriptionOnUnackedMsgsOk() (*bool, bool) {
	if o == nil || o.BlockedSubscriptionOnUnackedMsgs == nil {
		return nil, false
	}
	return o.BlockedSubscriptionOnUnackedMsgs, true
}

// HasBlockedSubscriptionOnUnackedMsgs returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasBlockedSubscriptionOnUnackedMsgs() bool {
	if o != nil && o.BlockedSubscriptionOnUnackedMsgs != nil {
		return true
	}

	return false
}

// SetBlockedSubscriptionOnUnackedMsgs gets a reference to the given bool and assigns it to the BlockedSubscriptionOnUnackedMsgs field.
func (o *NonPersistentSubscriptionStats) SetBlockedSubscriptionOnUnackedMsgs(v bool) {
	o.BlockedSubscriptionOnUnackedMsgs = &v
}

// GetMsgDelayed returns the MsgDelayed field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgDelayed() int64 {
	if o == nil || o.MsgDelayed == nil {
		var ret int64
		return ret
	}
	return *o.MsgDelayed
}

// GetMsgDelayedOk returns a tuple with the MsgDelayed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgDelayedOk() (*int64, bool) {
	if o == nil || o.MsgDelayed == nil {
		return nil, false
	}
	return o.MsgDelayed, true
}

// HasMsgDelayed returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgDelayed() bool {
	if o != nil && o.MsgDelayed != nil {
		return true
	}

	return false
}

// SetMsgDelayed gets a reference to the given int64 and assigns it to the MsgDelayed field.
func (o *NonPersistentSubscriptionStats) SetMsgDelayed(v int64) {
	o.MsgDelayed = &v
}

// GetUnackedMessages returns the UnackedMessages field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetUnackedMessages() int64 {
	if o == nil || o.UnackedMessages == nil {
		var ret int64
		return ret
	}
	return *o.UnackedMessages
}

// GetUnackedMessagesOk returns a tuple with the UnackedMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetUnackedMessagesOk() (*int64, bool) {
	if o == nil || o.UnackedMessages == nil {
		return nil, false
	}
	return o.UnackedMessages, true
}

// HasUnackedMessages returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasUnackedMessages() bool {
	if o != nil && o.UnackedMessages != nil {
		return true
	}

	return false
}

// SetUnackedMessages gets a reference to the given int64 and assigns it to the UnackedMessages field.
func (o *NonPersistentSubscriptionStats) SetUnackedMessages(v int64) {
	o.UnackedMessages = &v
}

// GetActiveConsumerName returns the ActiveConsumerName field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetActiveConsumerName() string {
	if o == nil || o.ActiveConsumerName == nil {
		var ret string
		return ret
	}
	return *o.ActiveConsumerName
}

// GetActiveConsumerNameOk returns a tuple with the ActiveConsumerName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetActiveConsumerNameOk() (*string, bool) {
	if o == nil || o.ActiveConsumerName == nil {
		return nil, false
	}
	return o.ActiveConsumerName, true
}

// HasActiveConsumerName returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasActiveConsumerName() bool {
	if o != nil && o.ActiveConsumerName != nil {
		return true
	}

	return false
}

// SetActiveConsumerName gets a reference to the given string and assigns it to the ActiveConsumerName field.
func (o *NonPersistentSubscriptionStats) SetActiveConsumerName(v string) {
	o.ActiveConsumerName = &v
}

// GetMsgRateExpired returns the MsgRateExpired field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetMsgRateExpired() float64 {
	if o == nil || o.MsgRateExpired == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateExpired
}

// GetMsgRateExpiredOk returns a tuple with the MsgRateExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetMsgRateExpiredOk() (*float64, bool) {
	if o == nil || o.MsgRateExpired == nil {
		return nil, false
	}
	return o.MsgRateExpired, true
}

// HasMsgRateExpired returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasMsgRateExpired() bool {
	if o != nil && o.MsgRateExpired != nil {
		return true
	}

	return false
}

// SetMsgRateExpired gets a reference to the given float64 and assigns it to the MsgRateExpired field.
func (o *NonPersistentSubscriptionStats) SetMsgRateExpired(v float64) {
	o.MsgRateExpired = &v
}

// GetTotalMsgExpired returns the TotalMsgExpired field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetTotalMsgExpired() int64 {
	if o == nil || o.TotalMsgExpired == nil {
		var ret int64
		return ret
	}
	return *o.TotalMsgExpired
}

// GetTotalMsgExpiredOk returns a tuple with the TotalMsgExpired field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetTotalMsgExpiredOk() (*int64, bool) {
	if o == nil || o.TotalMsgExpired == nil {
		return nil, false
	}
	return o.TotalMsgExpired, true
}

// HasTotalMsgExpired returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasTotalMsgExpired() bool {
	if o != nil && o.TotalMsgExpired != nil {
		return true
	}

	return false
}

// SetTotalMsgExpired gets a reference to the given int64 and assigns it to the TotalMsgExpired field.
func (o *NonPersistentSubscriptionStats) SetTotalMsgExpired(v int64) {
	o.TotalMsgExpired = &v
}

// GetLastExpireTimestamp returns the LastExpireTimestamp field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetLastExpireTimestamp() int64 {
	if o == nil || o.LastExpireTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastExpireTimestamp
}

// GetLastExpireTimestampOk returns a tuple with the LastExpireTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetLastExpireTimestampOk() (*int64, bool) {
	if o == nil || o.LastExpireTimestamp == nil {
		return nil, false
	}
	return o.LastExpireTimestamp, true
}

// HasLastExpireTimestamp returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasLastExpireTimestamp() bool {
	if o != nil && o.LastExpireTimestamp != nil {
		return true
	}

	return false
}

// SetLastExpireTimestamp gets a reference to the given int64 and assigns it to the LastExpireTimestamp field.
func (o *NonPersistentSubscriptionStats) SetLastExpireTimestamp(v int64) {
	o.LastExpireTimestamp = &v
}

// GetLastConsumedFlowTimestamp returns the LastConsumedFlowTimestamp field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetLastConsumedFlowTimestamp() int64 {
	if o == nil || o.LastConsumedFlowTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastConsumedFlowTimestamp
}

// GetLastConsumedFlowTimestampOk returns a tuple with the LastConsumedFlowTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetLastConsumedFlowTimestampOk() (*int64, bool) {
	if o == nil || o.LastConsumedFlowTimestamp == nil {
		return nil, false
	}
	return o.LastConsumedFlowTimestamp, true
}

// HasLastConsumedFlowTimestamp returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasLastConsumedFlowTimestamp() bool {
	if o != nil && o.LastConsumedFlowTimestamp != nil {
		return true
	}

	return false
}

// SetLastConsumedFlowTimestamp gets a reference to the given int64 and assigns it to the LastConsumedFlowTimestamp field.
func (o *NonPersistentSubscriptionStats) SetLastConsumedFlowTimestamp(v int64) {
	o.LastConsumedFlowTimestamp = &v
}

// GetLastConsumedTimestamp returns the LastConsumedTimestamp field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetLastConsumedTimestamp() int64 {
	if o == nil || o.LastConsumedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastConsumedTimestamp
}

// GetLastConsumedTimestampOk returns a tuple with the LastConsumedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetLastConsumedTimestampOk() (*int64, bool) {
	if o == nil || o.LastConsumedTimestamp == nil {
		return nil, false
	}
	return o.LastConsumedTimestamp, true
}

// HasLastConsumedTimestamp returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasLastConsumedTimestamp() bool {
	if o != nil && o.LastConsumedTimestamp != nil {
		return true
	}

	return false
}

// SetLastConsumedTimestamp gets a reference to the given int64 and assigns it to the LastConsumedTimestamp field.
func (o *NonPersistentSubscriptionStats) SetLastConsumedTimestamp(v int64) {
	o.LastConsumedTimestamp = &v
}

// GetLastAckedTimestamp returns the LastAckedTimestamp field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetLastAckedTimestamp() int64 {
	if o == nil || o.LastAckedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastAckedTimestamp
}

// GetLastAckedTimestampOk returns a tuple with the LastAckedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetLastAckedTimestampOk() (*int64, bool) {
	if o == nil || o.LastAckedTimestamp == nil {
		return nil, false
	}
	return o.LastAckedTimestamp, true
}

// HasLastAckedTimestamp returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasLastAckedTimestamp() bool {
	if o != nil && o.LastAckedTimestamp != nil {
		return true
	}

	return false
}

// SetLastAckedTimestamp gets a reference to the given int64 and assigns it to the LastAckedTimestamp field.
func (o *NonPersistentSubscriptionStats) SetLastAckedTimestamp(v int64) {
	o.LastAckedTimestamp = &v
}

// GetLastMarkDeleteAdvancedTimestamp returns the LastMarkDeleteAdvancedTimestamp field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetLastMarkDeleteAdvancedTimestamp() int64 {
	if o == nil || o.LastMarkDeleteAdvancedTimestamp == nil {
		var ret int64
		return ret
	}
	return *o.LastMarkDeleteAdvancedTimestamp
}

// GetLastMarkDeleteAdvancedTimestampOk returns a tuple with the LastMarkDeleteAdvancedTimestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetLastMarkDeleteAdvancedTimestampOk() (*int64, bool) {
	if o == nil || o.LastMarkDeleteAdvancedTimestamp == nil {
		return nil, false
	}
	return o.LastMarkDeleteAdvancedTimestamp, true
}

// HasLastMarkDeleteAdvancedTimestamp returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasLastMarkDeleteAdvancedTimestamp() bool {
	if o != nil && o.LastMarkDeleteAdvancedTimestamp != nil {
		return true
	}

	return false
}

// SetLastMarkDeleteAdvancedTimestamp gets a reference to the given int64 and assigns it to the LastMarkDeleteAdvancedTimestamp field.
func (o *NonPersistentSubscriptionStats) SetLastMarkDeleteAdvancedTimestamp(v int64) {
	o.LastMarkDeleteAdvancedTimestamp = &v
}

// GetConsumersAfterMarkDeletePosition returns the ConsumersAfterMarkDeletePosition field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetConsumersAfterMarkDeletePosition() map[string]string {
	if o == nil || o.ConsumersAfterMarkDeletePosition == nil {
		var ret map[string]string
		return ret
	}
	return *o.ConsumersAfterMarkDeletePosition
}

// GetConsumersAfterMarkDeletePositionOk returns a tuple with the ConsumersAfterMarkDeletePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetConsumersAfterMarkDeletePositionOk() (*map[string]string, bool) {
	if o == nil || o.ConsumersAfterMarkDeletePosition == nil {
		return nil, false
	}
	return o.ConsumersAfterMarkDeletePosition, true
}

// HasConsumersAfterMarkDeletePosition returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasConsumersAfterMarkDeletePosition() bool {
	if o != nil && o.ConsumersAfterMarkDeletePosition != nil {
		return true
	}

	return false
}

// SetConsumersAfterMarkDeletePosition gets a reference to the given map[string]string and assigns it to the ConsumersAfterMarkDeletePosition field.
func (o *NonPersistentSubscriptionStats) SetConsumersAfterMarkDeletePosition(v map[string]string) {
	o.ConsumersAfterMarkDeletePosition = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *NonPersistentSubscriptionStats) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NonPersistentSubscriptionStats) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *NonPersistentSubscriptionStats) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *NonPersistentSubscriptionStats) SetType(v string) {
	o.Type = &v
}

func (o NonPersistentSubscriptionStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MsgDropRate != nil {
		toSerialize["msgDropRate"] = o.MsgDropRate
	}
	if o.Durable != nil {
		toSerialize["durable"] = o.Durable
	}
	if o.Replicated != nil {
		toSerialize["replicated"] = o.Replicated
	}
	if o.MsgThroughputOut != nil {
		toSerialize["msgThroughputOut"] = o.MsgThroughputOut
	}
	if o.BacklogSize != nil {
		toSerialize["backlogSize"] = o.BacklogSize
	}
	if o.BytesOutCounter != nil {
		toSerialize["bytesOutCounter"] = o.BytesOutCounter
	}
	if o.MsgOutCounter != nil {
		toSerialize["msgOutCounter"] = o.MsgOutCounter
	}
	if o.NonContiguousDeletedMessagesRanges != nil {
		toSerialize["nonContiguousDeletedMessagesRanges"] = o.NonContiguousDeletedMessagesRanges
	}
	if o.NonContiguousDeletedMessagesRangesSerializedSize != nil {
		toSerialize["nonContiguousDeletedMessagesRangesSerializedSize"] = o.NonContiguousDeletedMessagesRangesSerializedSize
	}
	if o.Consumers != nil {
		toSerialize["consumers"] = o.Consumers
	}
	if o.MsgRateOut != nil {
		toSerialize["msgRateOut"] = o.MsgRateOut
	}
	if o.MsgRateRedeliver != nil {
		toSerialize["msgRateRedeliver"] = o.MsgRateRedeliver
	}
	if o.ChunkedMessageRate != nil {
		toSerialize["chunkedMessageRate"] = o.ChunkedMessageRate
	}
	if o.MsgBacklog != nil {
		toSerialize["msgBacklog"] = o.MsgBacklog
	}
	if o.MsgBacklogNoDelayed != nil {
		toSerialize["msgBacklogNoDelayed"] = o.MsgBacklogNoDelayed
	}
	if o.BlockedSubscriptionOnUnackedMsgs != nil {
		toSerialize["blockedSubscriptionOnUnackedMsgs"] = o.BlockedSubscriptionOnUnackedMsgs
	}
	if o.MsgDelayed != nil {
		toSerialize["msgDelayed"] = o.MsgDelayed
	}
	if o.UnackedMessages != nil {
		toSerialize["unackedMessages"] = o.UnackedMessages
	}
	if o.ActiveConsumerName != nil {
		toSerialize["activeConsumerName"] = o.ActiveConsumerName
	}
	if o.MsgRateExpired != nil {
		toSerialize["msgRateExpired"] = o.MsgRateExpired
	}
	if o.TotalMsgExpired != nil {
		toSerialize["totalMsgExpired"] = o.TotalMsgExpired
	}
	if o.LastExpireTimestamp != nil {
		toSerialize["lastExpireTimestamp"] = o.LastExpireTimestamp
	}
	if o.LastConsumedFlowTimestamp != nil {
		toSerialize["lastConsumedFlowTimestamp"] = o.LastConsumedFlowTimestamp
	}
	if o.LastConsumedTimestamp != nil {
		toSerialize["lastConsumedTimestamp"] = o.LastConsumedTimestamp
	}
	if o.LastAckedTimestamp != nil {
		toSerialize["lastAckedTimestamp"] = o.LastAckedTimestamp
	}
	if o.LastMarkDeleteAdvancedTimestamp != nil {
		toSerialize["lastMarkDeleteAdvancedTimestamp"] = o.LastMarkDeleteAdvancedTimestamp
	}
	if o.ConsumersAfterMarkDeletePosition != nil {
		toSerialize["consumersAfterMarkDeletePosition"] = o.ConsumersAfterMarkDeletePosition
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableNonPersistentSubscriptionStats struct {
	value *NonPersistentSubscriptionStats
	isSet bool
}

func (v NullableNonPersistentSubscriptionStats) Get() *NonPersistentSubscriptionStats {
	return v.value
}

func (v *NullableNonPersistentSubscriptionStats) Set(val *NonPersistentSubscriptionStats) {
	v.value = val
	v.isSet = true
}

func (v NullableNonPersistentSubscriptionStats) IsSet() bool {
	return v.isSet
}

func (v *NullableNonPersistentSubscriptionStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNonPersistentSubscriptionStats(val *NonPersistentSubscriptionStats) *NullableNonPersistentSubscriptionStats {
	return &NullableNonPersistentSubscriptionStats{value: val, isSet: true}
}

func (v NullableNonPersistentSubscriptionStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNonPersistentSubscriptionStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


