/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonSerializer struct for JsonSerializer
type JsonSerializer struct {
	UnwrappingSerializer *bool `json:"unwrappingSerializer,omitempty"`
}

// NewJsonSerializer instantiates a new JsonSerializer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonSerializer() *JsonSerializer {
	this := JsonSerializer{}
	return &this
}

// NewJsonSerializerWithDefaults instantiates a new JsonSerializer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonSerializerWithDefaults() *JsonSerializer {
	this := JsonSerializer{}
	return &this
}

// GetUnwrappingSerializer returns the UnwrappingSerializer field value if set, zero value otherwise.
func (o *JsonSerializer) GetUnwrappingSerializer() bool {
	if o == nil || o.UnwrappingSerializer == nil {
		var ret bool
		return ret
	}
	return *o.UnwrappingSerializer
}

// GetUnwrappingSerializerOk returns a tuple with the UnwrappingSerializer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonSerializer) GetUnwrappingSerializerOk() (*bool, bool) {
	if o == nil || o.UnwrappingSerializer == nil {
		return nil, false
	}
	return o.UnwrappingSerializer, true
}

// HasUnwrappingSerializer returns a boolean if a field has been set.
func (o *JsonSerializer) HasUnwrappingSerializer() bool {
	if o != nil && o.UnwrappingSerializer != nil {
		return true
	}

	return false
}

// SetUnwrappingSerializer gets a reference to the given bool and assigns it to the UnwrappingSerializer field.
func (o *JsonSerializer) SetUnwrappingSerializer(v bool) {
	o.UnwrappingSerializer = &v
}

func (o JsonSerializer) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnwrappingSerializer != nil {
		toSerialize["unwrappingSerializer"] = o.UnwrappingSerializer
	}
	return json.Marshal(toSerialize)
}

type NullableJsonSerializer struct {
	value *JsonSerializer
	isSet bool
}

func (v NullableJsonSerializer) Get() *JsonSerializer {
	return v.value
}

func (v *NullableJsonSerializer) Set(val *JsonSerializer) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonSerializer) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonSerializer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonSerializer(val *JsonSerializer) *NullableJsonSerializer {
	return &NullableJsonSerializer{value: val, isSet: true}
}

func (v NullableJsonSerializer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonSerializer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


