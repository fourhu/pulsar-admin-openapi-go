/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonSerializerObject struct for JsonSerializerObject
type JsonSerializerObject struct {
	UnwrappingSerializer *bool `json:"unwrappingSerializer,omitempty"`
	Delegatee *JsonSerializerObject `json:"delegatee,omitempty"`
}

// NewJsonSerializerObject instantiates a new JsonSerializerObject object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonSerializerObject() *JsonSerializerObject {
	this := JsonSerializerObject{}
	return &this
}

// NewJsonSerializerObjectWithDefaults instantiates a new JsonSerializerObject object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonSerializerObjectWithDefaults() *JsonSerializerObject {
	this := JsonSerializerObject{}
	return &this
}

// GetUnwrappingSerializer returns the UnwrappingSerializer field value if set, zero value otherwise.
func (o *JsonSerializerObject) GetUnwrappingSerializer() bool {
	if o == nil || o.UnwrappingSerializer == nil {
		var ret bool
		return ret
	}
	return *o.UnwrappingSerializer
}

// GetUnwrappingSerializerOk returns a tuple with the UnwrappingSerializer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonSerializerObject) GetUnwrappingSerializerOk() (*bool, bool) {
	if o == nil || o.UnwrappingSerializer == nil {
		return nil, false
	}
	return o.UnwrappingSerializer, true
}

// HasUnwrappingSerializer returns a boolean if a field has been set.
func (o *JsonSerializerObject) HasUnwrappingSerializer() bool {
	if o != nil && o.UnwrappingSerializer != nil {
		return true
	}

	return false
}

// SetUnwrappingSerializer gets a reference to the given bool and assigns it to the UnwrappingSerializer field.
func (o *JsonSerializerObject) SetUnwrappingSerializer(v bool) {
	o.UnwrappingSerializer = &v
}

// GetDelegatee returns the Delegatee field value if set, zero value otherwise.
func (o *JsonSerializerObject) GetDelegatee() JsonSerializerObject {
	if o == nil || o.Delegatee == nil {
		var ret JsonSerializerObject
		return ret
	}
	return *o.Delegatee
}

// GetDelegateeOk returns a tuple with the Delegatee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonSerializerObject) GetDelegateeOk() (*JsonSerializerObject, bool) {
	if o == nil || o.Delegatee == nil {
		return nil, false
	}
	return o.Delegatee, true
}

// HasDelegatee returns a boolean if a field has been set.
func (o *JsonSerializerObject) HasDelegatee() bool {
	if o != nil && o.Delegatee != nil {
		return true
	}

	return false
}

// SetDelegatee gets a reference to the given JsonSerializerObject and assigns it to the Delegatee field.
func (o *JsonSerializerObject) SetDelegatee(v JsonSerializerObject) {
	o.Delegatee = &v
}

func (o JsonSerializerObject) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.UnwrappingSerializer != nil {
		toSerialize["unwrappingSerializer"] = o.UnwrappingSerializer
	}
	if o.Delegatee != nil {
		toSerialize["delegatee"] = o.Delegatee
	}
	return json.Marshal(toSerialize)
}

type NullableJsonSerializerObject struct {
	value *JsonSerializerObject
	isSet bool
}

func (v NullableJsonSerializerObject) Get() *JsonSerializerObject {
	return v.value
}

func (v *NullableJsonSerializerObject) Set(val *JsonSerializerObject) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonSerializerObject) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonSerializerObject) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonSerializerObject(val *JsonSerializerObject) *NullableJsonSerializerObject {
	return &NullableJsonSerializerObject{value: val, isSet: true}
}

func (v NullableJsonSerializerObject) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonSerializerObject) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


