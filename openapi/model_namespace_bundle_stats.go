/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NamespaceBundleStats struct for NamespaceBundleStats
type NamespaceBundleStats struct {
	CacheSize *int64 `json:"cacheSize,omitempty"`
	ConsumerCount *int32 `json:"consumerCount,omitempty"`
	MsgRateIn *float64 `json:"msgRateIn,omitempty"`
	MsgRateOut *float64 `json:"msgRateOut,omitempty"`
	MsgThroughputIn *float64 `json:"msgThroughputIn,omitempty"`
	MsgThroughputOut *float64 `json:"msgThroughputOut,omitempty"`
	ProducerCount *int32 `json:"producerCount,omitempty"`
	Topics *int64 `json:"topics,omitempty"`
}

// NewNamespaceBundleStats instantiates a new NamespaceBundleStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceBundleStats() *NamespaceBundleStats {
	this := NamespaceBundleStats{}
	return &this
}

// NewNamespaceBundleStatsWithDefaults instantiates a new NamespaceBundleStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceBundleStatsWithDefaults() *NamespaceBundleStats {
	this := NamespaceBundleStats{}
	return &this
}

// GetCacheSize returns the CacheSize field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetCacheSize() int64 {
	if o == nil || o.CacheSize == nil {
		var ret int64
		return ret
	}
	return *o.CacheSize
}

// GetCacheSizeOk returns a tuple with the CacheSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetCacheSizeOk() (*int64, bool) {
	if o == nil || o.CacheSize == nil {
		return nil, false
	}
	return o.CacheSize, true
}

// HasCacheSize returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasCacheSize() bool {
	if o != nil && o.CacheSize != nil {
		return true
	}

	return false
}

// SetCacheSize gets a reference to the given int64 and assigns it to the CacheSize field.
func (o *NamespaceBundleStats) SetCacheSize(v int64) {
	o.CacheSize = &v
}

// GetConsumerCount returns the ConsumerCount field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetConsumerCount() int32 {
	if o == nil || o.ConsumerCount == nil {
		var ret int32
		return ret
	}
	return *o.ConsumerCount
}

// GetConsumerCountOk returns a tuple with the ConsumerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetConsumerCountOk() (*int32, bool) {
	if o == nil || o.ConsumerCount == nil {
		return nil, false
	}
	return o.ConsumerCount, true
}

// HasConsumerCount returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasConsumerCount() bool {
	if o != nil && o.ConsumerCount != nil {
		return true
	}

	return false
}

// SetConsumerCount gets a reference to the given int32 and assigns it to the ConsumerCount field.
func (o *NamespaceBundleStats) SetConsumerCount(v int32) {
	o.ConsumerCount = &v
}

// GetMsgRateIn returns the MsgRateIn field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetMsgRateIn() float64 {
	if o == nil || o.MsgRateIn == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateIn
}

// GetMsgRateInOk returns a tuple with the MsgRateIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetMsgRateInOk() (*float64, bool) {
	if o == nil || o.MsgRateIn == nil {
		return nil, false
	}
	return o.MsgRateIn, true
}

// HasMsgRateIn returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasMsgRateIn() bool {
	if o != nil && o.MsgRateIn != nil {
		return true
	}

	return false
}

// SetMsgRateIn gets a reference to the given float64 and assigns it to the MsgRateIn field.
func (o *NamespaceBundleStats) SetMsgRateIn(v float64) {
	o.MsgRateIn = &v
}

// GetMsgRateOut returns the MsgRateOut field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetMsgRateOut() float64 {
	if o == nil || o.MsgRateOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateOut
}

// GetMsgRateOutOk returns a tuple with the MsgRateOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetMsgRateOutOk() (*float64, bool) {
	if o == nil || o.MsgRateOut == nil {
		return nil, false
	}
	return o.MsgRateOut, true
}

// HasMsgRateOut returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasMsgRateOut() bool {
	if o != nil && o.MsgRateOut != nil {
		return true
	}

	return false
}

// SetMsgRateOut gets a reference to the given float64 and assigns it to the MsgRateOut field.
func (o *NamespaceBundleStats) SetMsgRateOut(v float64) {
	o.MsgRateOut = &v
}

// GetMsgThroughputIn returns the MsgThroughputIn field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetMsgThroughputIn() float64 {
	if o == nil || o.MsgThroughputIn == nil {
		var ret float64
		return ret
	}
	return *o.MsgThroughputIn
}

// GetMsgThroughputInOk returns a tuple with the MsgThroughputIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetMsgThroughputInOk() (*float64, bool) {
	if o == nil || o.MsgThroughputIn == nil {
		return nil, false
	}
	return o.MsgThroughputIn, true
}

// HasMsgThroughputIn returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasMsgThroughputIn() bool {
	if o != nil && o.MsgThroughputIn != nil {
		return true
	}

	return false
}

// SetMsgThroughputIn gets a reference to the given float64 and assigns it to the MsgThroughputIn field.
func (o *NamespaceBundleStats) SetMsgThroughputIn(v float64) {
	o.MsgThroughputIn = &v
}

// GetMsgThroughputOut returns the MsgThroughputOut field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetMsgThroughputOut() float64 {
	if o == nil || o.MsgThroughputOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgThroughputOut
}

// GetMsgThroughputOutOk returns a tuple with the MsgThroughputOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetMsgThroughputOutOk() (*float64, bool) {
	if o == nil || o.MsgThroughputOut == nil {
		return nil, false
	}
	return o.MsgThroughputOut, true
}

// HasMsgThroughputOut returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasMsgThroughputOut() bool {
	if o != nil && o.MsgThroughputOut != nil {
		return true
	}

	return false
}

// SetMsgThroughputOut gets a reference to the given float64 and assigns it to the MsgThroughputOut field.
func (o *NamespaceBundleStats) SetMsgThroughputOut(v float64) {
	o.MsgThroughputOut = &v
}

// GetProducerCount returns the ProducerCount field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetProducerCount() int32 {
	if o == nil || o.ProducerCount == nil {
		var ret int32
		return ret
	}
	return *o.ProducerCount
}

// GetProducerCountOk returns a tuple with the ProducerCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetProducerCountOk() (*int32, bool) {
	if o == nil || o.ProducerCount == nil {
		return nil, false
	}
	return o.ProducerCount, true
}

// HasProducerCount returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasProducerCount() bool {
	if o != nil && o.ProducerCount != nil {
		return true
	}

	return false
}

// SetProducerCount gets a reference to the given int32 and assigns it to the ProducerCount field.
func (o *NamespaceBundleStats) SetProducerCount(v int32) {
	o.ProducerCount = &v
}

// GetTopics returns the Topics field value if set, zero value otherwise.
func (o *NamespaceBundleStats) GetTopics() int64 {
	if o == nil || o.Topics == nil {
		var ret int64
		return ret
	}
	return *o.Topics
}

// GetTopicsOk returns a tuple with the Topics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceBundleStats) GetTopicsOk() (*int64, bool) {
	if o == nil || o.Topics == nil {
		return nil, false
	}
	return o.Topics, true
}

// HasTopics returns a boolean if a field has been set.
func (o *NamespaceBundleStats) HasTopics() bool {
	if o != nil && o.Topics != nil {
		return true
	}

	return false
}

// SetTopics gets a reference to the given int64 and assigns it to the Topics field.
func (o *NamespaceBundleStats) SetTopics(v int64) {
	o.Topics = &v
}

func (o NamespaceBundleStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CacheSize != nil {
		toSerialize["cacheSize"] = o.CacheSize
	}
	if o.ConsumerCount != nil {
		toSerialize["consumerCount"] = o.ConsumerCount
	}
	if o.MsgRateIn != nil {
		toSerialize["msgRateIn"] = o.MsgRateIn
	}
	if o.MsgRateOut != nil {
		toSerialize["msgRateOut"] = o.MsgRateOut
	}
	if o.MsgThroughputIn != nil {
		toSerialize["msgThroughputIn"] = o.MsgThroughputIn
	}
	if o.MsgThroughputOut != nil {
		toSerialize["msgThroughputOut"] = o.MsgThroughputOut
	}
	if o.ProducerCount != nil {
		toSerialize["producerCount"] = o.ProducerCount
	}
	if o.Topics != nil {
		toSerialize["topics"] = o.Topics
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceBundleStats struct {
	value *NamespaceBundleStats
	isSet bool
}

func (v NullableNamespaceBundleStats) Get() *NamespaceBundleStats {
	return v.value
}

func (v *NullableNamespaceBundleStats) Set(val *NamespaceBundleStats) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceBundleStats) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceBundleStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceBundleStats(val *NamespaceBundleStats) *NullableNamespaceBundleStats {
	return &NullableNamespaceBundleStats{value: val, isSet: true}
}

func (v NullableNamespaceBundleStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceBundleStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


