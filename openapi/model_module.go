/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Module struct for Module
type Module struct {
	Layer *map[string]interface{} `json:"layer,omitempty"`
	Name *string `json:"name,omitempty"`
	Descriptor *ModuleDescriptor `json:"descriptor,omitempty"`
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`
	Annotations *[]map[string]interface{} `json:"annotations,omitempty"`
	DeclaredAnnotations *[]map[string]interface{} `json:"declaredAnnotations,omitempty"`
	Named *bool `json:"named,omitempty"`
	Packages *[]string `json:"packages,omitempty"`
}

// NewModule instantiates a new Module object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModule() *Module {
	this := Module{}
	return &this
}

// NewModuleWithDefaults instantiates a new Module object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModuleWithDefaults() *Module {
	this := Module{}
	return &this
}

// GetLayer returns the Layer field value if set, zero value otherwise.
func (o *Module) GetLayer() map[string]interface{} {
	if o == nil || o.Layer == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Layer
}

// GetLayerOk returns a tuple with the Layer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetLayerOk() (*map[string]interface{}, bool) {
	if o == nil || o.Layer == nil {
		return nil, false
	}
	return o.Layer, true
}

// HasLayer returns a boolean if a field has been set.
func (o *Module) HasLayer() bool {
	if o != nil && o.Layer != nil {
		return true
	}

	return false
}

// SetLayer gets a reference to the given map[string]interface{} and assigns it to the Layer field.
func (o *Module) SetLayer(v map[string]interface{}) {
	o.Layer = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Module) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Module) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Module) SetName(v string) {
	o.Name = &v
}

// GetDescriptor returns the Descriptor field value if set, zero value otherwise.
func (o *Module) GetDescriptor() ModuleDescriptor {
	if o == nil || o.Descriptor == nil {
		var ret ModuleDescriptor
		return ret
	}
	return *o.Descriptor
}

// GetDescriptorOk returns a tuple with the Descriptor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetDescriptorOk() (*ModuleDescriptor, bool) {
	if o == nil || o.Descriptor == nil {
		return nil, false
	}
	return o.Descriptor, true
}

// HasDescriptor returns a boolean if a field has been set.
func (o *Module) HasDescriptor() bool {
	if o != nil && o.Descriptor != nil {
		return true
	}

	return false
}

// SetDescriptor gets a reference to the given ModuleDescriptor and assigns it to the Descriptor field.
func (o *Module) SetDescriptor(v ModuleDescriptor) {
	o.Descriptor = &v
}

// GetClassLoader returns the ClassLoader field value if set, zero value otherwise.
func (o *Module) GetClassLoader() ClassLoader {
	if o == nil || o.ClassLoader == nil {
		var ret ClassLoader
		return ret
	}
	return *o.ClassLoader
}

// GetClassLoaderOk returns a tuple with the ClassLoader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetClassLoaderOk() (*ClassLoader, bool) {
	if o == nil || o.ClassLoader == nil {
		return nil, false
	}
	return o.ClassLoader, true
}

// HasClassLoader returns a boolean if a field has been set.
func (o *Module) HasClassLoader() bool {
	if o != nil && o.ClassLoader != nil {
		return true
	}

	return false
}

// SetClassLoader gets a reference to the given ClassLoader and assigns it to the ClassLoader field.
func (o *Module) SetClassLoader(v ClassLoader) {
	o.ClassLoader = &v
}

// GetAnnotations returns the Annotations field value if set, zero value otherwise.
func (o *Module) GetAnnotations() []map[string]interface{} {
	if o == nil || o.Annotations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.Annotations
}

// GetAnnotationsOk returns a tuple with the Annotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetAnnotationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.Annotations == nil {
		return nil, false
	}
	return o.Annotations, true
}

// HasAnnotations returns a boolean if a field has been set.
func (o *Module) HasAnnotations() bool {
	if o != nil && o.Annotations != nil {
		return true
	}

	return false
}

// SetAnnotations gets a reference to the given []map[string]interface{} and assigns it to the Annotations field.
func (o *Module) SetAnnotations(v []map[string]interface{}) {
	o.Annotations = &v
}

// GetDeclaredAnnotations returns the DeclaredAnnotations field value if set, zero value otherwise.
func (o *Module) GetDeclaredAnnotations() []map[string]interface{} {
	if o == nil || o.DeclaredAnnotations == nil {
		var ret []map[string]interface{}
		return ret
	}
	return *o.DeclaredAnnotations
}

// GetDeclaredAnnotationsOk returns a tuple with the DeclaredAnnotations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetDeclaredAnnotationsOk() (*[]map[string]interface{}, bool) {
	if o == nil || o.DeclaredAnnotations == nil {
		return nil, false
	}
	return o.DeclaredAnnotations, true
}

// HasDeclaredAnnotations returns a boolean if a field has been set.
func (o *Module) HasDeclaredAnnotations() bool {
	if o != nil && o.DeclaredAnnotations != nil {
		return true
	}

	return false
}

// SetDeclaredAnnotations gets a reference to the given []map[string]interface{} and assigns it to the DeclaredAnnotations field.
func (o *Module) SetDeclaredAnnotations(v []map[string]interface{}) {
	o.DeclaredAnnotations = &v
}

// GetNamed returns the Named field value if set, zero value otherwise.
func (o *Module) GetNamed() bool {
	if o == nil || o.Named == nil {
		var ret bool
		return ret
	}
	return *o.Named
}

// GetNamedOk returns a tuple with the Named field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetNamedOk() (*bool, bool) {
	if o == nil || o.Named == nil {
		return nil, false
	}
	return o.Named, true
}

// HasNamed returns a boolean if a field has been set.
func (o *Module) HasNamed() bool {
	if o != nil && o.Named != nil {
		return true
	}

	return false
}

// SetNamed gets a reference to the given bool and assigns it to the Named field.
func (o *Module) SetNamed(v bool) {
	o.Named = &v
}

// GetPackages returns the Packages field value if set, zero value otherwise.
func (o *Module) GetPackages() []string {
	if o == nil || o.Packages == nil {
		var ret []string
		return ret
	}
	return *o.Packages
}

// GetPackagesOk returns a tuple with the Packages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Module) GetPackagesOk() (*[]string, bool) {
	if o == nil || o.Packages == nil {
		return nil, false
	}
	return o.Packages, true
}

// HasPackages returns a boolean if a field has been set.
func (o *Module) HasPackages() bool {
	if o != nil && o.Packages != nil {
		return true
	}

	return false
}

// SetPackages gets a reference to the given []string and assigns it to the Packages field.
func (o *Module) SetPackages(v []string) {
	o.Packages = &v
}

func (o Module) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Layer != nil {
		toSerialize["layer"] = o.Layer
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Descriptor != nil {
		toSerialize["descriptor"] = o.Descriptor
	}
	if o.ClassLoader != nil {
		toSerialize["classLoader"] = o.ClassLoader
	}
	if o.Annotations != nil {
		toSerialize["annotations"] = o.Annotations
	}
	if o.DeclaredAnnotations != nil {
		toSerialize["declaredAnnotations"] = o.DeclaredAnnotations
	}
	if o.Named != nil {
		toSerialize["named"] = o.Named
	}
	if o.Packages != nil {
		toSerialize["packages"] = o.Packages
	}
	return json.Marshal(toSerialize)
}

type NullableModule struct {
	value *Module
	isSet bool
}

func (v NullableModule) Get() *Module {
	return v.value
}

func (v *NullableModule) Set(val *Module) {
	v.value = val
	v.isSet = true
}

func (v NullableModule) IsSet() bool {
	return v.isSet
}

func (v *NullableModule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModule(val *Module) *NullableModule {
	return &NullableModule{value: val, isSet: true}
}

func (v NullableModule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


