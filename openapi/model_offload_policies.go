/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// OffloadPolicies struct for OffloadPolicies
type OffloadPolicies struct {
	ManagedLedgerOffloadPrefetchRounds *int32 `json:"managedLedgerOffloadPrefetchRounds,omitempty"`
	S3ManagedLedgerOffloadRegion *string `json:"s3ManagedLedgerOffloadRegion,omitempty"`
	S3ManagedLedgerOffloadBucket *string `json:"s3ManagedLedgerOffloadBucket,omitempty"`
	S3ManagedLedgerOffloadServiceEndpoint *string `json:"s3ManagedLedgerOffloadServiceEndpoint,omitempty"`
	S3ManagedLedgerOffloadMaxBlockSizeInBytes *int32 `json:"s3ManagedLedgerOffloadMaxBlockSizeInBytes,omitempty"`
	S3ManagedLedgerOffloadReadBufferSizeInBytes *int32 `json:"s3ManagedLedgerOffloadReadBufferSizeInBytes,omitempty"`
	S3ManagedLedgerOffloadCredentialId *string `json:"s3ManagedLedgerOffloadCredentialId,omitempty"`
	S3ManagedLedgerOffloadCredentialSecret *string `json:"s3ManagedLedgerOffloadCredentialSecret,omitempty"`
	S3ManagedLedgerOffloadRole *string `json:"s3ManagedLedgerOffloadRole,omitempty"`
	S3ManagedLedgerOffloadRoleSessionName *string `json:"s3ManagedLedgerOffloadRoleSessionName,omitempty"`
	GcsManagedLedgerOffloadRegion *string `json:"gcsManagedLedgerOffloadRegion,omitempty"`
	GcsManagedLedgerOffloadBucket *string `json:"gcsManagedLedgerOffloadBucket,omitempty"`
	GcsManagedLedgerOffloadMaxBlockSizeInBytes *int32 `json:"gcsManagedLedgerOffloadMaxBlockSizeInBytes,omitempty"`
	GcsManagedLedgerOffloadReadBufferSizeInBytes *int32 `json:"gcsManagedLedgerOffloadReadBufferSizeInBytes,omitempty"`
	GcsManagedLedgerOffloadServiceAccountKeyFile *string `json:"gcsManagedLedgerOffloadServiceAccountKeyFile,omitempty"`
	FileSystemProfilePath *string `json:"fileSystemProfilePath,omitempty"`
	FileSystemURI *string `json:"fileSystemURI,omitempty"`
	ManagedLedgerOffloadBucket *string `json:"managedLedgerOffloadBucket,omitempty"`
	ManagedLedgerOffloadedReadPriority *string `json:"managedLedgerOffloadedReadPriority,omitempty"`
	ManagedLedgerOffloadRegion *string `json:"managedLedgerOffloadRegion,omitempty"`
	ManagedLedgerOffloadServiceEndpoint *string `json:"managedLedgerOffloadServiceEndpoint,omitempty"`
	ManagedLedgerOffloadMaxBlockSizeInBytes *int32 `json:"managedLedgerOffloadMaxBlockSizeInBytes,omitempty"`
	ManagedLedgerOffloadReadBufferSizeInBytes *int32 `json:"managedLedgerOffloadReadBufferSizeInBytes,omitempty"`
	ManagedLedgerOffloadThresholdInBytes *int64 `json:"managedLedgerOffloadThresholdInBytes,omitempty"`
	ManagedLedgerOffloadDeletionLagInMillis *int64 `json:"managedLedgerOffloadDeletionLagInMillis,omitempty"`
	ManagedLedgerOffloadDriver *string `json:"managedLedgerOffloadDriver,omitempty"`
	OffloadersDirectory *string `json:"offloadersDirectory,omitempty"`
	ManagedLedgerOffloadMaxThreads *int32 `json:"managedLedgerOffloadMaxThreads,omitempty"`
}

// NewOffloadPolicies instantiates a new OffloadPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOffloadPolicies() *OffloadPolicies {
	this := OffloadPolicies{}
	return &this
}

// NewOffloadPoliciesWithDefaults instantiates a new OffloadPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOffloadPoliciesWithDefaults() *OffloadPolicies {
	this := OffloadPolicies{}
	return &this
}

// GetManagedLedgerOffloadPrefetchRounds returns the ManagedLedgerOffloadPrefetchRounds field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadPrefetchRounds() int32 {
	if o == nil || o.ManagedLedgerOffloadPrefetchRounds == nil {
		var ret int32
		return ret
	}
	return *o.ManagedLedgerOffloadPrefetchRounds
}

// GetManagedLedgerOffloadPrefetchRoundsOk returns a tuple with the ManagedLedgerOffloadPrefetchRounds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadPrefetchRoundsOk() (*int32, bool) {
	if o == nil || o.ManagedLedgerOffloadPrefetchRounds == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadPrefetchRounds, true
}

// HasManagedLedgerOffloadPrefetchRounds returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadPrefetchRounds() bool {
	if o != nil && o.ManagedLedgerOffloadPrefetchRounds != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadPrefetchRounds gets a reference to the given int32 and assigns it to the ManagedLedgerOffloadPrefetchRounds field.
func (o *OffloadPolicies) SetManagedLedgerOffloadPrefetchRounds(v int32) {
	o.ManagedLedgerOffloadPrefetchRounds = &v
}

// GetS3ManagedLedgerOffloadRegion returns the S3ManagedLedgerOffloadRegion field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRegion() string {
	if o == nil || o.S3ManagedLedgerOffloadRegion == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadRegion
}

// GetS3ManagedLedgerOffloadRegionOk returns a tuple with the S3ManagedLedgerOffloadRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRegionOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadRegion == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadRegion, true
}

// HasS3ManagedLedgerOffloadRegion returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadRegion() bool {
	if o != nil && o.S3ManagedLedgerOffloadRegion != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadRegion gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadRegion field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadRegion(v string) {
	o.S3ManagedLedgerOffloadRegion = &v
}

// GetS3ManagedLedgerOffloadBucket returns the S3ManagedLedgerOffloadBucket field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadBucket() string {
	if o == nil || o.S3ManagedLedgerOffloadBucket == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadBucket
}

// GetS3ManagedLedgerOffloadBucketOk returns a tuple with the S3ManagedLedgerOffloadBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadBucketOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadBucket == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadBucket, true
}

// HasS3ManagedLedgerOffloadBucket returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadBucket() bool {
	if o != nil && o.S3ManagedLedgerOffloadBucket != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadBucket gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadBucket field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadBucket(v string) {
	o.S3ManagedLedgerOffloadBucket = &v
}

// GetS3ManagedLedgerOffloadServiceEndpoint returns the S3ManagedLedgerOffloadServiceEndpoint field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadServiceEndpoint() string {
	if o == nil || o.S3ManagedLedgerOffloadServiceEndpoint == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadServiceEndpoint
}

// GetS3ManagedLedgerOffloadServiceEndpointOk returns a tuple with the S3ManagedLedgerOffloadServiceEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadServiceEndpointOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadServiceEndpoint == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadServiceEndpoint, true
}

// HasS3ManagedLedgerOffloadServiceEndpoint returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadServiceEndpoint() bool {
	if o != nil && o.S3ManagedLedgerOffloadServiceEndpoint != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadServiceEndpoint gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadServiceEndpoint field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadServiceEndpoint(v string) {
	o.S3ManagedLedgerOffloadServiceEndpoint = &v
}

// GetS3ManagedLedgerOffloadMaxBlockSizeInBytes returns the S3ManagedLedgerOffloadMaxBlockSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadMaxBlockSizeInBytes() int32 {
	if o == nil || o.S3ManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.S3ManagedLedgerOffloadMaxBlockSizeInBytes
}

// GetS3ManagedLedgerOffloadMaxBlockSizeInBytesOk returns a tuple with the S3ManagedLedgerOffloadMaxBlockSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadMaxBlockSizeInBytesOk() (*int32, bool) {
	if o == nil || o.S3ManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadMaxBlockSizeInBytes, true
}

// HasS3ManagedLedgerOffloadMaxBlockSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadMaxBlockSizeInBytes() bool {
	if o != nil && o.S3ManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadMaxBlockSizeInBytes gets a reference to the given int32 and assigns it to the S3ManagedLedgerOffloadMaxBlockSizeInBytes field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadMaxBlockSizeInBytes(v int32) {
	o.S3ManagedLedgerOffloadMaxBlockSizeInBytes = &v
}

// GetS3ManagedLedgerOffloadReadBufferSizeInBytes returns the S3ManagedLedgerOffloadReadBufferSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadReadBufferSizeInBytes() int32 {
	if o == nil || o.S3ManagedLedgerOffloadReadBufferSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.S3ManagedLedgerOffloadReadBufferSizeInBytes
}

// GetS3ManagedLedgerOffloadReadBufferSizeInBytesOk returns a tuple with the S3ManagedLedgerOffloadReadBufferSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadReadBufferSizeInBytesOk() (*int32, bool) {
	if o == nil || o.S3ManagedLedgerOffloadReadBufferSizeInBytes == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadReadBufferSizeInBytes, true
}

// HasS3ManagedLedgerOffloadReadBufferSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadReadBufferSizeInBytes() bool {
	if o != nil && o.S3ManagedLedgerOffloadReadBufferSizeInBytes != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadReadBufferSizeInBytes gets a reference to the given int32 and assigns it to the S3ManagedLedgerOffloadReadBufferSizeInBytes field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadReadBufferSizeInBytes(v int32) {
	o.S3ManagedLedgerOffloadReadBufferSizeInBytes = &v
}

// GetS3ManagedLedgerOffloadCredentialId returns the S3ManagedLedgerOffloadCredentialId field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadCredentialId() string {
	if o == nil || o.S3ManagedLedgerOffloadCredentialId == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadCredentialId
}

// GetS3ManagedLedgerOffloadCredentialIdOk returns a tuple with the S3ManagedLedgerOffloadCredentialId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadCredentialIdOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadCredentialId == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadCredentialId, true
}

// HasS3ManagedLedgerOffloadCredentialId returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadCredentialId() bool {
	if o != nil && o.S3ManagedLedgerOffloadCredentialId != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadCredentialId gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadCredentialId field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadCredentialId(v string) {
	o.S3ManagedLedgerOffloadCredentialId = &v
}

// GetS3ManagedLedgerOffloadCredentialSecret returns the S3ManagedLedgerOffloadCredentialSecret field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadCredentialSecret() string {
	if o == nil || o.S3ManagedLedgerOffloadCredentialSecret == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadCredentialSecret
}

// GetS3ManagedLedgerOffloadCredentialSecretOk returns a tuple with the S3ManagedLedgerOffloadCredentialSecret field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadCredentialSecretOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadCredentialSecret == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadCredentialSecret, true
}

// HasS3ManagedLedgerOffloadCredentialSecret returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadCredentialSecret() bool {
	if o != nil && o.S3ManagedLedgerOffloadCredentialSecret != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadCredentialSecret gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadCredentialSecret field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadCredentialSecret(v string) {
	o.S3ManagedLedgerOffloadCredentialSecret = &v
}

// GetS3ManagedLedgerOffloadRole returns the S3ManagedLedgerOffloadRole field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRole() string {
	if o == nil || o.S3ManagedLedgerOffloadRole == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadRole
}

// GetS3ManagedLedgerOffloadRoleOk returns a tuple with the S3ManagedLedgerOffloadRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRoleOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadRole == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadRole, true
}

// HasS3ManagedLedgerOffloadRole returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadRole() bool {
	if o != nil && o.S3ManagedLedgerOffloadRole != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadRole gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadRole field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadRole(v string) {
	o.S3ManagedLedgerOffloadRole = &v
}

// GetS3ManagedLedgerOffloadRoleSessionName returns the S3ManagedLedgerOffloadRoleSessionName field value if set, zero value otherwise.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRoleSessionName() string {
	if o == nil || o.S3ManagedLedgerOffloadRoleSessionName == nil {
		var ret string
		return ret
	}
	return *o.S3ManagedLedgerOffloadRoleSessionName
}

// GetS3ManagedLedgerOffloadRoleSessionNameOk returns a tuple with the S3ManagedLedgerOffloadRoleSessionName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetS3ManagedLedgerOffloadRoleSessionNameOk() (*string, bool) {
	if o == nil || o.S3ManagedLedgerOffloadRoleSessionName == nil {
		return nil, false
	}
	return o.S3ManagedLedgerOffloadRoleSessionName, true
}

// HasS3ManagedLedgerOffloadRoleSessionName returns a boolean if a field has been set.
func (o *OffloadPolicies) HasS3ManagedLedgerOffloadRoleSessionName() bool {
	if o != nil && o.S3ManagedLedgerOffloadRoleSessionName != nil {
		return true
	}

	return false
}

// SetS3ManagedLedgerOffloadRoleSessionName gets a reference to the given string and assigns it to the S3ManagedLedgerOffloadRoleSessionName field.
func (o *OffloadPolicies) SetS3ManagedLedgerOffloadRoleSessionName(v string) {
	o.S3ManagedLedgerOffloadRoleSessionName = &v
}

// GetGcsManagedLedgerOffloadRegion returns the GcsManagedLedgerOffloadRegion field value if set, zero value otherwise.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadRegion() string {
	if o == nil || o.GcsManagedLedgerOffloadRegion == nil {
		var ret string
		return ret
	}
	return *o.GcsManagedLedgerOffloadRegion
}

// GetGcsManagedLedgerOffloadRegionOk returns a tuple with the GcsManagedLedgerOffloadRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadRegionOk() (*string, bool) {
	if o == nil || o.GcsManagedLedgerOffloadRegion == nil {
		return nil, false
	}
	return o.GcsManagedLedgerOffloadRegion, true
}

// HasGcsManagedLedgerOffloadRegion returns a boolean if a field has been set.
func (o *OffloadPolicies) HasGcsManagedLedgerOffloadRegion() bool {
	if o != nil && o.GcsManagedLedgerOffloadRegion != nil {
		return true
	}

	return false
}

// SetGcsManagedLedgerOffloadRegion gets a reference to the given string and assigns it to the GcsManagedLedgerOffloadRegion field.
func (o *OffloadPolicies) SetGcsManagedLedgerOffloadRegion(v string) {
	o.GcsManagedLedgerOffloadRegion = &v
}

// GetGcsManagedLedgerOffloadBucket returns the GcsManagedLedgerOffloadBucket field value if set, zero value otherwise.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadBucket() string {
	if o == nil || o.GcsManagedLedgerOffloadBucket == nil {
		var ret string
		return ret
	}
	return *o.GcsManagedLedgerOffloadBucket
}

// GetGcsManagedLedgerOffloadBucketOk returns a tuple with the GcsManagedLedgerOffloadBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadBucketOk() (*string, bool) {
	if o == nil || o.GcsManagedLedgerOffloadBucket == nil {
		return nil, false
	}
	return o.GcsManagedLedgerOffloadBucket, true
}

// HasGcsManagedLedgerOffloadBucket returns a boolean if a field has been set.
func (o *OffloadPolicies) HasGcsManagedLedgerOffloadBucket() bool {
	if o != nil && o.GcsManagedLedgerOffloadBucket != nil {
		return true
	}

	return false
}

// SetGcsManagedLedgerOffloadBucket gets a reference to the given string and assigns it to the GcsManagedLedgerOffloadBucket field.
func (o *OffloadPolicies) SetGcsManagedLedgerOffloadBucket(v string) {
	o.GcsManagedLedgerOffloadBucket = &v
}

// GetGcsManagedLedgerOffloadMaxBlockSizeInBytes returns the GcsManagedLedgerOffloadMaxBlockSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadMaxBlockSizeInBytes() int32 {
	if o == nil || o.GcsManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.GcsManagedLedgerOffloadMaxBlockSizeInBytes
}

// GetGcsManagedLedgerOffloadMaxBlockSizeInBytesOk returns a tuple with the GcsManagedLedgerOffloadMaxBlockSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadMaxBlockSizeInBytesOk() (*int32, bool) {
	if o == nil || o.GcsManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		return nil, false
	}
	return o.GcsManagedLedgerOffloadMaxBlockSizeInBytes, true
}

// HasGcsManagedLedgerOffloadMaxBlockSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasGcsManagedLedgerOffloadMaxBlockSizeInBytes() bool {
	if o != nil && o.GcsManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		return true
	}

	return false
}

// SetGcsManagedLedgerOffloadMaxBlockSizeInBytes gets a reference to the given int32 and assigns it to the GcsManagedLedgerOffloadMaxBlockSizeInBytes field.
func (o *OffloadPolicies) SetGcsManagedLedgerOffloadMaxBlockSizeInBytes(v int32) {
	o.GcsManagedLedgerOffloadMaxBlockSizeInBytes = &v
}

// GetGcsManagedLedgerOffloadReadBufferSizeInBytes returns the GcsManagedLedgerOffloadReadBufferSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadReadBufferSizeInBytes() int32 {
	if o == nil || o.GcsManagedLedgerOffloadReadBufferSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.GcsManagedLedgerOffloadReadBufferSizeInBytes
}

// GetGcsManagedLedgerOffloadReadBufferSizeInBytesOk returns a tuple with the GcsManagedLedgerOffloadReadBufferSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadReadBufferSizeInBytesOk() (*int32, bool) {
	if o == nil || o.GcsManagedLedgerOffloadReadBufferSizeInBytes == nil {
		return nil, false
	}
	return o.GcsManagedLedgerOffloadReadBufferSizeInBytes, true
}

// HasGcsManagedLedgerOffloadReadBufferSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasGcsManagedLedgerOffloadReadBufferSizeInBytes() bool {
	if o != nil && o.GcsManagedLedgerOffloadReadBufferSizeInBytes != nil {
		return true
	}

	return false
}

// SetGcsManagedLedgerOffloadReadBufferSizeInBytes gets a reference to the given int32 and assigns it to the GcsManagedLedgerOffloadReadBufferSizeInBytes field.
func (o *OffloadPolicies) SetGcsManagedLedgerOffloadReadBufferSizeInBytes(v int32) {
	o.GcsManagedLedgerOffloadReadBufferSizeInBytes = &v
}

// GetGcsManagedLedgerOffloadServiceAccountKeyFile returns the GcsManagedLedgerOffloadServiceAccountKeyFile field value if set, zero value otherwise.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadServiceAccountKeyFile() string {
	if o == nil || o.GcsManagedLedgerOffloadServiceAccountKeyFile == nil {
		var ret string
		return ret
	}
	return *o.GcsManagedLedgerOffloadServiceAccountKeyFile
}

// GetGcsManagedLedgerOffloadServiceAccountKeyFileOk returns a tuple with the GcsManagedLedgerOffloadServiceAccountKeyFile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetGcsManagedLedgerOffloadServiceAccountKeyFileOk() (*string, bool) {
	if o == nil || o.GcsManagedLedgerOffloadServiceAccountKeyFile == nil {
		return nil, false
	}
	return o.GcsManagedLedgerOffloadServiceAccountKeyFile, true
}

// HasGcsManagedLedgerOffloadServiceAccountKeyFile returns a boolean if a field has been set.
func (o *OffloadPolicies) HasGcsManagedLedgerOffloadServiceAccountKeyFile() bool {
	if o != nil && o.GcsManagedLedgerOffloadServiceAccountKeyFile != nil {
		return true
	}

	return false
}

// SetGcsManagedLedgerOffloadServiceAccountKeyFile gets a reference to the given string and assigns it to the GcsManagedLedgerOffloadServiceAccountKeyFile field.
func (o *OffloadPolicies) SetGcsManagedLedgerOffloadServiceAccountKeyFile(v string) {
	o.GcsManagedLedgerOffloadServiceAccountKeyFile = &v
}

// GetFileSystemProfilePath returns the FileSystemProfilePath field value if set, zero value otherwise.
func (o *OffloadPolicies) GetFileSystemProfilePath() string {
	if o == nil || o.FileSystemProfilePath == nil {
		var ret string
		return ret
	}
	return *o.FileSystemProfilePath
}

// GetFileSystemProfilePathOk returns a tuple with the FileSystemProfilePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetFileSystemProfilePathOk() (*string, bool) {
	if o == nil || o.FileSystemProfilePath == nil {
		return nil, false
	}
	return o.FileSystemProfilePath, true
}

// HasFileSystemProfilePath returns a boolean if a field has been set.
func (o *OffloadPolicies) HasFileSystemProfilePath() bool {
	if o != nil && o.FileSystemProfilePath != nil {
		return true
	}

	return false
}

// SetFileSystemProfilePath gets a reference to the given string and assigns it to the FileSystemProfilePath field.
func (o *OffloadPolicies) SetFileSystemProfilePath(v string) {
	o.FileSystemProfilePath = &v
}

// GetFileSystemURI returns the FileSystemURI field value if set, zero value otherwise.
func (o *OffloadPolicies) GetFileSystemURI() string {
	if o == nil || o.FileSystemURI == nil {
		var ret string
		return ret
	}
	return *o.FileSystemURI
}

// GetFileSystemURIOk returns a tuple with the FileSystemURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetFileSystemURIOk() (*string, bool) {
	if o == nil || o.FileSystemURI == nil {
		return nil, false
	}
	return o.FileSystemURI, true
}

// HasFileSystemURI returns a boolean if a field has been set.
func (o *OffloadPolicies) HasFileSystemURI() bool {
	if o != nil && o.FileSystemURI != nil {
		return true
	}

	return false
}

// SetFileSystemURI gets a reference to the given string and assigns it to the FileSystemURI field.
func (o *OffloadPolicies) SetFileSystemURI(v string) {
	o.FileSystemURI = &v
}

// GetManagedLedgerOffloadBucket returns the ManagedLedgerOffloadBucket field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadBucket() string {
	if o == nil || o.ManagedLedgerOffloadBucket == nil {
		var ret string
		return ret
	}
	return *o.ManagedLedgerOffloadBucket
}

// GetManagedLedgerOffloadBucketOk returns a tuple with the ManagedLedgerOffloadBucket field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadBucketOk() (*string, bool) {
	if o == nil || o.ManagedLedgerOffloadBucket == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadBucket, true
}

// HasManagedLedgerOffloadBucket returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadBucket() bool {
	if o != nil && o.ManagedLedgerOffloadBucket != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadBucket gets a reference to the given string and assigns it to the ManagedLedgerOffloadBucket field.
func (o *OffloadPolicies) SetManagedLedgerOffloadBucket(v string) {
	o.ManagedLedgerOffloadBucket = &v
}

// GetManagedLedgerOffloadedReadPriority returns the ManagedLedgerOffloadedReadPriority field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadedReadPriority() string {
	if o == nil || o.ManagedLedgerOffloadedReadPriority == nil {
		var ret string
		return ret
	}
	return *o.ManagedLedgerOffloadedReadPriority
}

// GetManagedLedgerOffloadedReadPriorityOk returns a tuple with the ManagedLedgerOffloadedReadPriority field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadedReadPriorityOk() (*string, bool) {
	if o == nil || o.ManagedLedgerOffloadedReadPriority == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadedReadPriority, true
}

// HasManagedLedgerOffloadedReadPriority returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadedReadPriority() bool {
	if o != nil && o.ManagedLedgerOffloadedReadPriority != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadedReadPriority gets a reference to the given string and assigns it to the ManagedLedgerOffloadedReadPriority field.
func (o *OffloadPolicies) SetManagedLedgerOffloadedReadPriority(v string) {
	o.ManagedLedgerOffloadedReadPriority = &v
}

// GetManagedLedgerOffloadRegion returns the ManagedLedgerOffloadRegion field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadRegion() string {
	if o == nil || o.ManagedLedgerOffloadRegion == nil {
		var ret string
		return ret
	}
	return *o.ManagedLedgerOffloadRegion
}

// GetManagedLedgerOffloadRegionOk returns a tuple with the ManagedLedgerOffloadRegion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadRegionOk() (*string, bool) {
	if o == nil || o.ManagedLedgerOffloadRegion == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadRegion, true
}

// HasManagedLedgerOffloadRegion returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadRegion() bool {
	if o != nil && o.ManagedLedgerOffloadRegion != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadRegion gets a reference to the given string and assigns it to the ManagedLedgerOffloadRegion field.
func (o *OffloadPolicies) SetManagedLedgerOffloadRegion(v string) {
	o.ManagedLedgerOffloadRegion = &v
}

// GetManagedLedgerOffloadServiceEndpoint returns the ManagedLedgerOffloadServiceEndpoint field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadServiceEndpoint() string {
	if o == nil || o.ManagedLedgerOffloadServiceEndpoint == nil {
		var ret string
		return ret
	}
	return *o.ManagedLedgerOffloadServiceEndpoint
}

// GetManagedLedgerOffloadServiceEndpointOk returns a tuple with the ManagedLedgerOffloadServiceEndpoint field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadServiceEndpointOk() (*string, bool) {
	if o == nil || o.ManagedLedgerOffloadServiceEndpoint == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadServiceEndpoint, true
}

// HasManagedLedgerOffloadServiceEndpoint returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadServiceEndpoint() bool {
	if o != nil && o.ManagedLedgerOffloadServiceEndpoint != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadServiceEndpoint gets a reference to the given string and assigns it to the ManagedLedgerOffloadServiceEndpoint field.
func (o *OffloadPolicies) SetManagedLedgerOffloadServiceEndpoint(v string) {
	o.ManagedLedgerOffloadServiceEndpoint = &v
}

// GetManagedLedgerOffloadMaxBlockSizeInBytes returns the ManagedLedgerOffloadMaxBlockSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadMaxBlockSizeInBytes() int32 {
	if o == nil || o.ManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.ManagedLedgerOffloadMaxBlockSizeInBytes
}

// GetManagedLedgerOffloadMaxBlockSizeInBytesOk returns a tuple with the ManagedLedgerOffloadMaxBlockSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadMaxBlockSizeInBytesOk() (*int32, bool) {
	if o == nil || o.ManagedLedgerOffloadMaxBlockSizeInBytes == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadMaxBlockSizeInBytes, true
}

// HasManagedLedgerOffloadMaxBlockSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadMaxBlockSizeInBytes() bool {
	if o != nil && o.ManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadMaxBlockSizeInBytes gets a reference to the given int32 and assigns it to the ManagedLedgerOffloadMaxBlockSizeInBytes field.
func (o *OffloadPolicies) SetManagedLedgerOffloadMaxBlockSizeInBytes(v int32) {
	o.ManagedLedgerOffloadMaxBlockSizeInBytes = &v
}

// GetManagedLedgerOffloadReadBufferSizeInBytes returns the ManagedLedgerOffloadReadBufferSizeInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadReadBufferSizeInBytes() int32 {
	if o == nil || o.ManagedLedgerOffloadReadBufferSizeInBytes == nil {
		var ret int32
		return ret
	}
	return *o.ManagedLedgerOffloadReadBufferSizeInBytes
}

// GetManagedLedgerOffloadReadBufferSizeInBytesOk returns a tuple with the ManagedLedgerOffloadReadBufferSizeInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadReadBufferSizeInBytesOk() (*int32, bool) {
	if o == nil || o.ManagedLedgerOffloadReadBufferSizeInBytes == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadReadBufferSizeInBytes, true
}

// HasManagedLedgerOffloadReadBufferSizeInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadReadBufferSizeInBytes() bool {
	if o != nil && o.ManagedLedgerOffloadReadBufferSizeInBytes != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadReadBufferSizeInBytes gets a reference to the given int32 and assigns it to the ManagedLedgerOffloadReadBufferSizeInBytes field.
func (o *OffloadPolicies) SetManagedLedgerOffloadReadBufferSizeInBytes(v int32) {
	o.ManagedLedgerOffloadReadBufferSizeInBytes = &v
}

// GetManagedLedgerOffloadThresholdInBytes returns the ManagedLedgerOffloadThresholdInBytes field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadThresholdInBytes() int64 {
	if o == nil || o.ManagedLedgerOffloadThresholdInBytes == nil {
		var ret int64
		return ret
	}
	return *o.ManagedLedgerOffloadThresholdInBytes
}

// GetManagedLedgerOffloadThresholdInBytesOk returns a tuple with the ManagedLedgerOffloadThresholdInBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadThresholdInBytesOk() (*int64, bool) {
	if o == nil || o.ManagedLedgerOffloadThresholdInBytes == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadThresholdInBytes, true
}

// HasManagedLedgerOffloadThresholdInBytes returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadThresholdInBytes() bool {
	if o != nil && o.ManagedLedgerOffloadThresholdInBytes != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadThresholdInBytes gets a reference to the given int64 and assigns it to the ManagedLedgerOffloadThresholdInBytes field.
func (o *OffloadPolicies) SetManagedLedgerOffloadThresholdInBytes(v int64) {
	o.ManagedLedgerOffloadThresholdInBytes = &v
}

// GetManagedLedgerOffloadDeletionLagInMillis returns the ManagedLedgerOffloadDeletionLagInMillis field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadDeletionLagInMillis() int64 {
	if o == nil || o.ManagedLedgerOffloadDeletionLagInMillis == nil {
		var ret int64
		return ret
	}
	return *o.ManagedLedgerOffloadDeletionLagInMillis
}

// GetManagedLedgerOffloadDeletionLagInMillisOk returns a tuple with the ManagedLedgerOffloadDeletionLagInMillis field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadDeletionLagInMillisOk() (*int64, bool) {
	if o == nil || o.ManagedLedgerOffloadDeletionLagInMillis == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadDeletionLagInMillis, true
}

// HasManagedLedgerOffloadDeletionLagInMillis returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadDeletionLagInMillis() bool {
	if o != nil && o.ManagedLedgerOffloadDeletionLagInMillis != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadDeletionLagInMillis gets a reference to the given int64 and assigns it to the ManagedLedgerOffloadDeletionLagInMillis field.
func (o *OffloadPolicies) SetManagedLedgerOffloadDeletionLagInMillis(v int64) {
	o.ManagedLedgerOffloadDeletionLagInMillis = &v
}

// GetManagedLedgerOffloadDriver returns the ManagedLedgerOffloadDriver field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadDriver() string {
	if o == nil || o.ManagedLedgerOffloadDriver == nil {
		var ret string
		return ret
	}
	return *o.ManagedLedgerOffloadDriver
}

// GetManagedLedgerOffloadDriverOk returns a tuple with the ManagedLedgerOffloadDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadDriverOk() (*string, bool) {
	if o == nil || o.ManagedLedgerOffloadDriver == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadDriver, true
}

// HasManagedLedgerOffloadDriver returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadDriver() bool {
	if o != nil && o.ManagedLedgerOffloadDriver != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadDriver gets a reference to the given string and assigns it to the ManagedLedgerOffloadDriver field.
func (o *OffloadPolicies) SetManagedLedgerOffloadDriver(v string) {
	o.ManagedLedgerOffloadDriver = &v
}

// GetOffloadersDirectory returns the OffloadersDirectory field value if set, zero value otherwise.
func (o *OffloadPolicies) GetOffloadersDirectory() string {
	if o == nil || o.OffloadersDirectory == nil {
		var ret string
		return ret
	}
	return *o.OffloadersDirectory
}

// GetOffloadersDirectoryOk returns a tuple with the OffloadersDirectory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetOffloadersDirectoryOk() (*string, bool) {
	if o == nil || o.OffloadersDirectory == nil {
		return nil, false
	}
	return o.OffloadersDirectory, true
}

// HasOffloadersDirectory returns a boolean if a field has been set.
func (o *OffloadPolicies) HasOffloadersDirectory() bool {
	if o != nil && o.OffloadersDirectory != nil {
		return true
	}

	return false
}

// SetOffloadersDirectory gets a reference to the given string and assigns it to the OffloadersDirectory field.
func (o *OffloadPolicies) SetOffloadersDirectory(v string) {
	o.OffloadersDirectory = &v
}

// GetManagedLedgerOffloadMaxThreads returns the ManagedLedgerOffloadMaxThreads field value if set, zero value otherwise.
func (o *OffloadPolicies) GetManagedLedgerOffloadMaxThreads() int32 {
	if o == nil || o.ManagedLedgerOffloadMaxThreads == nil {
		var ret int32
		return ret
	}
	return *o.ManagedLedgerOffloadMaxThreads
}

// GetManagedLedgerOffloadMaxThreadsOk returns a tuple with the ManagedLedgerOffloadMaxThreads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OffloadPolicies) GetManagedLedgerOffloadMaxThreadsOk() (*int32, bool) {
	if o == nil || o.ManagedLedgerOffloadMaxThreads == nil {
		return nil, false
	}
	return o.ManagedLedgerOffloadMaxThreads, true
}

// HasManagedLedgerOffloadMaxThreads returns a boolean if a field has been set.
func (o *OffloadPolicies) HasManagedLedgerOffloadMaxThreads() bool {
	if o != nil && o.ManagedLedgerOffloadMaxThreads != nil {
		return true
	}

	return false
}

// SetManagedLedgerOffloadMaxThreads gets a reference to the given int32 and assigns it to the ManagedLedgerOffloadMaxThreads field.
func (o *OffloadPolicies) SetManagedLedgerOffloadMaxThreads(v int32) {
	o.ManagedLedgerOffloadMaxThreads = &v
}

func (o OffloadPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ManagedLedgerOffloadPrefetchRounds != nil {
		toSerialize["managedLedgerOffloadPrefetchRounds"] = o.ManagedLedgerOffloadPrefetchRounds
	}
	if o.S3ManagedLedgerOffloadRegion != nil {
		toSerialize["s3ManagedLedgerOffloadRegion"] = o.S3ManagedLedgerOffloadRegion
	}
	if o.S3ManagedLedgerOffloadBucket != nil {
		toSerialize["s3ManagedLedgerOffloadBucket"] = o.S3ManagedLedgerOffloadBucket
	}
	if o.S3ManagedLedgerOffloadServiceEndpoint != nil {
		toSerialize["s3ManagedLedgerOffloadServiceEndpoint"] = o.S3ManagedLedgerOffloadServiceEndpoint
	}
	if o.S3ManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		toSerialize["s3ManagedLedgerOffloadMaxBlockSizeInBytes"] = o.S3ManagedLedgerOffloadMaxBlockSizeInBytes
	}
	if o.S3ManagedLedgerOffloadReadBufferSizeInBytes != nil {
		toSerialize["s3ManagedLedgerOffloadReadBufferSizeInBytes"] = o.S3ManagedLedgerOffloadReadBufferSizeInBytes
	}
	if o.S3ManagedLedgerOffloadCredentialId != nil {
		toSerialize["s3ManagedLedgerOffloadCredentialId"] = o.S3ManagedLedgerOffloadCredentialId
	}
	if o.S3ManagedLedgerOffloadCredentialSecret != nil {
		toSerialize["s3ManagedLedgerOffloadCredentialSecret"] = o.S3ManagedLedgerOffloadCredentialSecret
	}
	if o.S3ManagedLedgerOffloadRole != nil {
		toSerialize["s3ManagedLedgerOffloadRole"] = o.S3ManagedLedgerOffloadRole
	}
	if o.S3ManagedLedgerOffloadRoleSessionName != nil {
		toSerialize["s3ManagedLedgerOffloadRoleSessionName"] = o.S3ManagedLedgerOffloadRoleSessionName
	}
	if o.GcsManagedLedgerOffloadRegion != nil {
		toSerialize["gcsManagedLedgerOffloadRegion"] = o.GcsManagedLedgerOffloadRegion
	}
	if o.GcsManagedLedgerOffloadBucket != nil {
		toSerialize["gcsManagedLedgerOffloadBucket"] = o.GcsManagedLedgerOffloadBucket
	}
	if o.GcsManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		toSerialize["gcsManagedLedgerOffloadMaxBlockSizeInBytes"] = o.GcsManagedLedgerOffloadMaxBlockSizeInBytes
	}
	if o.GcsManagedLedgerOffloadReadBufferSizeInBytes != nil {
		toSerialize["gcsManagedLedgerOffloadReadBufferSizeInBytes"] = o.GcsManagedLedgerOffloadReadBufferSizeInBytes
	}
	if o.GcsManagedLedgerOffloadServiceAccountKeyFile != nil {
		toSerialize["gcsManagedLedgerOffloadServiceAccountKeyFile"] = o.GcsManagedLedgerOffloadServiceAccountKeyFile
	}
	if o.FileSystemProfilePath != nil {
		toSerialize["fileSystemProfilePath"] = o.FileSystemProfilePath
	}
	if o.FileSystemURI != nil {
		toSerialize["fileSystemURI"] = o.FileSystemURI
	}
	if o.ManagedLedgerOffloadBucket != nil {
		toSerialize["managedLedgerOffloadBucket"] = o.ManagedLedgerOffloadBucket
	}
	if o.ManagedLedgerOffloadedReadPriority != nil {
		toSerialize["managedLedgerOffloadedReadPriority"] = o.ManagedLedgerOffloadedReadPriority
	}
	if o.ManagedLedgerOffloadRegion != nil {
		toSerialize["managedLedgerOffloadRegion"] = o.ManagedLedgerOffloadRegion
	}
	if o.ManagedLedgerOffloadServiceEndpoint != nil {
		toSerialize["managedLedgerOffloadServiceEndpoint"] = o.ManagedLedgerOffloadServiceEndpoint
	}
	if o.ManagedLedgerOffloadMaxBlockSizeInBytes != nil {
		toSerialize["managedLedgerOffloadMaxBlockSizeInBytes"] = o.ManagedLedgerOffloadMaxBlockSizeInBytes
	}
	if o.ManagedLedgerOffloadReadBufferSizeInBytes != nil {
		toSerialize["managedLedgerOffloadReadBufferSizeInBytes"] = o.ManagedLedgerOffloadReadBufferSizeInBytes
	}
	if o.ManagedLedgerOffloadThresholdInBytes != nil {
		toSerialize["managedLedgerOffloadThresholdInBytes"] = o.ManagedLedgerOffloadThresholdInBytes
	}
	if o.ManagedLedgerOffloadDeletionLagInMillis != nil {
		toSerialize["managedLedgerOffloadDeletionLagInMillis"] = o.ManagedLedgerOffloadDeletionLagInMillis
	}
	if o.ManagedLedgerOffloadDriver != nil {
		toSerialize["managedLedgerOffloadDriver"] = o.ManagedLedgerOffloadDriver
	}
	if o.OffloadersDirectory != nil {
		toSerialize["offloadersDirectory"] = o.OffloadersDirectory
	}
	if o.ManagedLedgerOffloadMaxThreads != nil {
		toSerialize["managedLedgerOffloadMaxThreads"] = o.ManagedLedgerOffloadMaxThreads
	}
	return json.Marshal(toSerialize)
}

type NullableOffloadPolicies struct {
	value *OffloadPolicies
	isSet bool
}

func (v NullableOffloadPolicies) Get() *OffloadPolicies {
	return v.value
}

func (v *NullableOffloadPolicies) Set(val *OffloadPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableOffloadPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableOffloadPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOffloadPolicies(val *OffloadPolicies) *NullableOffloadPolicies {
	return &NullableOffloadPolicies{value: val, isSet: true}
}

func (v NullableOffloadPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOffloadPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


