/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LongRunningProcessStatus struct for LongRunningProcessStatus
type LongRunningProcessStatus struct {
	Status *string `json:"status,omitempty"`
	LastError *string `json:"lastError,omitempty"`
}

// NewLongRunningProcessStatus instantiates a new LongRunningProcessStatus object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLongRunningProcessStatus() *LongRunningProcessStatus {
	this := LongRunningProcessStatus{}
	return &this
}

// NewLongRunningProcessStatusWithDefaults instantiates a new LongRunningProcessStatus object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLongRunningProcessStatusWithDefaults() *LongRunningProcessStatus {
	this := LongRunningProcessStatus{}
	return &this
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *LongRunningProcessStatus) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongRunningProcessStatus) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *LongRunningProcessStatus) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *LongRunningProcessStatus) SetStatus(v string) {
	o.Status = &v
}

// GetLastError returns the LastError field value if set, zero value otherwise.
func (o *LongRunningProcessStatus) GetLastError() string {
	if o == nil || o.LastError == nil {
		var ret string
		return ret
	}
	return *o.LastError
}

// GetLastErrorOk returns a tuple with the LastError field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LongRunningProcessStatus) GetLastErrorOk() (*string, bool) {
	if o == nil || o.LastError == nil {
		return nil, false
	}
	return o.LastError, true
}

// HasLastError returns a boolean if a field has been set.
func (o *LongRunningProcessStatus) HasLastError() bool {
	if o != nil && o.LastError != nil {
		return true
	}

	return false
}

// SetLastError gets a reference to the given string and assigns it to the LastError field.
func (o *LongRunningProcessStatus) SetLastError(v string) {
	o.LastError = &v
}

func (o LongRunningProcessStatus) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.LastError != nil {
		toSerialize["lastError"] = o.LastError
	}
	return json.Marshal(toSerialize)
}

type NullableLongRunningProcessStatus struct {
	value *LongRunningProcessStatus
	isSet bool
}

func (v NullableLongRunningProcessStatus) Get() *LongRunningProcessStatus {
	return v.value
}

func (v *NullableLongRunningProcessStatus) Set(val *LongRunningProcessStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableLongRunningProcessStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableLongRunningProcessStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLongRunningProcessStatus(val *LongRunningProcessStatus) *NullableLongRunningProcessStatus {
	return &NullableLongRunningProcessStatus{value: val, isSet: true}
}

func (v NullableLongRunningProcessStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLongRunningProcessStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


