/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WorkerInfo struct for WorkerInfo
type WorkerInfo struct {
	WorkerId *string `json:"workerId,omitempty"`
	WorkerHostname *string `json:"workerHostname,omitempty"`
	Port *int32 `json:"port,omitempty"`
}

// NewWorkerInfo instantiates a new WorkerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerInfo() *WorkerInfo {
	this := WorkerInfo{}
	return &this
}

// NewWorkerInfoWithDefaults instantiates a new WorkerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerInfoWithDefaults() *WorkerInfo {
	this := WorkerInfo{}
	return &this
}

// GetWorkerId returns the WorkerId field value if set, zero value otherwise.
func (o *WorkerInfo) GetWorkerId() string {
	if o == nil || o.WorkerId == nil {
		var ret string
		return ret
	}
	return *o.WorkerId
}

// GetWorkerIdOk returns a tuple with the WorkerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerInfo) GetWorkerIdOk() (*string, bool) {
	if o == nil || o.WorkerId == nil {
		return nil, false
	}
	return o.WorkerId, true
}

// HasWorkerId returns a boolean if a field has been set.
func (o *WorkerInfo) HasWorkerId() bool {
	if o != nil && o.WorkerId != nil {
		return true
	}

	return false
}

// SetWorkerId gets a reference to the given string and assigns it to the WorkerId field.
func (o *WorkerInfo) SetWorkerId(v string) {
	o.WorkerId = &v
}

// GetWorkerHostname returns the WorkerHostname field value if set, zero value otherwise.
func (o *WorkerInfo) GetWorkerHostname() string {
	if o == nil || o.WorkerHostname == nil {
		var ret string
		return ret
	}
	return *o.WorkerHostname
}

// GetWorkerHostnameOk returns a tuple with the WorkerHostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerInfo) GetWorkerHostnameOk() (*string, bool) {
	if o == nil || o.WorkerHostname == nil {
		return nil, false
	}
	return o.WorkerHostname, true
}

// HasWorkerHostname returns a boolean if a field has been set.
func (o *WorkerInfo) HasWorkerHostname() bool {
	if o != nil && o.WorkerHostname != nil {
		return true
	}

	return false
}

// SetWorkerHostname gets a reference to the given string and assigns it to the WorkerHostname field.
func (o *WorkerInfo) SetWorkerHostname(v string) {
	o.WorkerHostname = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *WorkerInfo) GetPort() int32 {
	if o == nil || o.Port == nil {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerInfo) GetPortOk() (*int32, bool) {
	if o == nil || o.Port == nil {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *WorkerInfo) HasPort() bool {
	if o != nil && o.Port != nil {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *WorkerInfo) SetPort(v int32) {
	o.Port = &v
}

func (o WorkerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.WorkerId != nil {
		toSerialize["workerId"] = o.WorkerId
	}
	if o.WorkerHostname != nil {
		toSerialize["workerHostname"] = o.WorkerHostname
	}
	if o.Port != nil {
		toSerialize["port"] = o.Port
	}
	return json.Marshal(toSerialize)
}

type NullableWorkerInfo struct {
	value *WorkerInfo
	isSet bool
}

func (v NullableWorkerInfo) Get() *WorkerInfo {
	return v.value
}

func (v *NullableWorkerInfo) Set(val *WorkerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerInfo(val *WorkerInfo) *NullableWorkerInfo {
	return &NullableWorkerInfo{value: val, isSet: true}
}

func (v NullableWorkerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


