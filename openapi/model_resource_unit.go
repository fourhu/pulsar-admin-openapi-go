/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceUnit struct for ResourceUnit
type ResourceUnit struct {
	AvailableResource *ResourceDescription `json:"availableResource,omitempty"`
	ResourceId *string `json:"resourceId,omitempty"`
}

// NewResourceUnit instantiates a new ResourceUnit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUnit() *ResourceUnit {
	this := ResourceUnit{}
	return &this
}

// NewResourceUnitWithDefaults instantiates a new ResourceUnit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUnitWithDefaults() *ResourceUnit {
	this := ResourceUnit{}
	return &this
}

// GetAvailableResource returns the AvailableResource field value if set, zero value otherwise.
func (o *ResourceUnit) GetAvailableResource() ResourceDescription {
	if o == nil || o.AvailableResource == nil {
		var ret ResourceDescription
		return ret
	}
	return *o.AvailableResource
}

// GetAvailableResourceOk returns a tuple with the AvailableResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUnit) GetAvailableResourceOk() (*ResourceDescription, bool) {
	if o == nil || o.AvailableResource == nil {
		return nil, false
	}
	return o.AvailableResource, true
}

// HasAvailableResource returns a boolean if a field has been set.
func (o *ResourceUnit) HasAvailableResource() bool {
	if o != nil && o.AvailableResource != nil {
		return true
	}

	return false
}

// SetAvailableResource gets a reference to the given ResourceDescription and assigns it to the AvailableResource field.
func (o *ResourceUnit) SetAvailableResource(v ResourceDescription) {
	o.AvailableResource = &v
}

// GetResourceId returns the ResourceId field value if set, zero value otherwise.
func (o *ResourceUnit) GetResourceId() string {
	if o == nil || o.ResourceId == nil {
		var ret string
		return ret
	}
	return *o.ResourceId
}

// GetResourceIdOk returns a tuple with the ResourceId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUnit) GetResourceIdOk() (*string, bool) {
	if o == nil || o.ResourceId == nil {
		return nil, false
	}
	return o.ResourceId, true
}

// HasResourceId returns a boolean if a field has been set.
func (o *ResourceUnit) HasResourceId() bool {
	if o != nil && o.ResourceId != nil {
		return true
	}

	return false
}

// SetResourceId gets a reference to the given string and assigns it to the ResourceId field.
func (o *ResourceUnit) SetResourceId(v string) {
	o.ResourceId = &v
}

func (o ResourceUnit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AvailableResource != nil {
		toSerialize["availableResource"] = o.AvailableResource
	}
	if o.ResourceId != nil {
		toSerialize["resourceId"] = o.ResourceId
	}
	return json.Marshal(toSerialize)
}

type NullableResourceUnit struct {
	value *ResourceUnit
	isSet bool
}

func (v NullableResourceUnit) Get() *ResourceUnit {
	return v.value
}

func (v *NullableResourceUnit) Set(val *ResourceUnit) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUnit) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUnit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUnit(val *ResourceUnit) *NullableResourceUnit {
	return &NullableResourceUnit{value: val, isSet: true}
}

func (v NullableResourceUnit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUnit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


