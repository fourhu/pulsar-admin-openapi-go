/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// GetSchemaResponse struct for GetSchemaResponse
type GetSchemaResponse struct {
	Data *string `json:"data,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
	Timestamp *int64 `json:"timestamp,omitempty"`
	Type *string `json:"type,omitempty"`
	Version *int64 `json:"version,omitempty"`
}

// NewGetSchemaResponse instantiates a new GetSchemaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetSchemaResponse() *GetSchemaResponse {
	this := GetSchemaResponse{}
	return &this
}

// NewGetSchemaResponseWithDefaults instantiates a new GetSchemaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetSchemaResponseWithDefaults() *GetSchemaResponse {
	this := GetSchemaResponse{}
	return &this
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *GetSchemaResponse) GetData() string {
	if o == nil || o.Data == nil {
		var ret string
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSchemaResponse) GetDataOk() (*string, bool) {
	if o == nil || o.Data == nil {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *GetSchemaResponse) HasData() bool {
	if o != nil && o.Data != nil {
		return true
	}

	return false
}

// SetData gets a reference to the given string and assigns it to the Data field.
func (o *GetSchemaResponse) SetData(v string) {
	o.Data = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *GetSchemaResponse) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSchemaResponse) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *GetSchemaResponse) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *GetSchemaResponse) SetProperties(v map[string]string) {
	o.Properties = &v
}

// GetTimestamp returns the Timestamp field value if set, zero value otherwise.
func (o *GetSchemaResponse) GetTimestamp() int64 {
	if o == nil || o.Timestamp == nil {
		var ret int64
		return ret
	}
	return *o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSchemaResponse) GetTimestampOk() (*int64, bool) {
	if o == nil || o.Timestamp == nil {
		return nil, false
	}
	return o.Timestamp, true
}

// HasTimestamp returns a boolean if a field has been set.
func (o *GetSchemaResponse) HasTimestamp() bool {
	if o != nil && o.Timestamp != nil {
		return true
	}

	return false
}

// SetTimestamp gets a reference to the given int64 and assigns it to the Timestamp field.
func (o *GetSchemaResponse) SetTimestamp(v int64) {
	o.Timestamp = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *GetSchemaResponse) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSchemaResponse) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *GetSchemaResponse) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *GetSchemaResponse) SetType(v string) {
	o.Type = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *GetSchemaResponse) GetVersion() int64 {
	if o == nil || o.Version == nil {
		var ret int64
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetSchemaResponse) GetVersionOk() (*int64, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *GetSchemaResponse) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given int64 and assigns it to the Version field.
func (o *GetSchemaResponse) SetVersion(v int64) {
	o.Version = &v
}

func (o GetSchemaResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	if o.Timestamp != nil {
		toSerialize["timestamp"] = o.Timestamp
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullableGetSchemaResponse struct {
	value *GetSchemaResponse
	isSet bool
}

func (v NullableGetSchemaResponse) Get() *GetSchemaResponse {
	return v.value
}

func (v *NullableGetSchemaResponse) Set(val *GetSchemaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetSchemaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetSchemaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetSchemaResponse(val *GetSchemaResponse) *NullableGetSchemaResponse {
	return &NullableGetSchemaResponse{value: val, isSet: true}
}

func (v NullableGetSchemaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetSchemaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


