/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TopicStats struct for TopicStats
type TopicStats struct {
	MsgThroughputIn *float64 `json:"msgThroughputIn,omitempty"`
	MsgThroughputOut *float64 `json:"msgThroughputOut,omitempty"`
	BacklogSize *int64 `json:"backlogSize,omitempty"`
	Subscriptions *map[string]SubscriptionStats `json:"subscriptions,omitempty"`
	BytesInCounter *int64 `json:"bytesInCounter,omitempty"`
	MsgInCounter *int64 `json:"msgInCounter,omitempty"`
	BytesOutCounter *int64 `json:"bytesOutCounter,omitempty"`
	MsgOutCounter *int64 `json:"msgOutCounter,omitempty"`
	OffloadedStorageSize *int64 `json:"offloadedStorageSize,omitempty"`
	Publishers *[]PublisherStats `json:"publishers,omitempty"`
	WaitingPublishers *int32 `json:"waitingPublishers,omitempty"`
	Replication *map[string]ReplicatorStats `json:"replication,omitempty"`
	DeduplicationStatus *string `json:"deduplicationStatus,omitempty"`
	TopicEpoch *int64 `json:"topicEpoch,omitempty"`
	NonContiguousDeletedMessagesRanges *int32 `json:"nonContiguousDeletedMessagesRanges,omitempty"`
	NonContiguousDeletedMessagesRangesSerializedSize *int32 `json:"nonContiguousDeletedMessagesRangesSerializedSize,omitempty"`
	Compaction *CompactionStats `json:"compaction,omitempty"`
	AverageMsgSize *float64 `json:"averageMsgSize,omitempty"`
	MsgChunkPublished *bool `json:"msgChunkPublished,omitempty"`
	StorageSize *int64 `json:"storageSize,omitempty"`
	MsgRateIn *float64 `json:"msgRateIn,omitempty"`
	MsgRateOut *float64 `json:"msgRateOut,omitempty"`
}

// NewTopicStats instantiates a new TopicStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTopicStats() *TopicStats {
	this := TopicStats{}
	return &this
}

// NewTopicStatsWithDefaults instantiates a new TopicStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTopicStatsWithDefaults() *TopicStats {
	this := TopicStats{}
	return &this
}

// GetMsgThroughputIn returns the MsgThroughputIn field value if set, zero value otherwise.
func (o *TopicStats) GetMsgThroughputIn() float64 {
	if o == nil || o.MsgThroughputIn == nil {
		var ret float64
		return ret
	}
	return *o.MsgThroughputIn
}

// GetMsgThroughputInOk returns a tuple with the MsgThroughputIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgThroughputInOk() (*float64, bool) {
	if o == nil || o.MsgThroughputIn == nil {
		return nil, false
	}
	return o.MsgThroughputIn, true
}

// HasMsgThroughputIn returns a boolean if a field has been set.
func (o *TopicStats) HasMsgThroughputIn() bool {
	if o != nil && o.MsgThroughputIn != nil {
		return true
	}

	return false
}

// SetMsgThroughputIn gets a reference to the given float64 and assigns it to the MsgThroughputIn field.
func (o *TopicStats) SetMsgThroughputIn(v float64) {
	o.MsgThroughputIn = &v
}

// GetMsgThroughputOut returns the MsgThroughputOut field value if set, zero value otherwise.
func (o *TopicStats) GetMsgThroughputOut() float64 {
	if o == nil || o.MsgThroughputOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgThroughputOut
}

// GetMsgThroughputOutOk returns a tuple with the MsgThroughputOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgThroughputOutOk() (*float64, bool) {
	if o == nil || o.MsgThroughputOut == nil {
		return nil, false
	}
	return o.MsgThroughputOut, true
}

// HasMsgThroughputOut returns a boolean if a field has been set.
func (o *TopicStats) HasMsgThroughputOut() bool {
	if o != nil && o.MsgThroughputOut != nil {
		return true
	}

	return false
}

// SetMsgThroughputOut gets a reference to the given float64 and assigns it to the MsgThroughputOut field.
func (o *TopicStats) SetMsgThroughputOut(v float64) {
	o.MsgThroughputOut = &v
}

// GetBacklogSize returns the BacklogSize field value if set, zero value otherwise.
func (o *TopicStats) GetBacklogSize() int64 {
	if o == nil || o.BacklogSize == nil {
		var ret int64
		return ret
	}
	return *o.BacklogSize
}

// GetBacklogSizeOk returns a tuple with the BacklogSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetBacklogSizeOk() (*int64, bool) {
	if o == nil || o.BacklogSize == nil {
		return nil, false
	}
	return o.BacklogSize, true
}

// HasBacklogSize returns a boolean if a field has been set.
func (o *TopicStats) HasBacklogSize() bool {
	if o != nil && o.BacklogSize != nil {
		return true
	}

	return false
}

// SetBacklogSize gets a reference to the given int64 and assigns it to the BacklogSize field.
func (o *TopicStats) SetBacklogSize(v int64) {
	o.BacklogSize = &v
}

// GetSubscriptions returns the Subscriptions field value if set, zero value otherwise.
func (o *TopicStats) GetSubscriptions() map[string]SubscriptionStats {
	if o == nil || o.Subscriptions == nil {
		var ret map[string]SubscriptionStats
		return ret
	}
	return *o.Subscriptions
}

// GetSubscriptionsOk returns a tuple with the Subscriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetSubscriptionsOk() (*map[string]SubscriptionStats, bool) {
	if o == nil || o.Subscriptions == nil {
		return nil, false
	}
	return o.Subscriptions, true
}

// HasSubscriptions returns a boolean if a field has been set.
func (o *TopicStats) HasSubscriptions() bool {
	if o != nil && o.Subscriptions != nil {
		return true
	}

	return false
}

// SetSubscriptions gets a reference to the given map[string]SubscriptionStats and assigns it to the Subscriptions field.
func (o *TopicStats) SetSubscriptions(v map[string]SubscriptionStats) {
	o.Subscriptions = &v
}

// GetBytesInCounter returns the BytesInCounter field value if set, zero value otherwise.
func (o *TopicStats) GetBytesInCounter() int64 {
	if o == nil || o.BytesInCounter == nil {
		var ret int64
		return ret
	}
	return *o.BytesInCounter
}

// GetBytesInCounterOk returns a tuple with the BytesInCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetBytesInCounterOk() (*int64, bool) {
	if o == nil || o.BytesInCounter == nil {
		return nil, false
	}
	return o.BytesInCounter, true
}

// HasBytesInCounter returns a boolean if a field has been set.
func (o *TopicStats) HasBytesInCounter() bool {
	if o != nil && o.BytesInCounter != nil {
		return true
	}

	return false
}

// SetBytesInCounter gets a reference to the given int64 and assigns it to the BytesInCounter field.
func (o *TopicStats) SetBytesInCounter(v int64) {
	o.BytesInCounter = &v
}

// GetMsgInCounter returns the MsgInCounter field value if set, zero value otherwise.
func (o *TopicStats) GetMsgInCounter() int64 {
	if o == nil || o.MsgInCounter == nil {
		var ret int64
		return ret
	}
	return *o.MsgInCounter
}

// GetMsgInCounterOk returns a tuple with the MsgInCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgInCounterOk() (*int64, bool) {
	if o == nil || o.MsgInCounter == nil {
		return nil, false
	}
	return o.MsgInCounter, true
}

// HasMsgInCounter returns a boolean if a field has been set.
func (o *TopicStats) HasMsgInCounter() bool {
	if o != nil && o.MsgInCounter != nil {
		return true
	}

	return false
}

// SetMsgInCounter gets a reference to the given int64 and assigns it to the MsgInCounter field.
func (o *TopicStats) SetMsgInCounter(v int64) {
	o.MsgInCounter = &v
}

// GetBytesOutCounter returns the BytesOutCounter field value if set, zero value otherwise.
func (o *TopicStats) GetBytesOutCounter() int64 {
	if o == nil || o.BytesOutCounter == nil {
		var ret int64
		return ret
	}
	return *o.BytesOutCounter
}

// GetBytesOutCounterOk returns a tuple with the BytesOutCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetBytesOutCounterOk() (*int64, bool) {
	if o == nil || o.BytesOutCounter == nil {
		return nil, false
	}
	return o.BytesOutCounter, true
}

// HasBytesOutCounter returns a boolean if a field has been set.
func (o *TopicStats) HasBytesOutCounter() bool {
	if o != nil && o.BytesOutCounter != nil {
		return true
	}

	return false
}

// SetBytesOutCounter gets a reference to the given int64 and assigns it to the BytesOutCounter field.
func (o *TopicStats) SetBytesOutCounter(v int64) {
	o.BytesOutCounter = &v
}

// GetMsgOutCounter returns the MsgOutCounter field value if set, zero value otherwise.
func (o *TopicStats) GetMsgOutCounter() int64 {
	if o == nil || o.MsgOutCounter == nil {
		var ret int64
		return ret
	}
	return *o.MsgOutCounter
}

// GetMsgOutCounterOk returns a tuple with the MsgOutCounter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgOutCounterOk() (*int64, bool) {
	if o == nil || o.MsgOutCounter == nil {
		return nil, false
	}
	return o.MsgOutCounter, true
}

// HasMsgOutCounter returns a boolean if a field has been set.
func (o *TopicStats) HasMsgOutCounter() bool {
	if o != nil && o.MsgOutCounter != nil {
		return true
	}

	return false
}

// SetMsgOutCounter gets a reference to the given int64 and assigns it to the MsgOutCounter field.
func (o *TopicStats) SetMsgOutCounter(v int64) {
	o.MsgOutCounter = &v
}

// GetOffloadedStorageSize returns the OffloadedStorageSize field value if set, zero value otherwise.
func (o *TopicStats) GetOffloadedStorageSize() int64 {
	if o == nil || o.OffloadedStorageSize == nil {
		var ret int64
		return ret
	}
	return *o.OffloadedStorageSize
}

// GetOffloadedStorageSizeOk returns a tuple with the OffloadedStorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetOffloadedStorageSizeOk() (*int64, bool) {
	if o == nil || o.OffloadedStorageSize == nil {
		return nil, false
	}
	return o.OffloadedStorageSize, true
}

// HasOffloadedStorageSize returns a boolean if a field has been set.
func (o *TopicStats) HasOffloadedStorageSize() bool {
	if o != nil && o.OffloadedStorageSize != nil {
		return true
	}

	return false
}

// SetOffloadedStorageSize gets a reference to the given int64 and assigns it to the OffloadedStorageSize field.
func (o *TopicStats) SetOffloadedStorageSize(v int64) {
	o.OffloadedStorageSize = &v
}

// GetPublishers returns the Publishers field value if set, zero value otherwise.
func (o *TopicStats) GetPublishers() []PublisherStats {
	if o == nil || o.Publishers == nil {
		var ret []PublisherStats
		return ret
	}
	return *o.Publishers
}

// GetPublishersOk returns a tuple with the Publishers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetPublishersOk() (*[]PublisherStats, bool) {
	if o == nil || o.Publishers == nil {
		return nil, false
	}
	return o.Publishers, true
}

// HasPublishers returns a boolean if a field has been set.
func (o *TopicStats) HasPublishers() bool {
	if o != nil && o.Publishers != nil {
		return true
	}

	return false
}

// SetPublishers gets a reference to the given []PublisherStats and assigns it to the Publishers field.
func (o *TopicStats) SetPublishers(v []PublisherStats) {
	o.Publishers = &v
}

// GetWaitingPublishers returns the WaitingPublishers field value if set, zero value otherwise.
func (o *TopicStats) GetWaitingPublishers() int32 {
	if o == nil || o.WaitingPublishers == nil {
		var ret int32
		return ret
	}
	return *o.WaitingPublishers
}

// GetWaitingPublishersOk returns a tuple with the WaitingPublishers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetWaitingPublishersOk() (*int32, bool) {
	if o == nil || o.WaitingPublishers == nil {
		return nil, false
	}
	return o.WaitingPublishers, true
}

// HasWaitingPublishers returns a boolean if a field has been set.
func (o *TopicStats) HasWaitingPublishers() bool {
	if o != nil && o.WaitingPublishers != nil {
		return true
	}

	return false
}

// SetWaitingPublishers gets a reference to the given int32 and assigns it to the WaitingPublishers field.
func (o *TopicStats) SetWaitingPublishers(v int32) {
	o.WaitingPublishers = &v
}

// GetReplication returns the Replication field value if set, zero value otherwise.
func (o *TopicStats) GetReplication() map[string]ReplicatorStats {
	if o == nil || o.Replication == nil {
		var ret map[string]ReplicatorStats
		return ret
	}
	return *o.Replication
}

// GetReplicationOk returns a tuple with the Replication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetReplicationOk() (*map[string]ReplicatorStats, bool) {
	if o == nil || o.Replication == nil {
		return nil, false
	}
	return o.Replication, true
}

// HasReplication returns a boolean if a field has been set.
func (o *TopicStats) HasReplication() bool {
	if o != nil && o.Replication != nil {
		return true
	}

	return false
}

// SetReplication gets a reference to the given map[string]ReplicatorStats and assigns it to the Replication field.
func (o *TopicStats) SetReplication(v map[string]ReplicatorStats) {
	o.Replication = &v
}

// GetDeduplicationStatus returns the DeduplicationStatus field value if set, zero value otherwise.
func (o *TopicStats) GetDeduplicationStatus() string {
	if o == nil || o.DeduplicationStatus == nil {
		var ret string
		return ret
	}
	return *o.DeduplicationStatus
}

// GetDeduplicationStatusOk returns a tuple with the DeduplicationStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetDeduplicationStatusOk() (*string, bool) {
	if o == nil || o.DeduplicationStatus == nil {
		return nil, false
	}
	return o.DeduplicationStatus, true
}

// HasDeduplicationStatus returns a boolean if a field has been set.
func (o *TopicStats) HasDeduplicationStatus() bool {
	if o != nil && o.DeduplicationStatus != nil {
		return true
	}

	return false
}

// SetDeduplicationStatus gets a reference to the given string and assigns it to the DeduplicationStatus field.
func (o *TopicStats) SetDeduplicationStatus(v string) {
	o.DeduplicationStatus = &v
}

// GetTopicEpoch returns the TopicEpoch field value if set, zero value otherwise.
func (o *TopicStats) GetTopicEpoch() int64 {
	if o == nil || o.TopicEpoch == nil {
		var ret int64
		return ret
	}
	return *o.TopicEpoch
}

// GetTopicEpochOk returns a tuple with the TopicEpoch field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetTopicEpochOk() (*int64, bool) {
	if o == nil || o.TopicEpoch == nil {
		return nil, false
	}
	return o.TopicEpoch, true
}

// HasTopicEpoch returns a boolean if a field has been set.
func (o *TopicStats) HasTopicEpoch() bool {
	if o != nil && o.TopicEpoch != nil {
		return true
	}

	return false
}

// SetTopicEpoch gets a reference to the given int64 and assigns it to the TopicEpoch field.
func (o *TopicStats) SetTopicEpoch(v int64) {
	o.TopicEpoch = &v
}

// GetNonContiguousDeletedMessagesRanges returns the NonContiguousDeletedMessagesRanges field value if set, zero value otherwise.
func (o *TopicStats) GetNonContiguousDeletedMessagesRanges() int32 {
	if o == nil || o.NonContiguousDeletedMessagesRanges == nil {
		var ret int32
		return ret
	}
	return *o.NonContiguousDeletedMessagesRanges
}

// GetNonContiguousDeletedMessagesRangesOk returns a tuple with the NonContiguousDeletedMessagesRanges field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetNonContiguousDeletedMessagesRangesOk() (*int32, bool) {
	if o == nil || o.NonContiguousDeletedMessagesRanges == nil {
		return nil, false
	}
	return o.NonContiguousDeletedMessagesRanges, true
}

// HasNonContiguousDeletedMessagesRanges returns a boolean if a field has been set.
func (o *TopicStats) HasNonContiguousDeletedMessagesRanges() bool {
	if o != nil && o.NonContiguousDeletedMessagesRanges != nil {
		return true
	}

	return false
}

// SetNonContiguousDeletedMessagesRanges gets a reference to the given int32 and assigns it to the NonContiguousDeletedMessagesRanges field.
func (o *TopicStats) SetNonContiguousDeletedMessagesRanges(v int32) {
	o.NonContiguousDeletedMessagesRanges = &v
}

// GetNonContiguousDeletedMessagesRangesSerializedSize returns the NonContiguousDeletedMessagesRangesSerializedSize field value if set, zero value otherwise.
func (o *TopicStats) GetNonContiguousDeletedMessagesRangesSerializedSize() int32 {
	if o == nil || o.NonContiguousDeletedMessagesRangesSerializedSize == nil {
		var ret int32
		return ret
	}
	return *o.NonContiguousDeletedMessagesRangesSerializedSize
}

// GetNonContiguousDeletedMessagesRangesSerializedSizeOk returns a tuple with the NonContiguousDeletedMessagesRangesSerializedSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetNonContiguousDeletedMessagesRangesSerializedSizeOk() (*int32, bool) {
	if o == nil || o.NonContiguousDeletedMessagesRangesSerializedSize == nil {
		return nil, false
	}
	return o.NonContiguousDeletedMessagesRangesSerializedSize, true
}

// HasNonContiguousDeletedMessagesRangesSerializedSize returns a boolean if a field has been set.
func (o *TopicStats) HasNonContiguousDeletedMessagesRangesSerializedSize() bool {
	if o != nil && o.NonContiguousDeletedMessagesRangesSerializedSize != nil {
		return true
	}

	return false
}

// SetNonContiguousDeletedMessagesRangesSerializedSize gets a reference to the given int32 and assigns it to the NonContiguousDeletedMessagesRangesSerializedSize field.
func (o *TopicStats) SetNonContiguousDeletedMessagesRangesSerializedSize(v int32) {
	o.NonContiguousDeletedMessagesRangesSerializedSize = &v
}

// GetCompaction returns the Compaction field value if set, zero value otherwise.
func (o *TopicStats) GetCompaction() CompactionStats {
	if o == nil || o.Compaction == nil {
		var ret CompactionStats
		return ret
	}
	return *o.Compaction
}

// GetCompactionOk returns a tuple with the Compaction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetCompactionOk() (*CompactionStats, bool) {
	if o == nil || o.Compaction == nil {
		return nil, false
	}
	return o.Compaction, true
}

// HasCompaction returns a boolean if a field has been set.
func (o *TopicStats) HasCompaction() bool {
	if o != nil && o.Compaction != nil {
		return true
	}

	return false
}

// SetCompaction gets a reference to the given CompactionStats and assigns it to the Compaction field.
func (o *TopicStats) SetCompaction(v CompactionStats) {
	o.Compaction = &v
}

// GetAverageMsgSize returns the AverageMsgSize field value if set, zero value otherwise.
func (o *TopicStats) GetAverageMsgSize() float64 {
	if o == nil || o.AverageMsgSize == nil {
		var ret float64
		return ret
	}
	return *o.AverageMsgSize
}

// GetAverageMsgSizeOk returns a tuple with the AverageMsgSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetAverageMsgSizeOk() (*float64, bool) {
	if o == nil || o.AverageMsgSize == nil {
		return nil, false
	}
	return o.AverageMsgSize, true
}

// HasAverageMsgSize returns a boolean if a field has been set.
func (o *TopicStats) HasAverageMsgSize() bool {
	if o != nil && o.AverageMsgSize != nil {
		return true
	}

	return false
}

// SetAverageMsgSize gets a reference to the given float64 and assigns it to the AverageMsgSize field.
func (o *TopicStats) SetAverageMsgSize(v float64) {
	o.AverageMsgSize = &v
}

// GetMsgChunkPublished returns the MsgChunkPublished field value if set, zero value otherwise.
func (o *TopicStats) GetMsgChunkPublished() bool {
	if o == nil || o.MsgChunkPublished == nil {
		var ret bool
		return ret
	}
	return *o.MsgChunkPublished
}

// GetMsgChunkPublishedOk returns a tuple with the MsgChunkPublished field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgChunkPublishedOk() (*bool, bool) {
	if o == nil || o.MsgChunkPublished == nil {
		return nil, false
	}
	return o.MsgChunkPublished, true
}

// HasMsgChunkPublished returns a boolean if a field has been set.
func (o *TopicStats) HasMsgChunkPublished() bool {
	if o != nil && o.MsgChunkPublished != nil {
		return true
	}

	return false
}

// SetMsgChunkPublished gets a reference to the given bool and assigns it to the MsgChunkPublished field.
func (o *TopicStats) SetMsgChunkPublished(v bool) {
	o.MsgChunkPublished = &v
}

// GetStorageSize returns the StorageSize field value if set, zero value otherwise.
func (o *TopicStats) GetStorageSize() int64 {
	if o == nil || o.StorageSize == nil {
		var ret int64
		return ret
	}
	return *o.StorageSize
}

// GetStorageSizeOk returns a tuple with the StorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetStorageSizeOk() (*int64, bool) {
	if o == nil || o.StorageSize == nil {
		return nil, false
	}
	return o.StorageSize, true
}

// HasStorageSize returns a boolean if a field has been set.
func (o *TopicStats) HasStorageSize() bool {
	if o != nil && o.StorageSize != nil {
		return true
	}

	return false
}

// SetStorageSize gets a reference to the given int64 and assigns it to the StorageSize field.
func (o *TopicStats) SetStorageSize(v int64) {
	o.StorageSize = &v
}

// GetMsgRateIn returns the MsgRateIn field value if set, zero value otherwise.
func (o *TopicStats) GetMsgRateIn() float64 {
	if o == nil || o.MsgRateIn == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateIn
}

// GetMsgRateInOk returns a tuple with the MsgRateIn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgRateInOk() (*float64, bool) {
	if o == nil || o.MsgRateIn == nil {
		return nil, false
	}
	return o.MsgRateIn, true
}

// HasMsgRateIn returns a boolean if a field has been set.
func (o *TopicStats) HasMsgRateIn() bool {
	if o != nil && o.MsgRateIn != nil {
		return true
	}

	return false
}

// SetMsgRateIn gets a reference to the given float64 and assigns it to the MsgRateIn field.
func (o *TopicStats) SetMsgRateIn(v float64) {
	o.MsgRateIn = &v
}

// GetMsgRateOut returns the MsgRateOut field value if set, zero value otherwise.
func (o *TopicStats) GetMsgRateOut() float64 {
	if o == nil || o.MsgRateOut == nil {
		var ret float64
		return ret
	}
	return *o.MsgRateOut
}

// GetMsgRateOutOk returns a tuple with the MsgRateOut field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TopicStats) GetMsgRateOutOk() (*float64, bool) {
	if o == nil || o.MsgRateOut == nil {
		return nil, false
	}
	return o.MsgRateOut, true
}

// HasMsgRateOut returns a boolean if a field has been set.
func (o *TopicStats) HasMsgRateOut() bool {
	if o != nil && o.MsgRateOut != nil {
		return true
	}

	return false
}

// SetMsgRateOut gets a reference to the given float64 and assigns it to the MsgRateOut field.
func (o *TopicStats) SetMsgRateOut(v float64) {
	o.MsgRateOut = &v
}

func (o TopicStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.MsgThroughputIn != nil {
		toSerialize["msgThroughputIn"] = o.MsgThroughputIn
	}
	if o.MsgThroughputOut != nil {
		toSerialize["msgThroughputOut"] = o.MsgThroughputOut
	}
	if o.BacklogSize != nil {
		toSerialize["backlogSize"] = o.BacklogSize
	}
	if o.Subscriptions != nil {
		toSerialize["subscriptions"] = o.Subscriptions
	}
	if o.BytesInCounter != nil {
		toSerialize["bytesInCounter"] = o.BytesInCounter
	}
	if o.MsgInCounter != nil {
		toSerialize["msgInCounter"] = o.MsgInCounter
	}
	if o.BytesOutCounter != nil {
		toSerialize["bytesOutCounter"] = o.BytesOutCounter
	}
	if o.MsgOutCounter != nil {
		toSerialize["msgOutCounter"] = o.MsgOutCounter
	}
	if o.OffloadedStorageSize != nil {
		toSerialize["offloadedStorageSize"] = o.OffloadedStorageSize
	}
	if o.Publishers != nil {
		toSerialize["publishers"] = o.Publishers
	}
	if o.WaitingPublishers != nil {
		toSerialize["waitingPublishers"] = o.WaitingPublishers
	}
	if o.Replication != nil {
		toSerialize["replication"] = o.Replication
	}
	if o.DeduplicationStatus != nil {
		toSerialize["deduplicationStatus"] = o.DeduplicationStatus
	}
	if o.TopicEpoch != nil {
		toSerialize["topicEpoch"] = o.TopicEpoch
	}
	if o.NonContiguousDeletedMessagesRanges != nil {
		toSerialize["nonContiguousDeletedMessagesRanges"] = o.NonContiguousDeletedMessagesRanges
	}
	if o.NonContiguousDeletedMessagesRangesSerializedSize != nil {
		toSerialize["nonContiguousDeletedMessagesRangesSerializedSize"] = o.NonContiguousDeletedMessagesRangesSerializedSize
	}
	if o.Compaction != nil {
		toSerialize["compaction"] = o.Compaction
	}
	if o.AverageMsgSize != nil {
		toSerialize["averageMsgSize"] = o.AverageMsgSize
	}
	if o.MsgChunkPublished != nil {
		toSerialize["msgChunkPublished"] = o.MsgChunkPublished
	}
	if o.StorageSize != nil {
		toSerialize["storageSize"] = o.StorageSize
	}
	if o.MsgRateIn != nil {
		toSerialize["msgRateIn"] = o.MsgRateIn
	}
	if o.MsgRateOut != nil {
		toSerialize["msgRateOut"] = o.MsgRateOut
	}
	return json.Marshal(toSerialize)
}

type NullableTopicStats struct {
	value *TopicStats
	isSet bool
}

func (v NullableTopicStats) Get() *TopicStats {
	return v.value
}

func (v *NullableTopicStats) Set(val *TopicStats) {
	v.value = val
	v.isSet = true
}

func (v NullableTopicStats) IsSet() bool {
	return v.isSet
}

func (v *NullableTopicStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTopicStats(val *TopicStats) *NullableTopicStats {
	return &NullableTopicStats{value: val, isSet: true}
}

func (v NullableTopicStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTopicStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


