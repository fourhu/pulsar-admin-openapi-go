/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// WorkerService struct for WorkerService
type WorkerService struct {
	FunctionsV2 *FunctionsV2WorkerService `json:"functionsV2,omitempty"`
	WorkerConfig *WorkerConfig `json:"workerConfig,omitempty"`
	Sinks *SinksWorkerService `json:"sinks,omitempty"`
	Functions *FunctionsWorkerService `json:"functions,omitempty"`
	Workers *map[string]interface{} `json:"workers,omitempty"`
	Initialized *bool `json:"initialized,omitempty"`
	Sources *SourcesWorkerService `json:"sources,omitempty"`
}

// NewWorkerService instantiates a new WorkerService object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkerService() *WorkerService {
	this := WorkerService{}
	return &this
}

// NewWorkerServiceWithDefaults instantiates a new WorkerService object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkerServiceWithDefaults() *WorkerService {
	this := WorkerService{}
	return &this
}

// GetFunctionsV2 returns the FunctionsV2 field value if set, zero value otherwise.
func (o *WorkerService) GetFunctionsV2() FunctionsV2WorkerService {
	if o == nil || o.FunctionsV2 == nil {
		var ret FunctionsV2WorkerService
		return ret
	}
	return *o.FunctionsV2
}

// GetFunctionsV2Ok returns a tuple with the FunctionsV2 field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetFunctionsV2Ok() (*FunctionsV2WorkerService, bool) {
	if o == nil || o.FunctionsV2 == nil {
		return nil, false
	}
	return o.FunctionsV2, true
}

// HasFunctionsV2 returns a boolean if a field has been set.
func (o *WorkerService) HasFunctionsV2() bool {
	if o != nil && o.FunctionsV2 != nil {
		return true
	}

	return false
}

// SetFunctionsV2 gets a reference to the given FunctionsV2WorkerService and assigns it to the FunctionsV2 field.
func (o *WorkerService) SetFunctionsV2(v FunctionsV2WorkerService) {
	o.FunctionsV2 = &v
}

// GetWorkerConfig returns the WorkerConfig field value if set, zero value otherwise.
func (o *WorkerService) GetWorkerConfig() WorkerConfig {
	if o == nil || o.WorkerConfig == nil {
		var ret WorkerConfig
		return ret
	}
	return *o.WorkerConfig
}

// GetWorkerConfigOk returns a tuple with the WorkerConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetWorkerConfigOk() (*WorkerConfig, bool) {
	if o == nil || o.WorkerConfig == nil {
		return nil, false
	}
	return o.WorkerConfig, true
}

// HasWorkerConfig returns a boolean if a field has been set.
func (o *WorkerService) HasWorkerConfig() bool {
	if o != nil && o.WorkerConfig != nil {
		return true
	}

	return false
}

// SetWorkerConfig gets a reference to the given WorkerConfig and assigns it to the WorkerConfig field.
func (o *WorkerService) SetWorkerConfig(v WorkerConfig) {
	o.WorkerConfig = &v
}

// GetSinks returns the Sinks field value if set, zero value otherwise.
func (o *WorkerService) GetSinks() SinksWorkerService {
	if o == nil || o.Sinks == nil {
		var ret SinksWorkerService
		return ret
	}
	return *o.Sinks
}

// GetSinksOk returns a tuple with the Sinks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetSinksOk() (*SinksWorkerService, bool) {
	if o == nil || o.Sinks == nil {
		return nil, false
	}
	return o.Sinks, true
}

// HasSinks returns a boolean if a field has been set.
func (o *WorkerService) HasSinks() bool {
	if o != nil && o.Sinks != nil {
		return true
	}

	return false
}

// SetSinks gets a reference to the given SinksWorkerService and assigns it to the Sinks field.
func (o *WorkerService) SetSinks(v SinksWorkerService) {
	o.Sinks = &v
}

// GetFunctions returns the Functions field value if set, zero value otherwise.
func (o *WorkerService) GetFunctions() FunctionsWorkerService {
	if o == nil || o.Functions == nil {
		var ret FunctionsWorkerService
		return ret
	}
	return *o.Functions
}

// GetFunctionsOk returns a tuple with the Functions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetFunctionsOk() (*FunctionsWorkerService, bool) {
	if o == nil || o.Functions == nil {
		return nil, false
	}
	return o.Functions, true
}

// HasFunctions returns a boolean if a field has been set.
func (o *WorkerService) HasFunctions() bool {
	if o != nil && o.Functions != nil {
		return true
	}

	return false
}

// SetFunctions gets a reference to the given FunctionsWorkerService and assigns it to the Functions field.
func (o *WorkerService) SetFunctions(v FunctionsWorkerService) {
	o.Functions = &v
}

// GetWorkers returns the Workers field value if set, zero value otherwise.
func (o *WorkerService) GetWorkers() map[string]interface{} {
	if o == nil || o.Workers == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Workers
}

// GetWorkersOk returns a tuple with the Workers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetWorkersOk() (*map[string]interface{}, bool) {
	if o == nil || o.Workers == nil {
		return nil, false
	}
	return o.Workers, true
}

// HasWorkers returns a boolean if a field has been set.
func (o *WorkerService) HasWorkers() bool {
	if o != nil && o.Workers != nil {
		return true
	}

	return false
}

// SetWorkers gets a reference to the given map[string]interface{} and assigns it to the Workers field.
func (o *WorkerService) SetWorkers(v map[string]interface{}) {
	o.Workers = &v
}

// GetInitialized returns the Initialized field value if set, zero value otherwise.
func (o *WorkerService) GetInitialized() bool {
	if o == nil || o.Initialized == nil {
		var ret bool
		return ret
	}
	return *o.Initialized
}

// GetInitializedOk returns a tuple with the Initialized field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetInitializedOk() (*bool, bool) {
	if o == nil || o.Initialized == nil {
		return nil, false
	}
	return o.Initialized, true
}

// HasInitialized returns a boolean if a field has been set.
func (o *WorkerService) HasInitialized() bool {
	if o != nil && o.Initialized != nil {
		return true
	}

	return false
}

// SetInitialized gets a reference to the given bool and assigns it to the Initialized field.
func (o *WorkerService) SetInitialized(v bool) {
	o.Initialized = &v
}

// GetSources returns the Sources field value if set, zero value otherwise.
func (o *WorkerService) GetSources() SourcesWorkerService {
	if o == nil || o.Sources == nil {
		var ret SourcesWorkerService
		return ret
	}
	return *o.Sources
}

// GetSourcesOk returns a tuple with the Sources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkerService) GetSourcesOk() (*SourcesWorkerService, bool) {
	if o == nil || o.Sources == nil {
		return nil, false
	}
	return o.Sources, true
}

// HasSources returns a boolean if a field has been set.
func (o *WorkerService) HasSources() bool {
	if o != nil && o.Sources != nil {
		return true
	}

	return false
}

// SetSources gets a reference to the given SourcesWorkerService and assigns it to the Sources field.
func (o *WorkerService) SetSources(v SourcesWorkerService) {
	o.Sources = &v
}

func (o WorkerService) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FunctionsV2 != nil {
		toSerialize["functionsV2"] = o.FunctionsV2
	}
	if o.WorkerConfig != nil {
		toSerialize["workerConfig"] = o.WorkerConfig
	}
	if o.Sinks != nil {
		toSerialize["sinks"] = o.Sinks
	}
	if o.Functions != nil {
		toSerialize["functions"] = o.Functions
	}
	if o.Workers != nil {
		toSerialize["workers"] = o.Workers
	}
	if o.Initialized != nil {
		toSerialize["initialized"] = o.Initialized
	}
	if o.Sources != nil {
		toSerialize["sources"] = o.Sources
	}
	return json.Marshal(toSerialize)
}

type NullableWorkerService struct {
	value *WorkerService
	isSet bool
}

func (v NullableWorkerService) Get() *WorkerService {
	return v.value
}

func (v *NullableWorkerService) Set(val *WorkerService) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkerService) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkerService) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkerService(val *WorkerService) *NullableWorkerService {
	return &NullableWorkerService{value: val, isSet: true}
}

func (v NullableWorkerService) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkerService) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


