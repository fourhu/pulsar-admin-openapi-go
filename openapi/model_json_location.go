/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonLocation struct for JsonLocation
type JsonLocation struct {
	ByteOffset *int64 `json:"byteOffset,omitempty"`
	SourceRef *map[string]interface{} `json:"sourceRef,omitempty"`
	LineNr *int32 `json:"lineNr,omitempty"`
	ColumnNr *int32 `json:"columnNr,omitempty"`
	CharOffset *int64 `json:"charOffset,omitempty"`
}

// NewJsonLocation instantiates a new JsonLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonLocation() *JsonLocation {
	this := JsonLocation{}
	return &this
}

// NewJsonLocationWithDefaults instantiates a new JsonLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonLocationWithDefaults() *JsonLocation {
	this := JsonLocation{}
	return &this
}

// GetByteOffset returns the ByteOffset field value if set, zero value otherwise.
func (o *JsonLocation) GetByteOffset() int64 {
	if o == nil || o.ByteOffset == nil {
		var ret int64
		return ret
	}
	return *o.ByteOffset
}

// GetByteOffsetOk returns a tuple with the ByteOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonLocation) GetByteOffsetOk() (*int64, bool) {
	if o == nil || o.ByteOffset == nil {
		return nil, false
	}
	return o.ByteOffset, true
}

// HasByteOffset returns a boolean if a field has been set.
func (o *JsonLocation) HasByteOffset() bool {
	if o != nil && o.ByteOffset != nil {
		return true
	}

	return false
}

// SetByteOffset gets a reference to the given int64 and assigns it to the ByteOffset field.
func (o *JsonLocation) SetByteOffset(v int64) {
	o.ByteOffset = &v
}

// GetSourceRef returns the SourceRef field value if set, zero value otherwise.
func (o *JsonLocation) GetSourceRef() map[string]interface{} {
	if o == nil || o.SourceRef == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SourceRef
}

// GetSourceRefOk returns a tuple with the SourceRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonLocation) GetSourceRefOk() (*map[string]interface{}, bool) {
	if o == nil || o.SourceRef == nil {
		return nil, false
	}
	return o.SourceRef, true
}

// HasSourceRef returns a boolean if a field has been set.
func (o *JsonLocation) HasSourceRef() bool {
	if o != nil && o.SourceRef != nil {
		return true
	}

	return false
}

// SetSourceRef gets a reference to the given map[string]interface{} and assigns it to the SourceRef field.
func (o *JsonLocation) SetSourceRef(v map[string]interface{}) {
	o.SourceRef = &v
}

// GetLineNr returns the LineNr field value if set, zero value otherwise.
func (o *JsonLocation) GetLineNr() int32 {
	if o == nil || o.LineNr == nil {
		var ret int32
		return ret
	}
	return *o.LineNr
}

// GetLineNrOk returns a tuple with the LineNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonLocation) GetLineNrOk() (*int32, bool) {
	if o == nil || o.LineNr == nil {
		return nil, false
	}
	return o.LineNr, true
}

// HasLineNr returns a boolean if a field has been set.
func (o *JsonLocation) HasLineNr() bool {
	if o != nil && o.LineNr != nil {
		return true
	}

	return false
}

// SetLineNr gets a reference to the given int32 and assigns it to the LineNr field.
func (o *JsonLocation) SetLineNr(v int32) {
	o.LineNr = &v
}

// GetColumnNr returns the ColumnNr field value if set, zero value otherwise.
func (o *JsonLocation) GetColumnNr() int32 {
	if o == nil || o.ColumnNr == nil {
		var ret int32
		return ret
	}
	return *o.ColumnNr
}

// GetColumnNrOk returns a tuple with the ColumnNr field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonLocation) GetColumnNrOk() (*int32, bool) {
	if o == nil || o.ColumnNr == nil {
		return nil, false
	}
	return o.ColumnNr, true
}

// HasColumnNr returns a boolean if a field has been set.
func (o *JsonLocation) HasColumnNr() bool {
	if o != nil && o.ColumnNr != nil {
		return true
	}

	return false
}

// SetColumnNr gets a reference to the given int32 and assigns it to the ColumnNr field.
func (o *JsonLocation) SetColumnNr(v int32) {
	o.ColumnNr = &v
}

// GetCharOffset returns the CharOffset field value if set, zero value otherwise.
func (o *JsonLocation) GetCharOffset() int64 {
	if o == nil || o.CharOffset == nil {
		var ret int64
		return ret
	}
	return *o.CharOffset
}

// GetCharOffsetOk returns a tuple with the CharOffset field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonLocation) GetCharOffsetOk() (*int64, bool) {
	if o == nil || o.CharOffset == nil {
		return nil, false
	}
	return o.CharOffset, true
}

// HasCharOffset returns a boolean if a field has been set.
func (o *JsonLocation) HasCharOffset() bool {
	if o != nil && o.CharOffset != nil {
		return true
	}

	return false
}

// SetCharOffset gets a reference to the given int64 and assigns it to the CharOffset field.
func (o *JsonLocation) SetCharOffset(v int64) {
	o.CharOffset = &v
}

func (o JsonLocation) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ByteOffset != nil {
		toSerialize["byteOffset"] = o.ByteOffset
	}
	if o.SourceRef != nil {
		toSerialize["sourceRef"] = o.SourceRef
	}
	if o.LineNr != nil {
		toSerialize["lineNr"] = o.LineNr
	}
	if o.ColumnNr != nil {
		toSerialize["columnNr"] = o.ColumnNr
	}
	if o.CharOffset != nil {
		toSerialize["charOffset"] = o.CharOffset
	}
	return json.Marshal(toSerialize)
}

type NullableJsonLocation struct {
	value *JsonLocation
	isSet bool
}

func (v NullableJsonLocation) Get() *JsonLocation {
	return v.value
}

func (v *NullableJsonLocation) Set(val *JsonLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonLocation(val *JsonLocation) *NullableJsonLocation {
	return &NullableJsonLocation{value: val, isSet: true}
}

func (v NullableJsonLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


