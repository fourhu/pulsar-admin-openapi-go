/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonFactory struct for JsonFactory
type JsonFactory struct {
	Codec *ObjectCodec `json:"codec,omitempty"`
	InputDecorator *map[string]interface{} `json:"inputDecorator,omitempty"`
	CharacterEscapes *CharacterEscapes `json:"characterEscapes,omitempty"`
	OutputDecorator *map[string]interface{} `json:"outputDecorator,omitempty"`
	RootValueSeparator *string `json:"rootValueSeparator,omitempty"`
	FormatName *string `json:"formatName,omitempty"`
}

// NewJsonFactory instantiates a new JsonFactory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonFactory() *JsonFactory {
	this := JsonFactory{}
	return &this
}

// NewJsonFactoryWithDefaults instantiates a new JsonFactory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonFactoryWithDefaults() *JsonFactory {
	this := JsonFactory{}
	return &this
}

// GetCodec returns the Codec field value if set, zero value otherwise.
func (o *JsonFactory) GetCodec() ObjectCodec {
	if o == nil || o.Codec == nil {
		var ret ObjectCodec
		return ret
	}
	return *o.Codec
}

// GetCodecOk returns a tuple with the Codec field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetCodecOk() (*ObjectCodec, bool) {
	if o == nil || o.Codec == nil {
		return nil, false
	}
	return o.Codec, true
}

// HasCodec returns a boolean if a field has been set.
func (o *JsonFactory) HasCodec() bool {
	if o != nil && o.Codec != nil {
		return true
	}

	return false
}

// SetCodec gets a reference to the given ObjectCodec and assigns it to the Codec field.
func (o *JsonFactory) SetCodec(v ObjectCodec) {
	o.Codec = &v
}

// GetInputDecorator returns the InputDecorator field value if set, zero value otherwise.
func (o *JsonFactory) GetInputDecorator() map[string]interface{} {
	if o == nil || o.InputDecorator == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.InputDecorator
}

// GetInputDecoratorOk returns a tuple with the InputDecorator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetInputDecoratorOk() (*map[string]interface{}, bool) {
	if o == nil || o.InputDecorator == nil {
		return nil, false
	}
	return o.InputDecorator, true
}

// HasInputDecorator returns a boolean if a field has been set.
func (o *JsonFactory) HasInputDecorator() bool {
	if o != nil && o.InputDecorator != nil {
		return true
	}

	return false
}

// SetInputDecorator gets a reference to the given map[string]interface{} and assigns it to the InputDecorator field.
func (o *JsonFactory) SetInputDecorator(v map[string]interface{}) {
	o.InputDecorator = &v
}

// GetCharacterEscapes returns the CharacterEscapes field value if set, zero value otherwise.
func (o *JsonFactory) GetCharacterEscapes() CharacterEscapes {
	if o == nil || o.CharacterEscapes == nil {
		var ret CharacterEscapes
		return ret
	}
	return *o.CharacterEscapes
}

// GetCharacterEscapesOk returns a tuple with the CharacterEscapes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetCharacterEscapesOk() (*CharacterEscapes, bool) {
	if o == nil || o.CharacterEscapes == nil {
		return nil, false
	}
	return o.CharacterEscapes, true
}

// HasCharacterEscapes returns a boolean if a field has been set.
func (o *JsonFactory) HasCharacterEscapes() bool {
	if o != nil && o.CharacterEscapes != nil {
		return true
	}

	return false
}

// SetCharacterEscapes gets a reference to the given CharacterEscapes and assigns it to the CharacterEscapes field.
func (o *JsonFactory) SetCharacterEscapes(v CharacterEscapes) {
	o.CharacterEscapes = &v
}

// GetOutputDecorator returns the OutputDecorator field value if set, zero value otherwise.
func (o *JsonFactory) GetOutputDecorator() map[string]interface{} {
	if o == nil || o.OutputDecorator == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.OutputDecorator
}

// GetOutputDecoratorOk returns a tuple with the OutputDecorator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetOutputDecoratorOk() (*map[string]interface{}, bool) {
	if o == nil || o.OutputDecorator == nil {
		return nil, false
	}
	return o.OutputDecorator, true
}

// HasOutputDecorator returns a boolean if a field has been set.
func (o *JsonFactory) HasOutputDecorator() bool {
	if o != nil && o.OutputDecorator != nil {
		return true
	}

	return false
}

// SetOutputDecorator gets a reference to the given map[string]interface{} and assigns it to the OutputDecorator field.
func (o *JsonFactory) SetOutputDecorator(v map[string]interface{}) {
	o.OutputDecorator = &v
}

// GetRootValueSeparator returns the RootValueSeparator field value if set, zero value otherwise.
func (o *JsonFactory) GetRootValueSeparator() string {
	if o == nil || o.RootValueSeparator == nil {
		var ret string
		return ret
	}
	return *o.RootValueSeparator
}

// GetRootValueSeparatorOk returns a tuple with the RootValueSeparator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetRootValueSeparatorOk() (*string, bool) {
	if o == nil || o.RootValueSeparator == nil {
		return nil, false
	}
	return o.RootValueSeparator, true
}

// HasRootValueSeparator returns a boolean if a field has been set.
func (o *JsonFactory) HasRootValueSeparator() bool {
	if o != nil && o.RootValueSeparator != nil {
		return true
	}

	return false
}

// SetRootValueSeparator gets a reference to the given string and assigns it to the RootValueSeparator field.
func (o *JsonFactory) SetRootValueSeparator(v string) {
	o.RootValueSeparator = &v
}

// GetFormatName returns the FormatName field value if set, zero value otherwise.
func (o *JsonFactory) GetFormatName() string {
	if o == nil || o.FormatName == nil {
		var ret string
		return ret
	}
	return *o.FormatName
}

// GetFormatNameOk returns a tuple with the FormatName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonFactory) GetFormatNameOk() (*string, bool) {
	if o == nil || o.FormatName == nil {
		return nil, false
	}
	return o.FormatName, true
}

// HasFormatName returns a boolean if a field has been set.
func (o *JsonFactory) HasFormatName() bool {
	if o != nil && o.FormatName != nil {
		return true
	}

	return false
}

// SetFormatName gets a reference to the given string and assigns it to the FormatName field.
func (o *JsonFactory) SetFormatName(v string) {
	o.FormatName = &v
}

func (o JsonFactory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Codec != nil {
		toSerialize["codec"] = o.Codec
	}
	if o.InputDecorator != nil {
		toSerialize["inputDecorator"] = o.InputDecorator
	}
	if o.CharacterEscapes != nil {
		toSerialize["characterEscapes"] = o.CharacterEscapes
	}
	if o.OutputDecorator != nil {
		toSerialize["outputDecorator"] = o.OutputDecorator
	}
	if o.RootValueSeparator != nil {
		toSerialize["rootValueSeparator"] = o.RootValueSeparator
	}
	if o.FormatName != nil {
		toSerialize["formatName"] = o.FormatName
	}
	return json.Marshal(toSerialize)
}

type NullableJsonFactory struct {
	value *JsonFactory
	isSet bool
}

func (v NullableJsonFactory) Get() *JsonFactory {
	return v.value
}

func (v *NullableJsonFactory) Set(val *JsonFactory) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonFactory) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonFactory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonFactory(val *JsonFactory) *NullableJsonFactory {
	return &NullableJsonFactory{value: val, isSet: true}
}

func (v NullableJsonFactory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonFactory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


