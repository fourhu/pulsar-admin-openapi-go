/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PoolChunkStats struct for PoolChunkStats
type PoolChunkStats struct {
	ChunkSize *int32 `json:"chunkSize,omitempty"`
	FreeBytes *int32 `json:"freeBytes,omitempty"`
	Usage *int32 `json:"usage,omitempty"`
}

// NewPoolChunkStats instantiates a new PoolChunkStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoolChunkStats() *PoolChunkStats {
	this := PoolChunkStats{}
	return &this
}

// NewPoolChunkStatsWithDefaults instantiates a new PoolChunkStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPoolChunkStatsWithDefaults() *PoolChunkStats {
	this := PoolChunkStats{}
	return &this
}

// GetChunkSize returns the ChunkSize field value if set, zero value otherwise.
func (o *PoolChunkStats) GetChunkSize() int32 {
	if o == nil || o.ChunkSize == nil {
		var ret int32
		return ret
	}
	return *o.ChunkSize
}

// GetChunkSizeOk returns a tuple with the ChunkSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolChunkStats) GetChunkSizeOk() (*int32, bool) {
	if o == nil || o.ChunkSize == nil {
		return nil, false
	}
	return o.ChunkSize, true
}

// HasChunkSize returns a boolean if a field has been set.
func (o *PoolChunkStats) HasChunkSize() bool {
	if o != nil && o.ChunkSize != nil {
		return true
	}

	return false
}

// SetChunkSize gets a reference to the given int32 and assigns it to the ChunkSize field.
func (o *PoolChunkStats) SetChunkSize(v int32) {
	o.ChunkSize = &v
}

// GetFreeBytes returns the FreeBytes field value if set, zero value otherwise.
func (o *PoolChunkStats) GetFreeBytes() int32 {
	if o == nil || o.FreeBytes == nil {
		var ret int32
		return ret
	}
	return *o.FreeBytes
}

// GetFreeBytesOk returns a tuple with the FreeBytes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolChunkStats) GetFreeBytesOk() (*int32, bool) {
	if o == nil || o.FreeBytes == nil {
		return nil, false
	}
	return o.FreeBytes, true
}

// HasFreeBytes returns a boolean if a field has been set.
func (o *PoolChunkStats) HasFreeBytes() bool {
	if o != nil && o.FreeBytes != nil {
		return true
	}

	return false
}

// SetFreeBytes gets a reference to the given int32 and assigns it to the FreeBytes field.
func (o *PoolChunkStats) SetFreeBytes(v int32) {
	o.FreeBytes = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *PoolChunkStats) GetUsage() int32 {
	if o == nil || o.Usage == nil {
		var ret int32
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PoolChunkStats) GetUsageOk() (*int32, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *PoolChunkStats) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given int32 and assigns it to the Usage field.
func (o *PoolChunkStats) SetUsage(v int32) {
	o.Usage = &v
}

func (o PoolChunkStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ChunkSize != nil {
		toSerialize["chunkSize"] = o.ChunkSize
	}
	if o.FreeBytes != nil {
		toSerialize["freeBytes"] = o.FreeBytes
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullablePoolChunkStats struct {
	value *PoolChunkStats
	isSet bool
}

func (v NullablePoolChunkStats) Get() *PoolChunkStats {
	return v.value
}

func (v *NullablePoolChunkStats) Set(val *PoolChunkStats) {
	v.value = val
	v.isSet = true
}

func (v NullablePoolChunkStats) IsSet() bool {
	return v.isSet
}

func (v *NullablePoolChunkStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoolChunkStats(val *PoolChunkStats) *NullablePoolChunkStats {
	return &NullablePoolChunkStats{value: val, isSet: true}
}

func (v NullablePoolChunkStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoolChunkStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


