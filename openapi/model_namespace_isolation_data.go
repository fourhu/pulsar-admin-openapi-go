/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// NamespaceIsolationData The data of namespace isolation configuration
type NamespaceIsolationData struct {
	// The list of namespaces to apply this namespace isolation data
	Namespaces *[]string `json:"namespaces,omitempty"`
	// The list of secondary brokers for serving the list of namespaces in this isolation policy
	Primary *[]string `json:"primary,omitempty"`
	AutoFailoverPolicy *AutoFailoverPolicyData `json:"auto_failover_policy,omitempty"`
}

// NewNamespaceIsolationData instantiates a new NamespaceIsolationData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNamespaceIsolationData() *NamespaceIsolationData {
	this := NamespaceIsolationData{}
	return &this
}

// NewNamespaceIsolationDataWithDefaults instantiates a new NamespaceIsolationData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNamespaceIsolationDataWithDefaults() *NamespaceIsolationData {
	this := NamespaceIsolationData{}
	return &this
}

// GetNamespaces returns the Namespaces field value if set, zero value otherwise.
func (o *NamespaceIsolationData) GetNamespaces() []string {
	if o == nil || o.Namespaces == nil {
		var ret []string
		return ret
	}
	return *o.Namespaces
}

// GetNamespacesOk returns a tuple with the Namespaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceIsolationData) GetNamespacesOk() (*[]string, bool) {
	if o == nil || o.Namespaces == nil {
		return nil, false
	}
	return o.Namespaces, true
}

// HasNamespaces returns a boolean if a field has been set.
func (o *NamespaceIsolationData) HasNamespaces() bool {
	if o != nil && o.Namespaces != nil {
		return true
	}

	return false
}

// SetNamespaces gets a reference to the given []string and assigns it to the Namespaces field.
func (o *NamespaceIsolationData) SetNamespaces(v []string) {
	o.Namespaces = &v
}

// GetPrimary returns the Primary field value if set, zero value otherwise.
func (o *NamespaceIsolationData) GetPrimary() []string {
	if o == nil || o.Primary == nil {
		var ret []string
		return ret
	}
	return *o.Primary
}

// GetPrimaryOk returns a tuple with the Primary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceIsolationData) GetPrimaryOk() (*[]string, bool) {
	if o == nil || o.Primary == nil {
		return nil, false
	}
	return o.Primary, true
}

// HasPrimary returns a boolean if a field has been set.
func (o *NamespaceIsolationData) HasPrimary() bool {
	if o != nil && o.Primary != nil {
		return true
	}

	return false
}

// SetPrimary gets a reference to the given []string and assigns it to the Primary field.
func (o *NamespaceIsolationData) SetPrimary(v []string) {
	o.Primary = &v
}

// GetAutoFailoverPolicy returns the AutoFailoverPolicy field value if set, zero value otherwise.
func (o *NamespaceIsolationData) GetAutoFailoverPolicy() AutoFailoverPolicyData {
	if o == nil || o.AutoFailoverPolicy == nil {
		var ret AutoFailoverPolicyData
		return ret
	}
	return *o.AutoFailoverPolicy
}

// GetAutoFailoverPolicyOk returns a tuple with the AutoFailoverPolicy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NamespaceIsolationData) GetAutoFailoverPolicyOk() (*AutoFailoverPolicyData, bool) {
	if o == nil || o.AutoFailoverPolicy == nil {
		return nil, false
	}
	return o.AutoFailoverPolicy, true
}

// HasAutoFailoverPolicy returns a boolean if a field has been set.
func (o *NamespaceIsolationData) HasAutoFailoverPolicy() bool {
	if o != nil && o.AutoFailoverPolicy != nil {
		return true
	}

	return false
}

// SetAutoFailoverPolicy gets a reference to the given AutoFailoverPolicyData and assigns it to the AutoFailoverPolicy field.
func (o *NamespaceIsolationData) SetAutoFailoverPolicy(v AutoFailoverPolicyData) {
	o.AutoFailoverPolicy = &v
}

func (o NamespaceIsolationData) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespaces != nil {
		toSerialize["namespaces"] = o.Namespaces
	}
	if o.Primary != nil {
		toSerialize["primary"] = o.Primary
	}
	if o.AutoFailoverPolicy != nil {
		toSerialize["auto_failover_policy"] = o.AutoFailoverPolicy
	}
	return json.Marshal(toSerialize)
}

type NullableNamespaceIsolationData struct {
	value *NamespaceIsolationData
	isSet bool
}

func (v NullableNamespaceIsolationData) Get() *NamespaceIsolationData {
	return v.value
}

func (v *NullableNamespaceIsolationData) Set(val *NamespaceIsolationData) {
	v.value = val
	v.isSet = true
}

func (v NullableNamespaceIsolationData) IsSet() bool {
	return v.isSet
}

func (v *NullableNamespaceIsolationData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNamespaceIsolationData(val *NamespaceIsolationData) *NullableNamespaceIsolationData {
	return &NullableNamespaceIsolationData{value: val, isSet: true}
}

func (v NullableNamespaceIsolationData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNamespaceIsolationData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


