/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// LedgerInfo struct for LedgerInfo
type LedgerInfo struct {
	Entries *int64 `json:"entries,omitempty"`
	LedgerId *int64 `json:"ledgerId,omitempty"`
	Metadata *string `json:"metadata,omitempty"`
	Offloaded *bool `json:"offloaded,omitempty"`
	Size *int64 `json:"size,omitempty"`
}

// NewLedgerInfo instantiates a new LedgerInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLedgerInfo() *LedgerInfo {
	this := LedgerInfo{}
	return &this
}

// NewLedgerInfoWithDefaults instantiates a new LedgerInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLedgerInfoWithDefaults() *LedgerInfo {
	this := LedgerInfo{}
	return &this
}

// GetEntries returns the Entries field value if set, zero value otherwise.
func (o *LedgerInfo) GetEntries() int64 {
	if o == nil || o.Entries == nil {
		var ret int64
		return ret
	}
	return *o.Entries
}

// GetEntriesOk returns a tuple with the Entries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerInfo) GetEntriesOk() (*int64, bool) {
	if o == nil || o.Entries == nil {
		return nil, false
	}
	return o.Entries, true
}

// HasEntries returns a boolean if a field has been set.
func (o *LedgerInfo) HasEntries() bool {
	if o != nil && o.Entries != nil {
		return true
	}

	return false
}

// SetEntries gets a reference to the given int64 and assigns it to the Entries field.
func (o *LedgerInfo) SetEntries(v int64) {
	o.Entries = &v
}

// GetLedgerId returns the LedgerId field value if set, zero value otherwise.
func (o *LedgerInfo) GetLedgerId() int64 {
	if o == nil || o.LedgerId == nil {
		var ret int64
		return ret
	}
	return *o.LedgerId
}

// GetLedgerIdOk returns a tuple with the LedgerId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerInfo) GetLedgerIdOk() (*int64, bool) {
	if o == nil || o.LedgerId == nil {
		return nil, false
	}
	return o.LedgerId, true
}

// HasLedgerId returns a boolean if a field has been set.
func (o *LedgerInfo) HasLedgerId() bool {
	if o != nil && o.LedgerId != nil {
		return true
	}

	return false
}

// SetLedgerId gets a reference to the given int64 and assigns it to the LedgerId field.
func (o *LedgerInfo) SetLedgerId(v int64) {
	o.LedgerId = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *LedgerInfo) GetMetadata() string {
	if o == nil || o.Metadata == nil {
		var ret string
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerInfo) GetMetadataOk() (*string, bool) {
	if o == nil || o.Metadata == nil {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *LedgerInfo) HasMetadata() bool {
	if o != nil && o.Metadata != nil {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given string and assigns it to the Metadata field.
func (o *LedgerInfo) SetMetadata(v string) {
	o.Metadata = &v
}

// GetOffloaded returns the Offloaded field value if set, zero value otherwise.
func (o *LedgerInfo) GetOffloaded() bool {
	if o == nil || o.Offloaded == nil {
		var ret bool
		return ret
	}
	return *o.Offloaded
}

// GetOffloadedOk returns a tuple with the Offloaded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerInfo) GetOffloadedOk() (*bool, bool) {
	if o == nil || o.Offloaded == nil {
		return nil, false
	}
	return o.Offloaded, true
}

// HasOffloaded returns a boolean if a field has been set.
func (o *LedgerInfo) HasOffloaded() bool {
	if o != nil && o.Offloaded != nil {
		return true
	}

	return false
}

// SetOffloaded gets a reference to the given bool and assigns it to the Offloaded field.
func (o *LedgerInfo) SetOffloaded(v bool) {
	o.Offloaded = &v
}

// GetSize returns the Size field value if set, zero value otherwise.
func (o *LedgerInfo) GetSize() int64 {
	if o == nil || o.Size == nil {
		var ret int64
		return ret
	}
	return *o.Size
}

// GetSizeOk returns a tuple with the Size field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LedgerInfo) GetSizeOk() (*int64, bool) {
	if o == nil || o.Size == nil {
		return nil, false
	}
	return o.Size, true
}

// HasSize returns a boolean if a field has been set.
func (o *LedgerInfo) HasSize() bool {
	if o != nil && o.Size != nil {
		return true
	}

	return false
}

// SetSize gets a reference to the given int64 and assigns it to the Size field.
func (o *LedgerInfo) SetSize(v int64) {
	o.Size = &v
}

func (o LedgerInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Entries != nil {
		toSerialize["entries"] = o.Entries
	}
	if o.LedgerId != nil {
		toSerialize["ledgerId"] = o.LedgerId
	}
	if o.Metadata != nil {
		toSerialize["metadata"] = o.Metadata
	}
	if o.Offloaded != nil {
		toSerialize["offloaded"] = o.Offloaded
	}
	if o.Size != nil {
		toSerialize["size"] = o.Size
	}
	return json.Marshal(toSerialize)
}

type NullableLedgerInfo struct {
	value *LedgerInfo
	isSet bool
}

func (v NullableLedgerInfo) Get() *LedgerInfo {
	return v.value
}

func (v *NullableLedgerInfo) Set(val *LedgerInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableLedgerInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableLedgerInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLedgerInfo(val *LedgerInfo) *NullableLedgerInfo {
	return &NullableLedgerInfo{value: val, isSet: true}
}

func (v NullableLedgerInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLedgerInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


