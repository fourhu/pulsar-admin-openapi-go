/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JavaType struct for JavaType
type JavaType struct {
	JavaLangObject *bool `json:"javaLangObject,omitempty"`
	ArrayType *bool `json:"arrayType,omitempty"`
	Throwable *bool `json:"throwable,omitempty"`
	CollectionLikeType *bool `json:"collectionLikeType,omitempty"`
	MapLikeType *bool `json:"mapLikeType,omitempty"`
	ReferencedType *JavaType `json:"referencedType,omitempty"`
	ValueHandler *map[string]interface{} `json:"valueHandler,omitempty"`
	TypeHandler *map[string]interface{} `json:"typeHandler,omitempty"`
	ContentValueHandler *map[string]interface{} `json:"contentValueHandler,omitempty"`
	ContentTypeHandler *map[string]interface{} `json:"contentTypeHandler,omitempty"`
	ErasedSignature *string `json:"erasedSignature,omitempty"`
	ContainerType *bool `json:"containerType,omitempty"`
	Bindings *TypeBindings `json:"bindings,omitempty"`
	KeyType *JavaType `json:"keyType,omitempty"`
	Concrete *bool `json:"concrete,omitempty"`
	ContentType *JavaType `json:"contentType,omitempty"`
	EnumType *bool `json:"enumType,omitempty"`
	Interface *bool `json:"interface,omitempty"`
	Primitive *bool `json:"primitive,omitempty"`
	Interfaces *[]JavaType `json:"interfaces,omitempty"`
	GenericSignature *string `json:"genericSignature,omitempty"`
	Final *bool `json:"final,omitempty"`
	Abstract *bool `json:"abstract,omitempty"`
	SuperClass *JavaType `json:"superClass,omitempty"`
	TypeName *string `json:"typeName,omitempty"`
	ReferenceType *bool `json:"referenceType,omitempty"`
}

// NewJavaType instantiates a new JavaType object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJavaType() *JavaType {
	this := JavaType{}
	return &this
}

// NewJavaTypeWithDefaults instantiates a new JavaType object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJavaTypeWithDefaults() *JavaType {
	this := JavaType{}
	return &this
}

// GetJavaLangObject returns the JavaLangObject field value if set, zero value otherwise.
func (o *JavaType) GetJavaLangObject() bool {
	if o == nil || o.JavaLangObject == nil {
		var ret bool
		return ret
	}
	return *o.JavaLangObject
}

// GetJavaLangObjectOk returns a tuple with the JavaLangObject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetJavaLangObjectOk() (*bool, bool) {
	if o == nil || o.JavaLangObject == nil {
		return nil, false
	}
	return o.JavaLangObject, true
}

// HasJavaLangObject returns a boolean if a field has been set.
func (o *JavaType) HasJavaLangObject() bool {
	if o != nil && o.JavaLangObject != nil {
		return true
	}

	return false
}

// SetJavaLangObject gets a reference to the given bool and assigns it to the JavaLangObject field.
func (o *JavaType) SetJavaLangObject(v bool) {
	o.JavaLangObject = &v
}

// GetArrayType returns the ArrayType field value if set, zero value otherwise.
func (o *JavaType) GetArrayType() bool {
	if o == nil || o.ArrayType == nil {
		var ret bool
		return ret
	}
	return *o.ArrayType
}

// GetArrayTypeOk returns a tuple with the ArrayType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetArrayTypeOk() (*bool, bool) {
	if o == nil || o.ArrayType == nil {
		return nil, false
	}
	return o.ArrayType, true
}

// HasArrayType returns a boolean if a field has been set.
func (o *JavaType) HasArrayType() bool {
	if o != nil && o.ArrayType != nil {
		return true
	}

	return false
}

// SetArrayType gets a reference to the given bool and assigns it to the ArrayType field.
func (o *JavaType) SetArrayType(v bool) {
	o.ArrayType = &v
}

// GetThrowable returns the Throwable field value if set, zero value otherwise.
func (o *JavaType) GetThrowable() bool {
	if o == nil || o.Throwable == nil {
		var ret bool
		return ret
	}
	return *o.Throwable
}

// GetThrowableOk returns a tuple with the Throwable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetThrowableOk() (*bool, bool) {
	if o == nil || o.Throwable == nil {
		return nil, false
	}
	return o.Throwable, true
}

// HasThrowable returns a boolean if a field has been set.
func (o *JavaType) HasThrowable() bool {
	if o != nil && o.Throwable != nil {
		return true
	}

	return false
}

// SetThrowable gets a reference to the given bool and assigns it to the Throwable field.
func (o *JavaType) SetThrowable(v bool) {
	o.Throwable = &v
}

// GetCollectionLikeType returns the CollectionLikeType field value if set, zero value otherwise.
func (o *JavaType) GetCollectionLikeType() bool {
	if o == nil || o.CollectionLikeType == nil {
		var ret bool
		return ret
	}
	return *o.CollectionLikeType
}

// GetCollectionLikeTypeOk returns a tuple with the CollectionLikeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetCollectionLikeTypeOk() (*bool, bool) {
	if o == nil || o.CollectionLikeType == nil {
		return nil, false
	}
	return o.CollectionLikeType, true
}

// HasCollectionLikeType returns a boolean if a field has been set.
func (o *JavaType) HasCollectionLikeType() bool {
	if o != nil && o.CollectionLikeType != nil {
		return true
	}

	return false
}

// SetCollectionLikeType gets a reference to the given bool and assigns it to the CollectionLikeType field.
func (o *JavaType) SetCollectionLikeType(v bool) {
	o.CollectionLikeType = &v
}

// GetMapLikeType returns the MapLikeType field value if set, zero value otherwise.
func (o *JavaType) GetMapLikeType() bool {
	if o == nil || o.MapLikeType == nil {
		var ret bool
		return ret
	}
	return *o.MapLikeType
}

// GetMapLikeTypeOk returns a tuple with the MapLikeType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetMapLikeTypeOk() (*bool, bool) {
	if o == nil || o.MapLikeType == nil {
		return nil, false
	}
	return o.MapLikeType, true
}

// HasMapLikeType returns a boolean if a field has been set.
func (o *JavaType) HasMapLikeType() bool {
	if o != nil && o.MapLikeType != nil {
		return true
	}

	return false
}

// SetMapLikeType gets a reference to the given bool and assigns it to the MapLikeType field.
func (o *JavaType) SetMapLikeType(v bool) {
	o.MapLikeType = &v
}

// GetReferencedType returns the ReferencedType field value if set, zero value otherwise.
func (o *JavaType) GetReferencedType() JavaType {
	if o == nil || o.ReferencedType == nil {
		var ret JavaType
		return ret
	}
	return *o.ReferencedType
}

// GetReferencedTypeOk returns a tuple with the ReferencedType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetReferencedTypeOk() (*JavaType, bool) {
	if o == nil || o.ReferencedType == nil {
		return nil, false
	}
	return o.ReferencedType, true
}

// HasReferencedType returns a boolean if a field has been set.
func (o *JavaType) HasReferencedType() bool {
	if o != nil && o.ReferencedType != nil {
		return true
	}

	return false
}

// SetReferencedType gets a reference to the given JavaType and assigns it to the ReferencedType field.
func (o *JavaType) SetReferencedType(v JavaType) {
	o.ReferencedType = &v
}

// GetValueHandler returns the ValueHandler field value if set, zero value otherwise.
func (o *JavaType) GetValueHandler() map[string]interface{} {
	if o == nil || o.ValueHandler == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ValueHandler
}

// GetValueHandlerOk returns a tuple with the ValueHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetValueHandlerOk() (*map[string]interface{}, bool) {
	if o == nil || o.ValueHandler == nil {
		return nil, false
	}
	return o.ValueHandler, true
}

// HasValueHandler returns a boolean if a field has been set.
func (o *JavaType) HasValueHandler() bool {
	if o != nil && o.ValueHandler != nil {
		return true
	}

	return false
}

// SetValueHandler gets a reference to the given map[string]interface{} and assigns it to the ValueHandler field.
func (o *JavaType) SetValueHandler(v map[string]interface{}) {
	o.ValueHandler = &v
}

// GetTypeHandler returns the TypeHandler field value if set, zero value otherwise.
func (o *JavaType) GetTypeHandler() map[string]interface{} {
	if o == nil || o.TypeHandler == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.TypeHandler
}

// GetTypeHandlerOk returns a tuple with the TypeHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetTypeHandlerOk() (*map[string]interface{}, bool) {
	if o == nil || o.TypeHandler == nil {
		return nil, false
	}
	return o.TypeHandler, true
}

// HasTypeHandler returns a boolean if a field has been set.
func (o *JavaType) HasTypeHandler() bool {
	if o != nil && o.TypeHandler != nil {
		return true
	}

	return false
}

// SetTypeHandler gets a reference to the given map[string]interface{} and assigns it to the TypeHandler field.
func (o *JavaType) SetTypeHandler(v map[string]interface{}) {
	o.TypeHandler = &v
}

// GetContentValueHandler returns the ContentValueHandler field value if set, zero value otherwise.
func (o *JavaType) GetContentValueHandler() map[string]interface{} {
	if o == nil || o.ContentValueHandler == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ContentValueHandler
}

// GetContentValueHandlerOk returns a tuple with the ContentValueHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetContentValueHandlerOk() (*map[string]interface{}, bool) {
	if o == nil || o.ContentValueHandler == nil {
		return nil, false
	}
	return o.ContentValueHandler, true
}

// HasContentValueHandler returns a boolean if a field has been set.
func (o *JavaType) HasContentValueHandler() bool {
	if o != nil && o.ContentValueHandler != nil {
		return true
	}

	return false
}

// SetContentValueHandler gets a reference to the given map[string]interface{} and assigns it to the ContentValueHandler field.
func (o *JavaType) SetContentValueHandler(v map[string]interface{}) {
	o.ContentValueHandler = &v
}

// GetContentTypeHandler returns the ContentTypeHandler field value if set, zero value otherwise.
func (o *JavaType) GetContentTypeHandler() map[string]interface{} {
	if o == nil || o.ContentTypeHandler == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ContentTypeHandler
}

// GetContentTypeHandlerOk returns a tuple with the ContentTypeHandler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetContentTypeHandlerOk() (*map[string]interface{}, bool) {
	if o == nil || o.ContentTypeHandler == nil {
		return nil, false
	}
	return o.ContentTypeHandler, true
}

// HasContentTypeHandler returns a boolean if a field has been set.
func (o *JavaType) HasContentTypeHandler() bool {
	if o != nil && o.ContentTypeHandler != nil {
		return true
	}

	return false
}

// SetContentTypeHandler gets a reference to the given map[string]interface{} and assigns it to the ContentTypeHandler field.
func (o *JavaType) SetContentTypeHandler(v map[string]interface{}) {
	o.ContentTypeHandler = &v
}

// GetErasedSignature returns the ErasedSignature field value if set, zero value otherwise.
func (o *JavaType) GetErasedSignature() string {
	if o == nil || o.ErasedSignature == nil {
		var ret string
		return ret
	}
	return *o.ErasedSignature
}

// GetErasedSignatureOk returns a tuple with the ErasedSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetErasedSignatureOk() (*string, bool) {
	if o == nil || o.ErasedSignature == nil {
		return nil, false
	}
	return o.ErasedSignature, true
}

// HasErasedSignature returns a boolean if a field has been set.
func (o *JavaType) HasErasedSignature() bool {
	if o != nil && o.ErasedSignature != nil {
		return true
	}

	return false
}

// SetErasedSignature gets a reference to the given string and assigns it to the ErasedSignature field.
func (o *JavaType) SetErasedSignature(v string) {
	o.ErasedSignature = &v
}

// GetContainerType returns the ContainerType field value if set, zero value otherwise.
func (o *JavaType) GetContainerType() bool {
	if o == nil || o.ContainerType == nil {
		var ret bool
		return ret
	}
	return *o.ContainerType
}

// GetContainerTypeOk returns a tuple with the ContainerType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetContainerTypeOk() (*bool, bool) {
	if o == nil || o.ContainerType == nil {
		return nil, false
	}
	return o.ContainerType, true
}

// HasContainerType returns a boolean if a field has been set.
func (o *JavaType) HasContainerType() bool {
	if o != nil && o.ContainerType != nil {
		return true
	}

	return false
}

// SetContainerType gets a reference to the given bool and assigns it to the ContainerType field.
func (o *JavaType) SetContainerType(v bool) {
	o.ContainerType = &v
}

// GetBindings returns the Bindings field value if set, zero value otherwise.
func (o *JavaType) GetBindings() TypeBindings {
	if o == nil || o.Bindings == nil {
		var ret TypeBindings
		return ret
	}
	return *o.Bindings
}

// GetBindingsOk returns a tuple with the Bindings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetBindingsOk() (*TypeBindings, bool) {
	if o == nil || o.Bindings == nil {
		return nil, false
	}
	return o.Bindings, true
}

// HasBindings returns a boolean if a field has been set.
func (o *JavaType) HasBindings() bool {
	if o != nil && o.Bindings != nil {
		return true
	}

	return false
}

// SetBindings gets a reference to the given TypeBindings and assigns it to the Bindings field.
func (o *JavaType) SetBindings(v TypeBindings) {
	o.Bindings = &v
}

// GetKeyType returns the KeyType field value if set, zero value otherwise.
func (o *JavaType) GetKeyType() JavaType {
	if o == nil || o.KeyType == nil {
		var ret JavaType
		return ret
	}
	return *o.KeyType
}

// GetKeyTypeOk returns a tuple with the KeyType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetKeyTypeOk() (*JavaType, bool) {
	if o == nil || o.KeyType == nil {
		return nil, false
	}
	return o.KeyType, true
}

// HasKeyType returns a boolean if a field has been set.
func (o *JavaType) HasKeyType() bool {
	if o != nil && o.KeyType != nil {
		return true
	}

	return false
}

// SetKeyType gets a reference to the given JavaType and assigns it to the KeyType field.
func (o *JavaType) SetKeyType(v JavaType) {
	o.KeyType = &v
}

// GetConcrete returns the Concrete field value if set, zero value otherwise.
func (o *JavaType) GetConcrete() bool {
	if o == nil || o.Concrete == nil {
		var ret bool
		return ret
	}
	return *o.Concrete
}

// GetConcreteOk returns a tuple with the Concrete field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetConcreteOk() (*bool, bool) {
	if o == nil || o.Concrete == nil {
		return nil, false
	}
	return o.Concrete, true
}

// HasConcrete returns a boolean if a field has been set.
func (o *JavaType) HasConcrete() bool {
	if o != nil && o.Concrete != nil {
		return true
	}

	return false
}

// SetConcrete gets a reference to the given bool and assigns it to the Concrete field.
func (o *JavaType) SetConcrete(v bool) {
	o.Concrete = &v
}

// GetContentType returns the ContentType field value if set, zero value otherwise.
func (o *JavaType) GetContentType() JavaType {
	if o == nil || o.ContentType == nil {
		var ret JavaType
		return ret
	}
	return *o.ContentType
}

// GetContentTypeOk returns a tuple with the ContentType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetContentTypeOk() (*JavaType, bool) {
	if o == nil || o.ContentType == nil {
		return nil, false
	}
	return o.ContentType, true
}

// HasContentType returns a boolean if a field has been set.
func (o *JavaType) HasContentType() bool {
	if o != nil && o.ContentType != nil {
		return true
	}

	return false
}

// SetContentType gets a reference to the given JavaType and assigns it to the ContentType field.
func (o *JavaType) SetContentType(v JavaType) {
	o.ContentType = &v
}

// GetEnumType returns the EnumType field value if set, zero value otherwise.
func (o *JavaType) GetEnumType() bool {
	if o == nil || o.EnumType == nil {
		var ret bool
		return ret
	}
	return *o.EnumType
}

// GetEnumTypeOk returns a tuple with the EnumType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetEnumTypeOk() (*bool, bool) {
	if o == nil || o.EnumType == nil {
		return nil, false
	}
	return o.EnumType, true
}

// HasEnumType returns a boolean if a field has been set.
func (o *JavaType) HasEnumType() bool {
	if o != nil && o.EnumType != nil {
		return true
	}

	return false
}

// SetEnumType gets a reference to the given bool and assigns it to the EnumType field.
func (o *JavaType) SetEnumType(v bool) {
	o.EnumType = &v
}

// GetInterface returns the Interface field value if set, zero value otherwise.
func (o *JavaType) GetInterface() bool {
	if o == nil || o.Interface == nil {
		var ret bool
		return ret
	}
	return *o.Interface
}

// GetInterfaceOk returns a tuple with the Interface field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetInterfaceOk() (*bool, bool) {
	if o == nil || o.Interface == nil {
		return nil, false
	}
	return o.Interface, true
}

// HasInterface returns a boolean if a field has been set.
func (o *JavaType) HasInterface() bool {
	if o != nil && o.Interface != nil {
		return true
	}

	return false
}

// SetInterface gets a reference to the given bool and assigns it to the Interface field.
func (o *JavaType) SetInterface(v bool) {
	o.Interface = &v
}

// GetPrimitive returns the Primitive field value if set, zero value otherwise.
func (o *JavaType) GetPrimitive() bool {
	if o == nil || o.Primitive == nil {
		var ret bool
		return ret
	}
	return *o.Primitive
}

// GetPrimitiveOk returns a tuple with the Primitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetPrimitiveOk() (*bool, bool) {
	if o == nil || o.Primitive == nil {
		return nil, false
	}
	return o.Primitive, true
}

// HasPrimitive returns a boolean if a field has been set.
func (o *JavaType) HasPrimitive() bool {
	if o != nil && o.Primitive != nil {
		return true
	}

	return false
}

// SetPrimitive gets a reference to the given bool and assigns it to the Primitive field.
func (o *JavaType) SetPrimitive(v bool) {
	o.Primitive = &v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *JavaType) GetInterfaces() []JavaType {
	if o == nil || o.Interfaces == nil {
		var ret []JavaType
		return ret
	}
	return *o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetInterfacesOk() (*[]JavaType, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *JavaType) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []JavaType and assigns it to the Interfaces field.
func (o *JavaType) SetInterfaces(v []JavaType) {
	o.Interfaces = &v
}

// GetGenericSignature returns the GenericSignature field value if set, zero value otherwise.
func (o *JavaType) GetGenericSignature() string {
	if o == nil || o.GenericSignature == nil {
		var ret string
		return ret
	}
	return *o.GenericSignature
}

// GetGenericSignatureOk returns a tuple with the GenericSignature field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetGenericSignatureOk() (*string, bool) {
	if o == nil || o.GenericSignature == nil {
		return nil, false
	}
	return o.GenericSignature, true
}

// HasGenericSignature returns a boolean if a field has been set.
func (o *JavaType) HasGenericSignature() bool {
	if o != nil && o.GenericSignature != nil {
		return true
	}

	return false
}

// SetGenericSignature gets a reference to the given string and assigns it to the GenericSignature field.
func (o *JavaType) SetGenericSignature(v string) {
	o.GenericSignature = &v
}

// GetFinal returns the Final field value if set, zero value otherwise.
func (o *JavaType) GetFinal() bool {
	if o == nil || o.Final == nil {
		var ret bool
		return ret
	}
	return *o.Final
}

// GetFinalOk returns a tuple with the Final field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetFinalOk() (*bool, bool) {
	if o == nil || o.Final == nil {
		return nil, false
	}
	return o.Final, true
}

// HasFinal returns a boolean if a field has been set.
func (o *JavaType) HasFinal() bool {
	if o != nil && o.Final != nil {
		return true
	}

	return false
}

// SetFinal gets a reference to the given bool and assigns it to the Final field.
func (o *JavaType) SetFinal(v bool) {
	o.Final = &v
}

// GetAbstract returns the Abstract field value if set, zero value otherwise.
func (o *JavaType) GetAbstract() bool {
	if o == nil || o.Abstract == nil {
		var ret bool
		return ret
	}
	return *o.Abstract
}

// GetAbstractOk returns a tuple with the Abstract field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetAbstractOk() (*bool, bool) {
	if o == nil || o.Abstract == nil {
		return nil, false
	}
	return o.Abstract, true
}

// HasAbstract returns a boolean if a field has been set.
func (o *JavaType) HasAbstract() bool {
	if o != nil && o.Abstract != nil {
		return true
	}

	return false
}

// SetAbstract gets a reference to the given bool and assigns it to the Abstract field.
func (o *JavaType) SetAbstract(v bool) {
	o.Abstract = &v
}

// GetSuperClass returns the SuperClass field value if set, zero value otherwise.
func (o *JavaType) GetSuperClass() JavaType {
	if o == nil || o.SuperClass == nil {
		var ret JavaType
		return ret
	}
	return *o.SuperClass
}

// GetSuperClassOk returns a tuple with the SuperClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetSuperClassOk() (*JavaType, bool) {
	if o == nil || o.SuperClass == nil {
		return nil, false
	}
	return o.SuperClass, true
}

// HasSuperClass returns a boolean if a field has been set.
func (o *JavaType) HasSuperClass() bool {
	if o != nil && o.SuperClass != nil {
		return true
	}

	return false
}

// SetSuperClass gets a reference to the given JavaType and assigns it to the SuperClass field.
func (o *JavaType) SetSuperClass(v JavaType) {
	o.SuperClass = &v
}

// GetTypeName returns the TypeName field value if set, zero value otherwise.
func (o *JavaType) GetTypeName() string {
	if o == nil || o.TypeName == nil {
		var ret string
		return ret
	}
	return *o.TypeName
}

// GetTypeNameOk returns a tuple with the TypeName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetTypeNameOk() (*string, bool) {
	if o == nil || o.TypeName == nil {
		return nil, false
	}
	return o.TypeName, true
}

// HasTypeName returns a boolean if a field has been set.
func (o *JavaType) HasTypeName() bool {
	if o != nil && o.TypeName != nil {
		return true
	}

	return false
}

// SetTypeName gets a reference to the given string and assigns it to the TypeName field.
func (o *JavaType) SetTypeName(v string) {
	o.TypeName = &v
}

// GetReferenceType returns the ReferenceType field value if set, zero value otherwise.
func (o *JavaType) GetReferenceType() bool {
	if o == nil || o.ReferenceType == nil {
		var ret bool
		return ret
	}
	return *o.ReferenceType
}

// GetReferenceTypeOk returns a tuple with the ReferenceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JavaType) GetReferenceTypeOk() (*bool, bool) {
	if o == nil || o.ReferenceType == nil {
		return nil, false
	}
	return o.ReferenceType, true
}

// HasReferenceType returns a boolean if a field has been set.
func (o *JavaType) HasReferenceType() bool {
	if o != nil && o.ReferenceType != nil {
		return true
	}

	return false
}

// SetReferenceType gets a reference to the given bool and assigns it to the ReferenceType field.
func (o *JavaType) SetReferenceType(v bool) {
	o.ReferenceType = &v
}

func (o JavaType) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.JavaLangObject != nil {
		toSerialize["javaLangObject"] = o.JavaLangObject
	}
	if o.ArrayType != nil {
		toSerialize["arrayType"] = o.ArrayType
	}
	if o.Throwable != nil {
		toSerialize["throwable"] = o.Throwable
	}
	if o.CollectionLikeType != nil {
		toSerialize["collectionLikeType"] = o.CollectionLikeType
	}
	if o.MapLikeType != nil {
		toSerialize["mapLikeType"] = o.MapLikeType
	}
	if o.ReferencedType != nil {
		toSerialize["referencedType"] = o.ReferencedType
	}
	if o.ValueHandler != nil {
		toSerialize["valueHandler"] = o.ValueHandler
	}
	if o.TypeHandler != nil {
		toSerialize["typeHandler"] = o.TypeHandler
	}
	if o.ContentValueHandler != nil {
		toSerialize["contentValueHandler"] = o.ContentValueHandler
	}
	if o.ContentTypeHandler != nil {
		toSerialize["contentTypeHandler"] = o.ContentTypeHandler
	}
	if o.ErasedSignature != nil {
		toSerialize["erasedSignature"] = o.ErasedSignature
	}
	if o.ContainerType != nil {
		toSerialize["containerType"] = o.ContainerType
	}
	if o.Bindings != nil {
		toSerialize["bindings"] = o.Bindings
	}
	if o.KeyType != nil {
		toSerialize["keyType"] = o.KeyType
	}
	if o.Concrete != nil {
		toSerialize["concrete"] = o.Concrete
	}
	if o.ContentType != nil {
		toSerialize["contentType"] = o.ContentType
	}
	if o.EnumType != nil {
		toSerialize["enumType"] = o.EnumType
	}
	if o.Interface != nil {
		toSerialize["interface"] = o.Interface
	}
	if o.Primitive != nil {
		toSerialize["primitive"] = o.Primitive
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.GenericSignature != nil {
		toSerialize["genericSignature"] = o.GenericSignature
	}
	if o.Final != nil {
		toSerialize["final"] = o.Final
	}
	if o.Abstract != nil {
		toSerialize["abstract"] = o.Abstract
	}
	if o.SuperClass != nil {
		toSerialize["superClass"] = o.SuperClass
	}
	if o.TypeName != nil {
		toSerialize["typeName"] = o.TypeName
	}
	if o.ReferenceType != nil {
		toSerialize["referenceType"] = o.ReferenceType
	}
	return json.Marshal(toSerialize)
}

type NullableJavaType struct {
	value *JavaType
	isSet bool
}

func (v NullableJavaType) Get() *JavaType {
	return v.value
}

func (v *NullableJavaType) Set(val *JavaType) {
	v.value = val
	v.isSet = true
}

func (v NullableJavaType) IsSet() bool {
	return v.isSet
}

func (v *NullableJavaType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJavaType(val *JavaType) *NullableJavaType {
	return &NullableJavaType{value: val, isSet: true}
}

func (v NullableJavaType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJavaType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


