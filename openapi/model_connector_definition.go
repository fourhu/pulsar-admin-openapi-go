/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ConnectorDefinition struct for ConnectorDefinition
type ConnectorDefinition struct {
	Name *string `json:"name,omitempty"`
	Description *string `json:"description,omitempty"`
	SourceClass *string `json:"sourceClass,omitempty"`
	SinkClass *string `json:"sinkClass,omitempty"`
	SourceConfigClass *string `json:"sourceConfigClass,omitempty"`
	SinkConfigClass *string `json:"sinkConfigClass,omitempty"`
}

// NewConnectorDefinition instantiates a new ConnectorDefinition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConnectorDefinition() *ConnectorDefinition {
	this := ConnectorDefinition{}
	return &this
}

// NewConnectorDefinitionWithDefaults instantiates a new ConnectorDefinition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConnectorDefinitionWithDefaults() *ConnectorDefinition {
	this := ConnectorDefinition{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ConnectorDefinition) SetName(v string) {
	o.Name = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *ConnectorDefinition) SetDescription(v string) {
	o.Description = &v
}

// GetSourceClass returns the SourceClass field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetSourceClass() string {
	if o == nil || o.SourceClass == nil {
		var ret string
		return ret
	}
	return *o.SourceClass
}

// GetSourceClassOk returns a tuple with the SourceClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetSourceClassOk() (*string, bool) {
	if o == nil || o.SourceClass == nil {
		return nil, false
	}
	return o.SourceClass, true
}

// HasSourceClass returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasSourceClass() bool {
	if o != nil && o.SourceClass != nil {
		return true
	}

	return false
}

// SetSourceClass gets a reference to the given string and assigns it to the SourceClass field.
func (o *ConnectorDefinition) SetSourceClass(v string) {
	o.SourceClass = &v
}

// GetSinkClass returns the SinkClass field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetSinkClass() string {
	if o == nil || o.SinkClass == nil {
		var ret string
		return ret
	}
	return *o.SinkClass
}

// GetSinkClassOk returns a tuple with the SinkClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetSinkClassOk() (*string, bool) {
	if o == nil || o.SinkClass == nil {
		return nil, false
	}
	return o.SinkClass, true
}

// HasSinkClass returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasSinkClass() bool {
	if o != nil && o.SinkClass != nil {
		return true
	}

	return false
}

// SetSinkClass gets a reference to the given string and assigns it to the SinkClass field.
func (o *ConnectorDefinition) SetSinkClass(v string) {
	o.SinkClass = &v
}

// GetSourceConfigClass returns the SourceConfigClass field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetSourceConfigClass() string {
	if o == nil || o.SourceConfigClass == nil {
		var ret string
		return ret
	}
	return *o.SourceConfigClass
}

// GetSourceConfigClassOk returns a tuple with the SourceConfigClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetSourceConfigClassOk() (*string, bool) {
	if o == nil || o.SourceConfigClass == nil {
		return nil, false
	}
	return o.SourceConfigClass, true
}

// HasSourceConfigClass returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasSourceConfigClass() bool {
	if o != nil && o.SourceConfigClass != nil {
		return true
	}

	return false
}

// SetSourceConfigClass gets a reference to the given string and assigns it to the SourceConfigClass field.
func (o *ConnectorDefinition) SetSourceConfigClass(v string) {
	o.SourceConfigClass = &v
}

// GetSinkConfigClass returns the SinkConfigClass field value if set, zero value otherwise.
func (o *ConnectorDefinition) GetSinkConfigClass() string {
	if o == nil || o.SinkConfigClass == nil {
		var ret string
		return ret
	}
	return *o.SinkConfigClass
}

// GetSinkConfigClassOk returns a tuple with the SinkConfigClass field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ConnectorDefinition) GetSinkConfigClassOk() (*string, bool) {
	if o == nil || o.SinkConfigClass == nil {
		return nil, false
	}
	return o.SinkConfigClass, true
}

// HasSinkConfigClass returns a boolean if a field has been set.
func (o *ConnectorDefinition) HasSinkConfigClass() bool {
	if o != nil && o.SinkConfigClass != nil {
		return true
	}

	return false
}

// SetSinkConfigClass gets a reference to the given string and assigns it to the SinkConfigClass field.
func (o *ConnectorDefinition) SetSinkConfigClass(v string) {
	o.SinkConfigClass = &v
}

func (o ConnectorDefinition) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.SourceClass != nil {
		toSerialize["sourceClass"] = o.SourceClass
	}
	if o.SinkClass != nil {
		toSerialize["sinkClass"] = o.SinkClass
	}
	if o.SourceConfigClass != nil {
		toSerialize["sourceConfigClass"] = o.SourceConfigClass
	}
	if o.SinkConfigClass != nil {
		toSerialize["sinkConfigClass"] = o.SinkConfigClass
	}
	return json.Marshal(toSerialize)
}

type NullableConnectorDefinition struct {
	value *ConnectorDefinition
	isSet bool
}

func (v NullableConnectorDefinition) Get() *ConnectorDefinition {
	return v.value
}

func (v *NullableConnectorDefinition) Set(val *ConnectorDefinition) {
	v.value = val
	v.isSet = true
}

func (v NullableConnectorDefinition) IsSet() bool {
	return v.isSet
}

func (v *NullableConnectorDefinition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConnectorDefinition(val *ConnectorDefinition) *NullableConnectorDefinition {
	return &NullableConnectorDefinition{value: val, isSet: true}
}

func (v NullableConnectorDefinition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConnectorDefinition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


