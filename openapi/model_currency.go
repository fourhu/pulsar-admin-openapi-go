/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Currency struct for Currency
type Currency struct {
	CurrencyCode *string `json:"currencyCode,omitempty"`
	DefaultFractionDigits *int32 `json:"defaultFractionDigits,omitempty"`
	NumericCode *int32 `json:"numericCode,omitempty"`
	DisplayName *string `json:"displayName,omitempty"`
	Symbol *string `json:"symbol,omitempty"`
	NumericCodeAsString *string `json:"numericCodeAsString,omitempty"`
}

// NewCurrency instantiates a new Currency object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCurrency() *Currency {
	this := Currency{}
	return &this
}

// NewCurrencyWithDefaults instantiates a new Currency object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCurrencyWithDefaults() *Currency {
	this := Currency{}
	return &this
}

// GetCurrencyCode returns the CurrencyCode field value if set, zero value otherwise.
func (o *Currency) GetCurrencyCode() string {
	if o == nil || o.CurrencyCode == nil {
		var ret string
		return ret
	}
	return *o.CurrencyCode
}

// GetCurrencyCodeOk returns a tuple with the CurrencyCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetCurrencyCodeOk() (*string, bool) {
	if o == nil || o.CurrencyCode == nil {
		return nil, false
	}
	return o.CurrencyCode, true
}

// HasCurrencyCode returns a boolean if a field has been set.
func (o *Currency) HasCurrencyCode() bool {
	if o != nil && o.CurrencyCode != nil {
		return true
	}

	return false
}

// SetCurrencyCode gets a reference to the given string and assigns it to the CurrencyCode field.
func (o *Currency) SetCurrencyCode(v string) {
	o.CurrencyCode = &v
}

// GetDefaultFractionDigits returns the DefaultFractionDigits field value if set, zero value otherwise.
func (o *Currency) GetDefaultFractionDigits() int32 {
	if o == nil || o.DefaultFractionDigits == nil {
		var ret int32
		return ret
	}
	return *o.DefaultFractionDigits
}

// GetDefaultFractionDigitsOk returns a tuple with the DefaultFractionDigits field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetDefaultFractionDigitsOk() (*int32, bool) {
	if o == nil || o.DefaultFractionDigits == nil {
		return nil, false
	}
	return o.DefaultFractionDigits, true
}

// HasDefaultFractionDigits returns a boolean if a field has been set.
func (o *Currency) HasDefaultFractionDigits() bool {
	if o != nil && o.DefaultFractionDigits != nil {
		return true
	}

	return false
}

// SetDefaultFractionDigits gets a reference to the given int32 and assigns it to the DefaultFractionDigits field.
func (o *Currency) SetDefaultFractionDigits(v int32) {
	o.DefaultFractionDigits = &v
}

// GetNumericCode returns the NumericCode field value if set, zero value otherwise.
func (o *Currency) GetNumericCode() int32 {
	if o == nil || o.NumericCode == nil {
		var ret int32
		return ret
	}
	return *o.NumericCode
}

// GetNumericCodeOk returns a tuple with the NumericCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetNumericCodeOk() (*int32, bool) {
	if o == nil || o.NumericCode == nil {
		return nil, false
	}
	return o.NumericCode, true
}

// HasNumericCode returns a boolean if a field has been set.
func (o *Currency) HasNumericCode() bool {
	if o != nil && o.NumericCode != nil {
		return true
	}

	return false
}

// SetNumericCode gets a reference to the given int32 and assigns it to the NumericCode field.
func (o *Currency) SetNumericCode(v int32) {
	o.NumericCode = &v
}

// GetDisplayName returns the DisplayName field value if set, zero value otherwise.
func (o *Currency) GetDisplayName() string {
	if o == nil || o.DisplayName == nil {
		var ret string
		return ret
	}
	return *o.DisplayName
}

// GetDisplayNameOk returns a tuple with the DisplayName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetDisplayNameOk() (*string, bool) {
	if o == nil || o.DisplayName == nil {
		return nil, false
	}
	return o.DisplayName, true
}

// HasDisplayName returns a boolean if a field has been set.
func (o *Currency) HasDisplayName() bool {
	if o != nil && o.DisplayName != nil {
		return true
	}

	return false
}

// SetDisplayName gets a reference to the given string and assigns it to the DisplayName field.
func (o *Currency) SetDisplayName(v string) {
	o.DisplayName = &v
}

// GetSymbol returns the Symbol field value if set, zero value otherwise.
func (o *Currency) GetSymbol() string {
	if o == nil || o.Symbol == nil {
		var ret string
		return ret
	}
	return *o.Symbol
}

// GetSymbolOk returns a tuple with the Symbol field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetSymbolOk() (*string, bool) {
	if o == nil || o.Symbol == nil {
		return nil, false
	}
	return o.Symbol, true
}

// HasSymbol returns a boolean if a field has been set.
func (o *Currency) HasSymbol() bool {
	if o != nil && o.Symbol != nil {
		return true
	}

	return false
}

// SetSymbol gets a reference to the given string and assigns it to the Symbol field.
func (o *Currency) SetSymbol(v string) {
	o.Symbol = &v
}

// GetNumericCodeAsString returns the NumericCodeAsString field value if set, zero value otherwise.
func (o *Currency) GetNumericCodeAsString() string {
	if o == nil || o.NumericCodeAsString == nil {
		var ret string
		return ret
	}
	return *o.NumericCodeAsString
}

// GetNumericCodeAsStringOk returns a tuple with the NumericCodeAsString field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Currency) GetNumericCodeAsStringOk() (*string, bool) {
	if o == nil || o.NumericCodeAsString == nil {
		return nil, false
	}
	return o.NumericCodeAsString, true
}

// HasNumericCodeAsString returns a boolean if a field has been set.
func (o *Currency) HasNumericCodeAsString() bool {
	if o != nil && o.NumericCodeAsString != nil {
		return true
	}

	return false
}

// SetNumericCodeAsString gets a reference to the given string and assigns it to the NumericCodeAsString field.
func (o *Currency) SetNumericCodeAsString(v string) {
	o.NumericCodeAsString = &v
}

func (o Currency) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrencyCode != nil {
		toSerialize["currencyCode"] = o.CurrencyCode
	}
	if o.DefaultFractionDigits != nil {
		toSerialize["defaultFractionDigits"] = o.DefaultFractionDigits
	}
	if o.NumericCode != nil {
		toSerialize["numericCode"] = o.NumericCode
	}
	if o.DisplayName != nil {
		toSerialize["displayName"] = o.DisplayName
	}
	if o.Symbol != nil {
		toSerialize["symbol"] = o.Symbol
	}
	if o.NumericCodeAsString != nil {
		toSerialize["numericCodeAsString"] = o.NumericCodeAsString
	}
	return json.Marshal(toSerialize)
}

type NullableCurrency struct {
	value *Currency
	isSet bool
}

func (v NullableCurrency) Get() *Currency {
	return v.value
}

func (v *NullableCurrency) Set(val *Currency) {
	v.value = val
	v.isSet = true
}

func (v NullableCurrency) IsSet() bool {
	return v.isSet
}

func (v *NullableCurrency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCurrency(val *Currency) *NullableCurrency {
	return &NullableCurrency{value: val, isSet: true}
}

func (v NullableCurrency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCurrency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


