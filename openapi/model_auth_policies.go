/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthPolicies struct for AuthPolicies
type AuthPolicies struct {
	TopicAuthentication *map[string]map[string][]string `json:"topicAuthentication,omitempty"`
	SubscriptionAuthentication *map[string][]string `json:"subscriptionAuthentication,omitempty"`
	NamespaceAuthentication *map[string][]string `json:"namespaceAuthentication,omitempty"`
}

// NewAuthPolicies instantiates a new AuthPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthPolicies() *AuthPolicies {
	this := AuthPolicies{}
	return &this
}

// NewAuthPoliciesWithDefaults instantiates a new AuthPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthPoliciesWithDefaults() *AuthPolicies {
	this := AuthPolicies{}
	return &this
}

// GetTopicAuthentication returns the TopicAuthentication field value if set, zero value otherwise.
func (o *AuthPolicies) GetTopicAuthentication() map[string]map[string][]string {
	if o == nil || o.TopicAuthentication == nil {
		var ret map[string]map[string][]string
		return ret
	}
	return *o.TopicAuthentication
}

// GetTopicAuthenticationOk returns a tuple with the TopicAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetTopicAuthenticationOk() (*map[string]map[string][]string, bool) {
	if o == nil || o.TopicAuthentication == nil {
		return nil, false
	}
	return o.TopicAuthentication, true
}

// HasTopicAuthentication returns a boolean if a field has been set.
func (o *AuthPolicies) HasTopicAuthentication() bool {
	if o != nil && o.TopicAuthentication != nil {
		return true
	}

	return false
}

// SetTopicAuthentication gets a reference to the given map[string]map[string][]string and assigns it to the TopicAuthentication field.
func (o *AuthPolicies) SetTopicAuthentication(v map[string]map[string][]string) {
	o.TopicAuthentication = &v
}

// GetSubscriptionAuthentication returns the SubscriptionAuthentication field value if set, zero value otherwise.
func (o *AuthPolicies) GetSubscriptionAuthentication() map[string][]string {
	if o == nil || o.SubscriptionAuthentication == nil {
		var ret map[string][]string
		return ret
	}
	return *o.SubscriptionAuthentication
}

// GetSubscriptionAuthenticationOk returns a tuple with the SubscriptionAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetSubscriptionAuthenticationOk() (*map[string][]string, bool) {
	if o == nil || o.SubscriptionAuthentication == nil {
		return nil, false
	}
	return o.SubscriptionAuthentication, true
}

// HasSubscriptionAuthentication returns a boolean if a field has been set.
func (o *AuthPolicies) HasSubscriptionAuthentication() bool {
	if o != nil && o.SubscriptionAuthentication != nil {
		return true
	}

	return false
}

// SetSubscriptionAuthentication gets a reference to the given map[string][]string and assigns it to the SubscriptionAuthentication field.
func (o *AuthPolicies) SetSubscriptionAuthentication(v map[string][]string) {
	o.SubscriptionAuthentication = &v
}

// GetNamespaceAuthentication returns the NamespaceAuthentication field value if set, zero value otherwise.
func (o *AuthPolicies) GetNamespaceAuthentication() map[string][]string {
	if o == nil || o.NamespaceAuthentication == nil {
		var ret map[string][]string
		return ret
	}
	return *o.NamespaceAuthentication
}

// GetNamespaceAuthenticationOk returns a tuple with the NamespaceAuthentication field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetNamespaceAuthenticationOk() (*map[string][]string, bool) {
	if o == nil || o.NamespaceAuthentication == nil {
		return nil, false
	}
	return o.NamespaceAuthentication, true
}

// HasNamespaceAuthentication returns a boolean if a field has been set.
func (o *AuthPolicies) HasNamespaceAuthentication() bool {
	if o != nil && o.NamespaceAuthentication != nil {
		return true
	}

	return false
}

// SetNamespaceAuthentication gets a reference to the given map[string][]string and assigns it to the NamespaceAuthentication field.
func (o *AuthPolicies) SetNamespaceAuthentication(v map[string][]string) {
	o.NamespaceAuthentication = &v
}

func (o AuthPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TopicAuthentication != nil {
		toSerialize["topicAuthentication"] = o.TopicAuthentication
	}
	if o.SubscriptionAuthentication != nil {
		toSerialize["subscriptionAuthentication"] = o.SubscriptionAuthentication
	}
	if o.NamespaceAuthentication != nil {
		toSerialize["namespaceAuthentication"] = o.NamespaceAuthentication
	}
	return json.Marshal(toSerialize)
}

type NullableAuthPolicies struct {
	value *AuthPolicies
	isSet bool
}

func (v NullableAuthPolicies) Get() *AuthPolicies {
	return v.value
}

func (v *NullableAuthPolicies) Set(val *AuthPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthPolicies(val *AuthPolicies) *NullableAuthPolicies {
	return &NullableAuthPolicies{value: val, isSet: true}
}

func (v NullableAuthPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


