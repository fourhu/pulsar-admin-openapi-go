/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// AuthPolicies struct for AuthPolicies
type AuthPolicies struct {
	DestinationAuth *map[string]map[string][]string `json:"destination_auth,omitempty"`
	NamespaceAuth *map[string][]string `json:"namespace_auth,omitempty"`
	SubscriptionAuthRoles *map[string][]string `json:"subscription_auth_roles,omitempty"`
}

// NewAuthPolicies instantiates a new AuthPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAuthPolicies() *AuthPolicies {
	this := AuthPolicies{}
	return &this
}

// NewAuthPoliciesWithDefaults instantiates a new AuthPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAuthPoliciesWithDefaults() *AuthPolicies {
	this := AuthPolicies{}
	return &this
}

// GetDestinationAuth returns the DestinationAuth field value if set, zero value otherwise.
func (o *AuthPolicies) GetDestinationAuth() map[string]map[string][]string {
	if o == nil || o.DestinationAuth == nil {
		var ret map[string]map[string][]string
		return ret
	}
	return *o.DestinationAuth
}

// GetDestinationAuthOk returns a tuple with the DestinationAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetDestinationAuthOk() (*map[string]map[string][]string, bool) {
	if o == nil || o.DestinationAuth == nil {
		return nil, false
	}
	return o.DestinationAuth, true
}

// HasDestinationAuth returns a boolean if a field has been set.
func (o *AuthPolicies) HasDestinationAuth() bool {
	if o != nil && o.DestinationAuth != nil {
		return true
	}

	return false
}

// SetDestinationAuth gets a reference to the given map[string]map[string][]string and assigns it to the DestinationAuth field.
func (o *AuthPolicies) SetDestinationAuth(v map[string]map[string][]string) {
	o.DestinationAuth = &v
}

// GetNamespaceAuth returns the NamespaceAuth field value if set, zero value otherwise.
func (o *AuthPolicies) GetNamespaceAuth() map[string][]string {
	if o == nil || o.NamespaceAuth == nil {
		var ret map[string][]string
		return ret
	}
	return *o.NamespaceAuth
}

// GetNamespaceAuthOk returns a tuple with the NamespaceAuth field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetNamespaceAuthOk() (*map[string][]string, bool) {
	if o == nil || o.NamespaceAuth == nil {
		return nil, false
	}
	return o.NamespaceAuth, true
}

// HasNamespaceAuth returns a boolean if a field has been set.
func (o *AuthPolicies) HasNamespaceAuth() bool {
	if o != nil && o.NamespaceAuth != nil {
		return true
	}

	return false
}

// SetNamespaceAuth gets a reference to the given map[string][]string and assigns it to the NamespaceAuth field.
func (o *AuthPolicies) SetNamespaceAuth(v map[string][]string) {
	o.NamespaceAuth = &v
}

// GetSubscriptionAuthRoles returns the SubscriptionAuthRoles field value if set, zero value otherwise.
func (o *AuthPolicies) GetSubscriptionAuthRoles() map[string][]string {
	if o == nil || o.SubscriptionAuthRoles == nil {
		var ret map[string][]string
		return ret
	}
	return *o.SubscriptionAuthRoles
}

// GetSubscriptionAuthRolesOk returns a tuple with the SubscriptionAuthRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AuthPolicies) GetSubscriptionAuthRolesOk() (*map[string][]string, bool) {
	if o == nil || o.SubscriptionAuthRoles == nil {
		return nil, false
	}
	return o.SubscriptionAuthRoles, true
}

// HasSubscriptionAuthRoles returns a boolean if a field has been set.
func (o *AuthPolicies) HasSubscriptionAuthRoles() bool {
	if o != nil && o.SubscriptionAuthRoles != nil {
		return true
	}

	return false
}

// SetSubscriptionAuthRoles gets a reference to the given map[string][]string and assigns it to the SubscriptionAuthRoles field.
func (o *AuthPolicies) SetSubscriptionAuthRoles(v map[string][]string) {
	o.SubscriptionAuthRoles = &v
}

func (o AuthPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DestinationAuth != nil {
		toSerialize["destination_auth"] = o.DestinationAuth
	}
	if o.NamespaceAuth != nil {
		toSerialize["namespace_auth"] = o.NamespaceAuth
	}
	if o.SubscriptionAuthRoles != nil {
		toSerialize["subscription_auth_roles"] = o.SubscriptionAuthRoles
	}
	return json.Marshal(toSerialize)
}

type NullableAuthPolicies struct {
	value *AuthPolicies
	isSet bool
}

func (v NullableAuthPolicies) Get() *AuthPolicies {
	return v.value
}

func (v *NullableAuthPolicies) Set(val *AuthPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableAuthPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableAuthPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAuthPolicies(val *AuthPolicies) *NullableAuthPolicies {
	return &NullableAuthPolicies{value: val, isSet: true}
}

func (v NullableAuthPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAuthPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


