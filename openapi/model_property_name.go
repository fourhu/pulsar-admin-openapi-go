/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PropertyName struct for PropertyName
type PropertyName struct {
	Namespace *string `json:"namespace,omitempty"`
	Empty *bool `json:"empty,omitempty"`
	SimpleName *string `json:"simpleName,omitempty"`
}

// NewPropertyName instantiates a new PropertyName object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPropertyName() *PropertyName {
	this := PropertyName{}
	return &this
}

// NewPropertyNameWithDefaults instantiates a new PropertyName object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPropertyNameWithDefaults() *PropertyName {
	this := PropertyName{}
	return &this
}

// GetNamespace returns the Namespace field value if set, zero value otherwise.
func (o *PropertyName) GetNamespace() string {
	if o == nil || o.Namespace == nil {
		var ret string
		return ret
	}
	return *o.Namespace
}

// GetNamespaceOk returns a tuple with the Namespace field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyName) GetNamespaceOk() (*string, bool) {
	if o == nil || o.Namespace == nil {
		return nil, false
	}
	return o.Namespace, true
}

// HasNamespace returns a boolean if a field has been set.
func (o *PropertyName) HasNamespace() bool {
	if o != nil && o.Namespace != nil {
		return true
	}

	return false
}

// SetNamespace gets a reference to the given string and assigns it to the Namespace field.
func (o *PropertyName) SetNamespace(v string) {
	o.Namespace = &v
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *PropertyName) GetEmpty() bool {
	if o == nil || o.Empty == nil {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyName) GetEmptyOk() (*bool, bool) {
	if o == nil || o.Empty == nil {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *PropertyName) HasEmpty() bool {
	if o != nil && o.Empty != nil {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *PropertyName) SetEmpty(v bool) {
	o.Empty = &v
}

// GetSimpleName returns the SimpleName field value if set, zero value otherwise.
func (o *PropertyName) GetSimpleName() string {
	if o == nil || o.SimpleName == nil {
		var ret string
		return ret
	}
	return *o.SimpleName
}

// GetSimpleNameOk returns a tuple with the SimpleName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PropertyName) GetSimpleNameOk() (*string, bool) {
	if o == nil || o.SimpleName == nil {
		return nil, false
	}
	return o.SimpleName, true
}

// HasSimpleName returns a boolean if a field has been set.
func (o *PropertyName) HasSimpleName() bool {
	if o != nil && o.SimpleName != nil {
		return true
	}

	return false
}

// SetSimpleName gets a reference to the given string and assigns it to the SimpleName field.
func (o *PropertyName) SetSimpleName(v string) {
	o.SimpleName = &v
}

func (o PropertyName) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Namespace != nil {
		toSerialize["namespace"] = o.Namespace
	}
	if o.Empty != nil {
		toSerialize["empty"] = o.Empty
	}
	if o.SimpleName != nil {
		toSerialize["simpleName"] = o.SimpleName
	}
	return json.Marshal(toSerialize)
}

type NullablePropertyName struct {
	value *PropertyName
	isSet bool
}

func (v NullablePropertyName) Get() *PropertyName {
	return v.value
}

func (v *NullablePropertyName) Set(val *PropertyName) {
	v.value = val
	v.isSet = true
}

func (v NullablePropertyName) IsSet() bool {
	return v.isSet
}

func (v *NullablePropertyName) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePropertyName(val *PropertyName) *NullablePropertyName {
	return &NullablePropertyName{value: val, isSet: true}
}

func (v NullablePropertyName) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePropertyName) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


