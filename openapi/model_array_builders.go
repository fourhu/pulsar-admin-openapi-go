/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ArrayBuilders struct for ArrayBuilders
type ArrayBuilders struct {
	BooleanBuilder *map[string]interface{} `json:"booleanBuilder,omitempty"`
	ByteBuilder *map[string]interface{} `json:"byteBuilder,omitempty"`
	ShortBuilder *map[string]interface{} `json:"shortBuilder,omitempty"`
	IntBuilder *map[string]interface{} `json:"intBuilder,omitempty"`
	LongBuilder *map[string]interface{} `json:"longBuilder,omitempty"`
	FloatBuilder *map[string]interface{} `json:"floatBuilder,omitempty"`
	DoubleBuilder *map[string]interface{} `json:"doubleBuilder,omitempty"`
}

// NewArrayBuilders instantiates a new ArrayBuilders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewArrayBuilders() *ArrayBuilders {
	this := ArrayBuilders{}
	return &this
}

// NewArrayBuildersWithDefaults instantiates a new ArrayBuilders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewArrayBuildersWithDefaults() *ArrayBuilders {
	this := ArrayBuilders{}
	return &this
}

// GetBooleanBuilder returns the BooleanBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetBooleanBuilder() map[string]interface{} {
	if o == nil || o.BooleanBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.BooleanBuilder
}

// GetBooleanBuilderOk returns a tuple with the BooleanBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetBooleanBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.BooleanBuilder == nil {
		return nil, false
	}
	return o.BooleanBuilder, true
}

// HasBooleanBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasBooleanBuilder() bool {
	if o != nil && o.BooleanBuilder != nil {
		return true
	}

	return false
}

// SetBooleanBuilder gets a reference to the given map[string]interface{} and assigns it to the BooleanBuilder field.
func (o *ArrayBuilders) SetBooleanBuilder(v map[string]interface{}) {
	o.BooleanBuilder = &v
}

// GetByteBuilder returns the ByteBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetByteBuilder() map[string]interface{} {
	if o == nil || o.ByteBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ByteBuilder
}

// GetByteBuilderOk returns a tuple with the ByteBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetByteBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.ByteBuilder == nil {
		return nil, false
	}
	return o.ByteBuilder, true
}

// HasByteBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasByteBuilder() bool {
	if o != nil && o.ByteBuilder != nil {
		return true
	}

	return false
}

// SetByteBuilder gets a reference to the given map[string]interface{} and assigns it to the ByteBuilder field.
func (o *ArrayBuilders) SetByteBuilder(v map[string]interface{}) {
	o.ByteBuilder = &v
}

// GetShortBuilder returns the ShortBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetShortBuilder() map[string]interface{} {
	if o == nil || o.ShortBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ShortBuilder
}

// GetShortBuilderOk returns a tuple with the ShortBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetShortBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.ShortBuilder == nil {
		return nil, false
	}
	return o.ShortBuilder, true
}

// HasShortBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasShortBuilder() bool {
	if o != nil && o.ShortBuilder != nil {
		return true
	}

	return false
}

// SetShortBuilder gets a reference to the given map[string]interface{} and assigns it to the ShortBuilder field.
func (o *ArrayBuilders) SetShortBuilder(v map[string]interface{}) {
	o.ShortBuilder = &v
}

// GetIntBuilder returns the IntBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetIntBuilder() map[string]interface{} {
	if o == nil || o.IntBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.IntBuilder
}

// GetIntBuilderOk returns a tuple with the IntBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetIntBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.IntBuilder == nil {
		return nil, false
	}
	return o.IntBuilder, true
}

// HasIntBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasIntBuilder() bool {
	if o != nil && o.IntBuilder != nil {
		return true
	}

	return false
}

// SetIntBuilder gets a reference to the given map[string]interface{} and assigns it to the IntBuilder field.
func (o *ArrayBuilders) SetIntBuilder(v map[string]interface{}) {
	o.IntBuilder = &v
}

// GetLongBuilder returns the LongBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetLongBuilder() map[string]interface{} {
	if o == nil || o.LongBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.LongBuilder
}

// GetLongBuilderOk returns a tuple with the LongBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetLongBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.LongBuilder == nil {
		return nil, false
	}
	return o.LongBuilder, true
}

// HasLongBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasLongBuilder() bool {
	if o != nil && o.LongBuilder != nil {
		return true
	}

	return false
}

// SetLongBuilder gets a reference to the given map[string]interface{} and assigns it to the LongBuilder field.
func (o *ArrayBuilders) SetLongBuilder(v map[string]interface{}) {
	o.LongBuilder = &v
}

// GetFloatBuilder returns the FloatBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetFloatBuilder() map[string]interface{} {
	if o == nil || o.FloatBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FloatBuilder
}

// GetFloatBuilderOk returns a tuple with the FloatBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetFloatBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.FloatBuilder == nil {
		return nil, false
	}
	return o.FloatBuilder, true
}

// HasFloatBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasFloatBuilder() bool {
	if o != nil && o.FloatBuilder != nil {
		return true
	}

	return false
}

// SetFloatBuilder gets a reference to the given map[string]interface{} and assigns it to the FloatBuilder field.
func (o *ArrayBuilders) SetFloatBuilder(v map[string]interface{}) {
	o.FloatBuilder = &v
}

// GetDoubleBuilder returns the DoubleBuilder field value if set, zero value otherwise.
func (o *ArrayBuilders) GetDoubleBuilder() map[string]interface{} {
	if o == nil || o.DoubleBuilder == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DoubleBuilder
}

// GetDoubleBuilderOk returns a tuple with the DoubleBuilder field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ArrayBuilders) GetDoubleBuilderOk() (*map[string]interface{}, bool) {
	if o == nil || o.DoubleBuilder == nil {
		return nil, false
	}
	return o.DoubleBuilder, true
}

// HasDoubleBuilder returns a boolean if a field has been set.
func (o *ArrayBuilders) HasDoubleBuilder() bool {
	if o != nil && o.DoubleBuilder != nil {
		return true
	}

	return false
}

// SetDoubleBuilder gets a reference to the given map[string]interface{} and assigns it to the DoubleBuilder field.
func (o *ArrayBuilders) SetDoubleBuilder(v map[string]interface{}) {
	o.DoubleBuilder = &v
}

func (o ArrayBuilders) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.BooleanBuilder != nil {
		toSerialize["booleanBuilder"] = o.BooleanBuilder
	}
	if o.ByteBuilder != nil {
		toSerialize["byteBuilder"] = o.ByteBuilder
	}
	if o.ShortBuilder != nil {
		toSerialize["shortBuilder"] = o.ShortBuilder
	}
	if o.IntBuilder != nil {
		toSerialize["intBuilder"] = o.IntBuilder
	}
	if o.LongBuilder != nil {
		toSerialize["longBuilder"] = o.LongBuilder
	}
	if o.FloatBuilder != nil {
		toSerialize["floatBuilder"] = o.FloatBuilder
	}
	if o.DoubleBuilder != nil {
		toSerialize["doubleBuilder"] = o.DoubleBuilder
	}
	return json.Marshal(toSerialize)
}

type NullableArrayBuilders struct {
	value *ArrayBuilders
	isSet bool
}

func (v NullableArrayBuilders) Get() *ArrayBuilders {
	return v.value
}

func (v *NullableArrayBuilders) Set(val *ArrayBuilders) {
	v.value = val
	v.isSet = true
}

func (v NullableArrayBuilders) IsSet() bool {
	return v.isSet
}

func (v *NullableArrayBuilders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableArrayBuilders(val *ArrayBuilders) *NullableArrayBuilders {
	return &NullableArrayBuilders{value: val, isSet: true}
}

func (v NullableArrayBuilders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableArrayBuilders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


