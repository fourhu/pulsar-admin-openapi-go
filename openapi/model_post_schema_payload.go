/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PostSchemaPayload struct for PostSchemaPayload
type PostSchemaPayload struct {
	Type *string `json:"type,omitempty"`
	Schema *string `json:"schema,omitempty"`
	Properties *map[string]string `json:"properties,omitempty"`
}

// NewPostSchemaPayload instantiates a new PostSchemaPayload object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSchemaPayload() *PostSchemaPayload {
	this := PostSchemaPayload{}
	return &this
}

// NewPostSchemaPayloadWithDefaults instantiates a new PostSchemaPayload object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSchemaPayloadWithDefaults() *PostSchemaPayload {
	this := PostSchemaPayload{}
	return &this
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PostSchemaPayload) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSchemaPayload) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PostSchemaPayload) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PostSchemaPayload) SetType(v string) {
	o.Type = &v
}

// GetSchema returns the Schema field value if set, zero value otherwise.
func (o *PostSchemaPayload) GetSchema() string {
	if o == nil || o.Schema == nil {
		var ret string
		return ret
	}
	return *o.Schema
}

// GetSchemaOk returns a tuple with the Schema field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSchemaPayload) GetSchemaOk() (*string, bool) {
	if o == nil || o.Schema == nil {
		return nil, false
	}
	return o.Schema, true
}

// HasSchema returns a boolean if a field has been set.
func (o *PostSchemaPayload) HasSchema() bool {
	if o != nil && o.Schema != nil {
		return true
	}

	return false
}

// SetSchema gets a reference to the given string and assigns it to the Schema field.
func (o *PostSchemaPayload) SetSchema(v string) {
	o.Schema = &v
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *PostSchemaPayload) GetProperties() map[string]string {
	if o == nil || o.Properties == nil {
		var ret map[string]string
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSchemaPayload) GetPropertiesOk() (*map[string]string, bool) {
	if o == nil || o.Properties == nil {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *PostSchemaPayload) HasProperties() bool {
	if o != nil && o.Properties != nil {
		return true
	}

	return false
}

// SetProperties gets a reference to the given map[string]string and assigns it to the Properties field.
func (o *PostSchemaPayload) SetProperties(v map[string]string) {
	o.Properties = &v
}

func (o PostSchemaPayload) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	if o.Schema != nil {
		toSerialize["schema"] = o.Schema
	}
	if o.Properties != nil {
		toSerialize["properties"] = o.Properties
	}
	return json.Marshal(toSerialize)
}

type NullablePostSchemaPayload struct {
	value *PostSchemaPayload
	isSet bool
}

func (v NullablePostSchemaPayload) Get() *PostSchemaPayload {
	return v.value
}

func (v *NullablePostSchemaPayload) Set(val *PostSchemaPayload) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSchemaPayload) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSchemaPayload) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSchemaPayload(val *PostSchemaPayload) *NullablePostSchemaPayload {
	return &NullablePostSchemaPayload{value: val, isSet: true}
}

func (v NullablePostSchemaPayload) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSchemaPayload) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


