/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PublishRate struct for PublishRate
type PublishRate struct {
	PublishThrottlingRateInByte *int64 `json:"publishThrottlingRateInByte,omitempty"`
	PublishThrottlingRateInMsg *int32 `json:"publishThrottlingRateInMsg,omitempty"`
}

// NewPublishRate instantiates a new PublishRate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPublishRate() *PublishRate {
	this := PublishRate{}
	return &this
}

// NewPublishRateWithDefaults instantiates a new PublishRate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPublishRateWithDefaults() *PublishRate {
	this := PublishRate{}
	return &this
}

// GetPublishThrottlingRateInByte returns the PublishThrottlingRateInByte field value if set, zero value otherwise.
func (o *PublishRate) GetPublishThrottlingRateInByte() int64 {
	if o == nil || o.PublishThrottlingRateInByte == nil {
		var ret int64
		return ret
	}
	return *o.PublishThrottlingRateInByte
}

// GetPublishThrottlingRateInByteOk returns a tuple with the PublishThrottlingRateInByte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRate) GetPublishThrottlingRateInByteOk() (*int64, bool) {
	if o == nil || o.PublishThrottlingRateInByte == nil {
		return nil, false
	}
	return o.PublishThrottlingRateInByte, true
}

// HasPublishThrottlingRateInByte returns a boolean if a field has been set.
func (o *PublishRate) HasPublishThrottlingRateInByte() bool {
	if o != nil && o.PublishThrottlingRateInByte != nil {
		return true
	}

	return false
}

// SetPublishThrottlingRateInByte gets a reference to the given int64 and assigns it to the PublishThrottlingRateInByte field.
func (o *PublishRate) SetPublishThrottlingRateInByte(v int64) {
	o.PublishThrottlingRateInByte = &v
}

// GetPublishThrottlingRateInMsg returns the PublishThrottlingRateInMsg field value if set, zero value otherwise.
func (o *PublishRate) GetPublishThrottlingRateInMsg() int32 {
	if o == nil || o.PublishThrottlingRateInMsg == nil {
		var ret int32
		return ret
	}
	return *o.PublishThrottlingRateInMsg
}

// GetPublishThrottlingRateInMsgOk returns a tuple with the PublishThrottlingRateInMsg field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PublishRate) GetPublishThrottlingRateInMsgOk() (*int32, bool) {
	if o == nil || o.PublishThrottlingRateInMsg == nil {
		return nil, false
	}
	return o.PublishThrottlingRateInMsg, true
}

// HasPublishThrottlingRateInMsg returns a boolean if a field has been set.
func (o *PublishRate) HasPublishThrottlingRateInMsg() bool {
	if o != nil && o.PublishThrottlingRateInMsg != nil {
		return true
	}

	return false
}

// SetPublishThrottlingRateInMsg gets a reference to the given int32 and assigns it to the PublishThrottlingRateInMsg field.
func (o *PublishRate) SetPublishThrottlingRateInMsg(v int32) {
	o.PublishThrottlingRateInMsg = &v
}

func (o PublishRate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.PublishThrottlingRateInByte != nil {
		toSerialize["publishThrottlingRateInByte"] = o.PublishThrottlingRateInByte
	}
	if o.PublishThrottlingRateInMsg != nil {
		toSerialize["publishThrottlingRateInMsg"] = o.PublishThrottlingRateInMsg
	}
	return json.Marshal(toSerialize)
}

type NullablePublishRate struct {
	value *PublishRate
	isSet bool
}

func (v NullablePublishRate) Get() *PublishRate {
	return v.value
}

func (v *NullablePublishRate) Set(val *PublishRate) {
	v.value = val
	v.isSet = true
}

func (v NullablePublishRate) IsSet() bool {
	return v.isSet
}

func (v *NullablePublishRate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePublishRate(val *PublishRate) *NullablePublishRate {
	return &NullablePublishRate{value: val, isSet: true}
}

func (v NullablePublishRate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePublishRate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


