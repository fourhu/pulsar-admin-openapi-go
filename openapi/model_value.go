/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// Value struct for Value
type Value struct {
	ContentInclusion *string `json:"contentInclusion,omitempty"`
	ValueInclusion *string `json:"valueInclusion,omitempty"`
}

// NewValue instantiates a new Value object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewValue() *Value {
	this := Value{}
	return &this
}

// NewValueWithDefaults instantiates a new Value object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewValueWithDefaults() *Value {
	this := Value{}
	return &this
}

// GetContentInclusion returns the ContentInclusion field value if set, zero value otherwise.
func (o *Value) GetContentInclusion() string {
	if o == nil || o.ContentInclusion == nil {
		var ret string
		return ret
	}
	return *o.ContentInclusion
}

// GetContentInclusionOk returns a tuple with the ContentInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Value) GetContentInclusionOk() (*string, bool) {
	if o == nil || o.ContentInclusion == nil {
		return nil, false
	}
	return o.ContentInclusion, true
}

// HasContentInclusion returns a boolean if a field has been set.
func (o *Value) HasContentInclusion() bool {
	if o != nil && o.ContentInclusion != nil {
		return true
	}

	return false
}

// SetContentInclusion gets a reference to the given string and assigns it to the ContentInclusion field.
func (o *Value) SetContentInclusion(v string) {
	o.ContentInclusion = &v
}

// GetValueInclusion returns the ValueInclusion field value if set, zero value otherwise.
func (o *Value) GetValueInclusion() string {
	if o == nil || o.ValueInclusion == nil {
		var ret string
		return ret
	}
	return *o.ValueInclusion
}

// GetValueInclusionOk returns a tuple with the ValueInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Value) GetValueInclusionOk() (*string, bool) {
	if o == nil || o.ValueInclusion == nil {
		return nil, false
	}
	return o.ValueInclusion, true
}

// HasValueInclusion returns a boolean if a field has been set.
func (o *Value) HasValueInclusion() bool {
	if o != nil && o.ValueInclusion != nil {
		return true
	}

	return false
}

// SetValueInclusion gets a reference to the given string and assigns it to the ValueInclusion field.
func (o *Value) SetValueInclusion(v string) {
	o.ValueInclusion = &v
}

func (o Value) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContentInclusion != nil {
		toSerialize["contentInclusion"] = o.ContentInclusion
	}
	if o.ValueInclusion != nil {
		toSerialize["valueInclusion"] = o.ValueInclusion
	}
	return json.Marshal(toSerialize)
}

type NullableValue struct {
	value *Value
	isSet bool
}

func (v NullableValue) Get() *Value {
	return v.value
}

func (v *NullableValue) Set(val *Value) {
	v.value = val
	v.isSet = true
}

func (v NullableValue) IsSet() bool {
	return v.isSet
}

func (v *NullableValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableValue(val *Value) *NullableValue {
	return &NullableValue{value: val, isSet: true}
}

func (v NullableValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


