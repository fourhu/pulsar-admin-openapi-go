/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// X500Principal struct for X500Principal
type X500Principal struct {
	Name *string `json:"name,omitempty"`
	Encoded *[]string `json:"encoded,omitempty"`
}

// NewX500Principal instantiates a new X500Principal object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewX500Principal() *X500Principal {
	this := X500Principal{}
	return &this
}

// NewX500PrincipalWithDefaults instantiates a new X500Principal object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewX500PrincipalWithDefaults() *X500Principal {
	this := X500Principal{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *X500Principal) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X500Principal) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *X500Principal) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *X500Principal) SetName(v string) {
	o.Name = &v
}

// GetEncoded returns the Encoded field value if set, zero value otherwise.
func (o *X500Principal) GetEncoded() []string {
	if o == nil || o.Encoded == nil {
		var ret []string
		return ret
	}
	return *o.Encoded
}

// GetEncodedOk returns a tuple with the Encoded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *X500Principal) GetEncodedOk() (*[]string, bool) {
	if o == nil || o.Encoded == nil {
		return nil, false
	}
	return o.Encoded, true
}

// HasEncoded returns a boolean if a field has been set.
func (o *X500Principal) HasEncoded() bool {
	if o != nil && o.Encoded != nil {
		return true
	}

	return false
}

// SetEncoded gets a reference to the given []string and assigns it to the Encoded field.
func (o *X500Principal) SetEncoded(v []string) {
	o.Encoded = &v
}

func (o X500Principal) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Encoded != nil {
		toSerialize["encoded"] = o.Encoded
	}
	return json.Marshal(toSerialize)
}

type NullableX500Principal struct {
	value *X500Principal
	isSet bool
}

func (v NullableX500Principal) Get() *X500Principal {
	return v.value
}

func (v *NullableX500Principal) Set(val *X500Principal) {
	v.value = val
	v.isSet = true
}

func (v NullableX500Principal) IsSet() bool {
	return v.isSet
}

func (v *NullableX500Principal) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableX500Principal(val *X500Principal) *NullableX500Principal {
	return &NullableX500Principal{value: val, isSet: true}
}

func (v NullableX500Principal) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableX500Principal) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


