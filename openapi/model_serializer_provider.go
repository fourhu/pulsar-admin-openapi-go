/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SerializerProvider struct for SerializerProvider
type SerializerProvider struct {
	FilterProvider *map[string]interface{} `json:"filterProvider,omitempty"`
	DefaultNullKeySerializer *JsonSerializerObject `json:"defaultNullKeySerializer,omitempty"`
	DefaultNullValueSerializer *JsonSerializerObject `json:"defaultNullValueSerializer,omitempty"`
	TypeFactory *TypeFactory `json:"typeFactory,omitempty"`
	AnnotationIntrospector *map[string]interface{} `json:"annotationIntrospector,omitempty"`
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	Locale *Locale `json:"locale,omitempty"`
	Config *SerializationConfig `json:"config,omitempty"`
	Generator *JsonGenerator `json:"generator,omitempty"`
}

// NewSerializerProvider instantiates a new SerializerProvider object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSerializerProvider() *SerializerProvider {
	this := SerializerProvider{}
	return &this
}

// NewSerializerProviderWithDefaults instantiates a new SerializerProvider object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSerializerProviderWithDefaults() *SerializerProvider {
	this := SerializerProvider{}
	return &this
}

// GetFilterProvider returns the FilterProvider field value if set, zero value otherwise.
func (o *SerializerProvider) GetFilterProvider() map[string]interface{} {
	if o == nil || o.FilterProvider == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FilterProvider
}

// GetFilterProviderOk returns a tuple with the FilterProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetFilterProviderOk() (*map[string]interface{}, bool) {
	if o == nil || o.FilterProvider == nil {
		return nil, false
	}
	return o.FilterProvider, true
}

// HasFilterProvider returns a boolean if a field has been set.
func (o *SerializerProvider) HasFilterProvider() bool {
	if o != nil && o.FilterProvider != nil {
		return true
	}

	return false
}

// SetFilterProvider gets a reference to the given map[string]interface{} and assigns it to the FilterProvider field.
func (o *SerializerProvider) SetFilterProvider(v map[string]interface{}) {
	o.FilterProvider = &v
}

// GetDefaultNullKeySerializer returns the DefaultNullKeySerializer field value if set, zero value otherwise.
func (o *SerializerProvider) GetDefaultNullKeySerializer() JsonSerializerObject {
	if o == nil || o.DefaultNullKeySerializer == nil {
		var ret JsonSerializerObject
		return ret
	}
	return *o.DefaultNullKeySerializer
}

// GetDefaultNullKeySerializerOk returns a tuple with the DefaultNullKeySerializer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetDefaultNullKeySerializerOk() (*JsonSerializerObject, bool) {
	if o == nil || o.DefaultNullKeySerializer == nil {
		return nil, false
	}
	return o.DefaultNullKeySerializer, true
}

// HasDefaultNullKeySerializer returns a boolean if a field has been set.
func (o *SerializerProvider) HasDefaultNullKeySerializer() bool {
	if o != nil && o.DefaultNullKeySerializer != nil {
		return true
	}

	return false
}

// SetDefaultNullKeySerializer gets a reference to the given JsonSerializerObject and assigns it to the DefaultNullKeySerializer field.
func (o *SerializerProvider) SetDefaultNullKeySerializer(v JsonSerializerObject) {
	o.DefaultNullKeySerializer = &v
}

// GetDefaultNullValueSerializer returns the DefaultNullValueSerializer field value if set, zero value otherwise.
func (o *SerializerProvider) GetDefaultNullValueSerializer() JsonSerializerObject {
	if o == nil || o.DefaultNullValueSerializer == nil {
		var ret JsonSerializerObject
		return ret
	}
	return *o.DefaultNullValueSerializer
}

// GetDefaultNullValueSerializerOk returns a tuple with the DefaultNullValueSerializer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetDefaultNullValueSerializerOk() (*JsonSerializerObject, bool) {
	if o == nil || o.DefaultNullValueSerializer == nil {
		return nil, false
	}
	return o.DefaultNullValueSerializer, true
}

// HasDefaultNullValueSerializer returns a boolean if a field has been set.
func (o *SerializerProvider) HasDefaultNullValueSerializer() bool {
	if o != nil && o.DefaultNullValueSerializer != nil {
		return true
	}

	return false
}

// SetDefaultNullValueSerializer gets a reference to the given JsonSerializerObject and assigns it to the DefaultNullValueSerializer field.
func (o *SerializerProvider) SetDefaultNullValueSerializer(v JsonSerializerObject) {
	o.DefaultNullValueSerializer = &v
}

// GetTypeFactory returns the TypeFactory field value if set, zero value otherwise.
func (o *SerializerProvider) GetTypeFactory() TypeFactory {
	if o == nil || o.TypeFactory == nil {
		var ret TypeFactory
		return ret
	}
	return *o.TypeFactory
}

// GetTypeFactoryOk returns a tuple with the TypeFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetTypeFactoryOk() (*TypeFactory, bool) {
	if o == nil || o.TypeFactory == nil {
		return nil, false
	}
	return o.TypeFactory, true
}

// HasTypeFactory returns a boolean if a field has been set.
func (o *SerializerProvider) HasTypeFactory() bool {
	if o != nil && o.TypeFactory != nil {
		return true
	}

	return false
}

// SetTypeFactory gets a reference to the given TypeFactory and assigns it to the TypeFactory field.
func (o *SerializerProvider) SetTypeFactory(v TypeFactory) {
	o.TypeFactory = &v
}

// GetAnnotationIntrospector returns the AnnotationIntrospector field value if set, zero value otherwise.
func (o *SerializerProvider) GetAnnotationIntrospector() map[string]interface{} {
	if o == nil || o.AnnotationIntrospector == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AnnotationIntrospector
}

// GetAnnotationIntrospectorOk returns a tuple with the AnnotationIntrospector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetAnnotationIntrospectorOk() (*map[string]interface{}, bool) {
	if o == nil || o.AnnotationIntrospector == nil {
		return nil, false
	}
	return o.AnnotationIntrospector, true
}

// HasAnnotationIntrospector returns a boolean if a field has been set.
func (o *SerializerProvider) HasAnnotationIntrospector() bool {
	if o != nil && o.AnnotationIntrospector != nil {
		return true
	}

	return false
}

// SetAnnotationIntrospector gets a reference to the given map[string]interface{} and assigns it to the AnnotationIntrospector field.
func (o *SerializerProvider) SetAnnotationIntrospector(v map[string]interface{}) {
	o.AnnotationIntrospector = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SerializerProvider) GetTimeZone() TimeZone {
	if o == nil || o.TimeZone == nil {
		var ret TimeZone
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetTimeZoneOk() (*TimeZone, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SerializerProvider) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given TimeZone and assigns it to the TimeZone field.
func (o *SerializerProvider) SetTimeZone(v TimeZone) {
	o.TimeZone = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *SerializerProvider) GetLocale() Locale {
	if o == nil || o.Locale == nil {
		var ret Locale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetLocaleOk() (*Locale, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *SerializerProvider) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given Locale and assigns it to the Locale field.
func (o *SerializerProvider) SetLocale(v Locale) {
	o.Locale = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *SerializerProvider) GetConfig() SerializationConfig {
	if o == nil || o.Config == nil {
		var ret SerializationConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetConfigOk() (*SerializationConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *SerializerProvider) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given SerializationConfig and assigns it to the Config field.
func (o *SerializerProvider) SetConfig(v SerializationConfig) {
	o.Config = &v
}

// GetGenerator returns the Generator field value if set, zero value otherwise.
func (o *SerializerProvider) GetGenerator() JsonGenerator {
	if o == nil || o.Generator == nil {
		var ret JsonGenerator
		return ret
	}
	return *o.Generator
}

// GetGeneratorOk returns a tuple with the Generator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializerProvider) GetGeneratorOk() (*JsonGenerator, bool) {
	if o == nil || o.Generator == nil {
		return nil, false
	}
	return o.Generator, true
}

// HasGenerator returns a boolean if a field has been set.
func (o *SerializerProvider) HasGenerator() bool {
	if o != nil && o.Generator != nil {
		return true
	}

	return false
}

// SetGenerator gets a reference to the given JsonGenerator and assigns it to the Generator field.
func (o *SerializerProvider) SetGenerator(v JsonGenerator) {
	o.Generator = &v
}

func (o SerializerProvider) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.FilterProvider != nil {
		toSerialize["filterProvider"] = o.FilterProvider
	}
	if o.DefaultNullKeySerializer != nil {
		toSerialize["defaultNullKeySerializer"] = o.DefaultNullKeySerializer
	}
	if o.DefaultNullValueSerializer != nil {
		toSerialize["defaultNullValueSerializer"] = o.DefaultNullValueSerializer
	}
	if o.TypeFactory != nil {
		toSerialize["typeFactory"] = o.TypeFactory
	}
	if o.AnnotationIntrospector != nil {
		toSerialize["annotationIntrospector"] = o.AnnotationIntrospector
	}
	if o.TimeZone != nil {
		toSerialize["timeZone"] = o.TimeZone
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Generator != nil {
		toSerialize["generator"] = o.Generator
	}
	return json.Marshal(toSerialize)
}

type NullableSerializerProvider struct {
	value *SerializerProvider
	isSet bool
}

func (v NullableSerializerProvider) Get() *SerializerProvider {
	return v.value
}

func (v *NullableSerializerProvider) Set(val *SerializerProvider) {
	v.value = val
	v.isSet = true
}

func (v NullableSerializerProvider) IsSet() bool {
	return v.isSet
}

func (v *NullableSerializerProvider) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSerializerProvider(val *SerializerProvider) *NullableSerializerProvider {
	return &NullableSerializerProvider{value: val, isSet: true}
}

func (v NullableSerializerProvider) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSerializerProvider) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


