/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// RetentionPolicies struct for RetentionPolicies
type RetentionPolicies struct {
	RetentionSizeInMB *int64 `json:"retentionSizeInMB,omitempty"`
	RetentionTimeInMinutes *int32 `json:"retentionTimeInMinutes,omitempty"`
}

// NewRetentionPolicies instantiates a new RetentionPolicies object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRetentionPolicies() *RetentionPolicies {
	this := RetentionPolicies{}
	return &this
}

// NewRetentionPoliciesWithDefaults instantiates a new RetentionPolicies object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRetentionPoliciesWithDefaults() *RetentionPolicies {
	this := RetentionPolicies{}
	return &this
}

// GetRetentionSizeInMB returns the RetentionSizeInMB field value if set, zero value otherwise.
func (o *RetentionPolicies) GetRetentionSizeInMB() int64 {
	if o == nil || o.RetentionSizeInMB == nil {
		var ret int64
		return ret
	}
	return *o.RetentionSizeInMB
}

// GetRetentionSizeInMBOk returns a tuple with the RetentionSizeInMB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetentionPolicies) GetRetentionSizeInMBOk() (*int64, bool) {
	if o == nil || o.RetentionSizeInMB == nil {
		return nil, false
	}
	return o.RetentionSizeInMB, true
}

// HasRetentionSizeInMB returns a boolean if a field has been set.
func (o *RetentionPolicies) HasRetentionSizeInMB() bool {
	if o != nil && o.RetentionSizeInMB != nil {
		return true
	}

	return false
}

// SetRetentionSizeInMB gets a reference to the given int64 and assigns it to the RetentionSizeInMB field.
func (o *RetentionPolicies) SetRetentionSizeInMB(v int64) {
	o.RetentionSizeInMB = &v
}

// GetRetentionTimeInMinutes returns the RetentionTimeInMinutes field value if set, zero value otherwise.
func (o *RetentionPolicies) GetRetentionTimeInMinutes() int32 {
	if o == nil || o.RetentionTimeInMinutes == nil {
		var ret int32
		return ret
	}
	return *o.RetentionTimeInMinutes
}

// GetRetentionTimeInMinutesOk returns a tuple with the RetentionTimeInMinutes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RetentionPolicies) GetRetentionTimeInMinutesOk() (*int32, bool) {
	if o == nil || o.RetentionTimeInMinutes == nil {
		return nil, false
	}
	return o.RetentionTimeInMinutes, true
}

// HasRetentionTimeInMinutes returns a boolean if a field has been set.
func (o *RetentionPolicies) HasRetentionTimeInMinutes() bool {
	if o != nil && o.RetentionTimeInMinutes != nil {
		return true
	}

	return false
}

// SetRetentionTimeInMinutes gets a reference to the given int32 and assigns it to the RetentionTimeInMinutes field.
func (o *RetentionPolicies) SetRetentionTimeInMinutes(v int32) {
	o.RetentionTimeInMinutes = &v
}

func (o RetentionPolicies) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.RetentionSizeInMB != nil {
		toSerialize["retentionSizeInMB"] = o.RetentionSizeInMB
	}
	if o.RetentionTimeInMinutes != nil {
		toSerialize["retentionTimeInMinutes"] = o.RetentionTimeInMinutes
	}
	return json.Marshal(toSerialize)
}

type NullableRetentionPolicies struct {
	value *RetentionPolicies
	isSet bool
}

func (v NullableRetentionPolicies) Get() *RetentionPolicies {
	return v.value
}

func (v *NullableRetentionPolicies) Set(val *RetentionPolicies) {
	v.value = val
	v.isSet = true
}

func (v NullableRetentionPolicies) IsSet() bool {
	return v.isSet
}

func (v *NullableRetentionPolicies) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRetentionPolicies(val *RetentionPolicies) *NullableRetentionPolicies {
	return &NullableRetentionPolicies{value: val, isSet: true}
}

func (v NullableRetentionPolicies) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRetentionPolicies) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


