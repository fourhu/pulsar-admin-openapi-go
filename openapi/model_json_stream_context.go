/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// JsonStreamContext struct for JsonStreamContext
type JsonStreamContext struct {
	CurrentValue *map[string]interface{} `json:"currentValue,omitempty"`
	CurrentName *string `json:"currentName,omitempty"`
	TypeDesc *string `json:"typeDesc,omitempty"`
	EntryCount *int32 `json:"entryCount,omitempty"`
	Parent *JsonStreamContext `json:"parent,omitempty"`
	CurrentIndex *int32 `json:"currentIndex,omitempty"`
}

// NewJsonStreamContext instantiates a new JsonStreamContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewJsonStreamContext() *JsonStreamContext {
	this := JsonStreamContext{}
	return &this
}

// NewJsonStreamContextWithDefaults instantiates a new JsonStreamContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewJsonStreamContextWithDefaults() *JsonStreamContext {
	this := JsonStreamContext{}
	return &this
}

// GetCurrentValue returns the CurrentValue field value if set, zero value otherwise.
func (o *JsonStreamContext) GetCurrentValue() map[string]interface{} {
	if o == nil || o.CurrentValue == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.CurrentValue
}

// GetCurrentValueOk returns a tuple with the CurrentValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetCurrentValueOk() (*map[string]interface{}, bool) {
	if o == nil || o.CurrentValue == nil {
		return nil, false
	}
	return o.CurrentValue, true
}

// HasCurrentValue returns a boolean if a field has been set.
func (o *JsonStreamContext) HasCurrentValue() bool {
	if o != nil && o.CurrentValue != nil {
		return true
	}

	return false
}

// SetCurrentValue gets a reference to the given map[string]interface{} and assigns it to the CurrentValue field.
func (o *JsonStreamContext) SetCurrentValue(v map[string]interface{}) {
	o.CurrentValue = &v
}

// GetCurrentName returns the CurrentName field value if set, zero value otherwise.
func (o *JsonStreamContext) GetCurrentName() string {
	if o == nil || o.CurrentName == nil {
		var ret string
		return ret
	}
	return *o.CurrentName
}

// GetCurrentNameOk returns a tuple with the CurrentName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetCurrentNameOk() (*string, bool) {
	if o == nil || o.CurrentName == nil {
		return nil, false
	}
	return o.CurrentName, true
}

// HasCurrentName returns a boolean if a field has been set.
func (o *JsonStreamContext) HasCurrentName() bool {
	if o != nil && o.CurrentName != nil {
		return true
	}

	return false
}

// SetCurrentName gets a reference to the given string and assigns it to the CurrentName field.
func (o *JsonStreamContext) SetCurrentName(v string) {
	o.CurrentName = &v
}

// GetTypeDesc returns the TypeDesc field value if set, zero value otherwise.
func (o *JsonStreamContext) GetTypeDesc() string {
	if o == nil || o.TypeDesc == nil {
		var ret string
		return ret
	}
	return *o.TypeDesc
}

// GetTypeDescOk returns a tuple with the TypeDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetTypeDescOk() (*string, bool) {
	if o == nil || o.TypeDesc == nil {
		return nil, false
	}
	return o.TypeDesc, true
}

// HasTypeDesc returns a boolean if a field has been set.
func (o *JsonStreamContext) HasTypeDesc() bool {
	if o != nil && o.TypeDesc != nil {
		return true
	}

	return false
}

// SetTypeDesc gets a reference to the given string and assigns it to the TypeDesc field.
func (o *JsonStreamContext) SetTypeDesc(v string) {
	o.TypeDesc = &v
}

// GetEntryCount returns the EntryCount field value if set, zero value otherwise.
func (o *JsonStreamContext) GetEntryCount() int32 {
	if o == nil || o.EntryCount == nil {
		var ret int32
		return ret
	}
	return *o.EntryCount
}

// GetEntryCountOk returns a tuple with the EntryCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetEntryCountOk() (*int32, bool) {
	if o == nil || o.EntryCount == nil {
		return nil, false
	}
	return o.EntryCount, true
}

// HasEntryCount returns a boolean if a field has been set.
func (o *JsonStreamContext) HasEntryCount() bool {
	if o != nil && o.EntryCount != nil {
		return true
	}

	return false
}

// SetEntryCount gets a reference to the given int32 and assigns it to the EntryCount field.
func (o *JsonStreamContext) SetEntryCount(v int32) {
	o.EntryCount = &v
}

// GetParent returns the Parent field value if set, zero value otherwise.
func (o *JsonStreamContext) GetParent() JsonStreamContext {
	if o == nil || o.Parent == nil {
		var ret JsonStreamContext
		return ret
	}
	return *o.Parent
}

// GetParentOk returns a tuple with the Parent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetParentOk() (*JsonStreamContext, bool) {
	if o == nil || o.Parent == nil {
		return nil, false
	}
	return o.Parent, true
}

// HasParent returns a boolean if a field has been set.
func (o *JsonStreamContext) HasParent() bool {
	if o != nil && o.Parent != nil {
		return true
	}

	return false
}

// SetParent gets a reference to the given JsonStreamContext and assigns it to the Parent field.
func (o *JsonStreamContext) SetParent(v JsonStreamContext) {
	o.Parent = &v
}

// GetCurrentIndex returns the CurrentIndex field value if set, zero value otherwise.
func (o *JsonStreamContext) GetCurrentIndex() int32 {
	if o == nil || o.CurrentIndex == nil {
		var ret int32
		return ret
	}
	return *o.CurrentIndex
}

// GetCurrentIndexOk returns a tuple with the CurrentIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *JsonStreamContext) GetCurrentIndexOk() (*int32, bool) {
	if o == nil || o.CurrentIndex == nil {
		return nil, false
	}
	return o.CurrentIndex, true
}

// HasCurrentIndex returns a boolean if a field has been set.
func (o *JsonStreamContext) HasCurrentIndex() bool {
	if o != nil && o.CurrentIndex != nil {
		return true
	}

	return false
}

// SetCurrentIndex gets a reference to the given int32 and assigns it to the CurrentIndex field.
func (o *JsonStreamContext) SetCurrentIndex(v int32) {
	o.CurrentIndex = &v
}

func (o JsonStreamContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CurrentValue != nil {
		toSerialize["currentValue"] = o.CurrentValue
	}
	if o.CurrentName != nil {
		toSerialize["currentName"] = o.CurrentName
	}
	if o.TypeDesc != nil {
		toSerialize["typeDesc"] = o.TypeDesc
	}
	if o.EntryCount != nil {
		toSerialize["entryCount"] = o.EntryCount
	}
	if o.Parent != nil {
		toSerialize["parent"] = o.Parent
	}
	if o.CurrentIndex != nil {
		toSerialize["currentIndex"] = o.CurrentIndex
	}
	return json.Marshal(toSerialize)
}

type NullableJsonStreamContext struct {
	value *JsonStreamContext
	isSet bool
}

func (v NullableJsonStreamContext) Get() *JsonStreamContext {
	return v.value
}

func (v *NullableJsonStreamContext) Set(val *JsonStreamContext) {
	v.value = val
	v.isSet = true
}

func (v NullableJsonStreamContext) IsSet() bool {
	return v.isSet
}

func (v *NullableJsonStreamContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableJsonStreamContext(val *JsonStreamContext) *NullableJsonStreamContext {
	return &NullableJsonStreamContext{value: val, isSet: true}
}

func (v NullableJsonStreamContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableJsonStreamContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


