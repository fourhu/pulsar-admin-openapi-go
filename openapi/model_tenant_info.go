/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TenantInfo Information of adminRoles and allowedClusters for tenant
type TenantInfo struct {
	// Comma separated list of auth principal allowed to administrate the tenant.
	AdminRoles *[]string `json:"adminRoles,omitempty"`
	// Comma separated allowed clusters.
	AllowedClusters *[]string `json:"allowedClusters,omitempty"`
}

// NewTenantInfo instantiates a new TenantInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTenantInfo() *TenantInfo {
	this := TenantInfo{}
	return &this
}

// NewTenantInfoWithDefaults instantiates a new TenantInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTenantInfoWithDefaults() *TenantInfo {
	this := TenantInfo{}
	return &this
}

// GetAdminRoles returns the AdminRoles field value if set, zero value otherwise.
func (o *TenantInfo) GetAdminRoles() []string {
	if o == nil || o.AdminRoles == nil {
		var ret []string
		return ret
	}
	return *o.AdminRoles
}

// GetAdminRolesOk returns a tuple with the AdminRoles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetAdminRolesOk() (*[]string, bool) {
	if o == nil || o.AdminRoles == nil {
		return nil, false
	}
	return o.AdminRoles, true
}

// HasAdminRoles returns a boolean if a field has been set.
func (o *TenantInfo) HasAdminRoles() bool {
	if o != nil && o.AdminRoles != nil {
		return true
	}

	return false
}

// SetAdminRoles gets a reference to the given []string and assigns it to the AdminRoles field.
func (o *TenantInfo) SetAdminRoles(v []string) {
	o.AdminRoles = &v
}

// GetAllowedClusters returns the AllowedClusters field value if set, zero value otherwise.
func (o *TenantInfo) GetAllowedClusters() []string {
	if o == nil || o.AllowedClusters == nil {
		var ret []string
		return ret
	}
	return *o.AllowedClusters
}

// GetAllowedClustersOk returns a tuple with the AllowedClusters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TenantInfo) GetAllowedClustersOk() (*[]string, bool) {
	if o == nil || o.AllowedClusters == nil {
		return nil, false
	}
	return o.AllowedClusters, true
}

// HasAllowedClusters returns a boolean if a field has been set.
func (o *TenantInfo) HasAllowedClusters() bool {
	if o != nil && o.AllowedClusters != nil {
		return true
	}

	return false
}

// SetAllowedClusters gets a reference to the given []string and assigns it to the AllowedClusters field.
func (o *TenantInfo) SetAllowedClusters(v []string) {
	o.AllowedClusters = &v
}

func (o TenantInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AdminRoles != nil {
		toSerialize["adminRoles"] = o.AdminRoles
	}
	if o.AllowedClusters != nil {
		toSerialize["allowedClusters"] = o.AllowedClusters
	}
	return json.Marshal(toSerialize)
}

type NullableTenantInfo struct {
	value *TenantInfo
	isSet bool
}

func (v NullableTenantInfo) Get() *TenantInfo {
	return v.value
}

func (v *NullableTenantInfo) Set(val *TenantInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableTenantInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableTenantInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTenantInfo(val *TenantInfo) *NullableTenantInfo {
	return &NullableTenantInfo{value: val, isSet: true}
}

func (v NullableTenantInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTenantInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


