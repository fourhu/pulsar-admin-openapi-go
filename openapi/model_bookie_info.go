/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BookieInfo struct for BookieInfo
type BookieInfo struct {
	Hostname *string `json:"hostname,omitempty"`
	Rack *string `json:"rack,omitempty"`
}

// NewBookieInfo instantiates a new BookieInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBookieInfo() *BookieInfo {
	this := BookieInfo{}
	return &this
}

// NewBookieInfoWithDefaults instantiates a new BookieInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBookieInfoWithDefaults() *BookieInfo {
	this := BookieInfo{}
	return &this
}

// GetHostname returns the Hostname field value if set, zero value otherwise.
func (o *BookieInfo) GetHostname() string {
	if o == nil || o.Hostname == nil {
		var ret string
		return ret
	}
	return *o.Hostname
}

// GetHostnameOk returns a tuple with the Hostname field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookieInfo) GetHostnameOk() (*string, bool) {
	if o == nil || o.Hostname == nil {
		return nil, false
	}
	return o.Hostname, true
}

// HasHostname returns a boolean if a field has been set.
func (o *BookieInfo) HasHostname() bool {
	if o != nil && o.Hostname != nil {
		return true
	}

	return false
}

// SetHostname gets a reference to the given string and assigns it to the Hostname field.
func (o *BookieInfo) SetHostname(v string) {
	o.Hostname = &v
}

// GetRack returns the Rack field value if set, zero value otherwise.
func (o *BookieInfo) GetRack() string {
	if o == nil || o.Rack == nil {
		var ret string
		return ret
	}
	return *o.Rack
}

// GetRackOk returns a tuple with the Rack field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BookieInfo) GetRackOk() (*string, bool) {
	if o == nil || o.Rack == nil {
		return nil, false
	}
	return o.Rack, true
}

// HasRack returns a boolean if a field has been set.
func (o *BookieInfo) HasRack() bool {
	if o != nil && o.Rack != nil {
		return true
	}

	return false
}

// SetRack gets a reference to the given string and assigns it to the Rack field.
func (o *BookieInfo) SetRack(v string) {
	o.Rack = &v
}

func (o BookieInfo) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hostname != nil {
		toSerialize["hostname"] = o.Hostname
	}
	if o.Rack != nil {
		toSerialize["rack"] = o.Rack
	}
	return json.Marshal(toSerialize)
}

type NullableBookieInfo struct {
	value *BookieInfo
	isSet bool
}

func (v NullableBookieInfo) Get() *BookieInfo {
	return v.value
}

func (v *NullableBookieInfo) Set(val *BookieInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableBookieInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableBookieInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBookieInfo(val *BookieInfo) *NullableBookieInfo {
	return &NullableBookieInfo{value: val, isSet: true}
}

func (v NullableBookieInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBookieInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


