/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// MemoryLimit struct for MemoryLimit
type MemoryLimit struct {
	AbsoluteValue *int64 `json:"absoluteValue,omitempty"`
	PercentOfMaxDirectMemory *float64 `json:"percentOfMaxDirectMemory,omitempty"`
}

// NewMemoryLimit instantiates a new MemoryLimit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMemoryLimit() *MemoryLimit {
	this := MemoryLimit{}
	return &this
}

// NewMemoryLimitWithDefaults instantiates a new MemoryLimit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMemoryLimitWithDefaults() *MemoryLimit {
	this := MemoryLimit{}
	return &this
}

// GetAbsoluteValue returns the AbsoluteValue field value if set, zero value otherwise.
func (o *MemoryLimit) GetAbsoluteValue() int64 {
	if o == nil || o.AbsoluteValue == nil {
		var ret int64
		return ret
	}
	return *o.AbsoluteValue
}

// GetAbsoluteValueOk returns a tuple with the AbsoluteValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryLimit) GetAbsoluteValueOk() (*int64, bool) {
	if o == nil || o.AbsoluteValue == nil {
		return nil, false
	}
	return o.AbsoluteValue, true
}

// HasAbsoluteValue returns a boolean if a field has been set.
func (o *MemoryLimit) HasAbsoluteValue() bool {
	if o != nil && o.AbsoluteValue != nil {
		return true
	}

	return false
}

// SetAbsoluteValue gets a reference to the given int64 and assigns it to the AbsoluteValue field.
func (o *MemoryLimit) SetAbsoluteValue(v int64) {
	o.AbsoluteValue = &v
}

// GetPercentOfMaxDirectMemory returns the PercentOfMaxDirectMemory field value if set, zero value otherwise.
func (o *MemoryLimit) GetPercentOfMaxDirectMemory() float64 {
	if o == nil || o.PercentOfMaxDirectMemory == nil {
		var ret float64
		return ret
	}
	return *o.PercentOfMaxDirectMemory
}

// GetPercentOfMaxDirectMemoryOk returns a tuple with the PercentOfMaxDirectMemory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MemoryLimit) GetPercentOfMaxDirectMemoryOk() (*float64, bool) {
	if o == nil || o.PercentOfMaxDirectMemory == nil {
		return nil, false
	}
	return o.PercentOfMaxDirectMemory, true
}

// HasPercentOfMaxDirectMemory returns a boolean if a field has been set.
func (o *MemoryLimit) HasPercentOfMaxDirectMemory() bool {
	if o != nil && o.PercentOfMaxDirectMemory != nil {
		return true
	}

	return false
}

// SetPercentOfMaxDirectMemory gets a reference to the given float64 and assigns it to the PercentOfMaxDirectMemory field.
func (o *MemoryLimit) SetPercentOfMaxDirectMemory(v float64) {
	o.PercentOfMaxDirectMemory = &v
}

func (o MemoryLimit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.AbsoluteValue != nil {
		toSerialize["absoluteValue"] = o.AbsoluteValue
	}
	if o.PercentOfMaxDirectMemory != nil {
		toSerialize["percentOfMaxDirectMemory"] = o.PercentOfMaxDirectMemory
	}
	return json.Marshal(toSerialize)
}

type NullableMemoryLimit struct {
	value *MemoryLimit
	isSet bool
}

func (v NullableMemoryLimit) Get() *MemoryLimit {
	return v.value
}

func (v *NullableMemoryLimit) Set(val *MemoryLimit) {
	v.value = val
	v.isSet = true
}

func (v NullableMemoryLimit) IsSet() bool {
	return v.isSet
}

func (v *NullableMemoryLimit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemoryLimit(val *MemoryLimit) *NullableMemoryLimit {
	return &NullableMemoryLimit{value: val, isSet: true}
}

func (v NullableMemoryLimit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemoryLimit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


