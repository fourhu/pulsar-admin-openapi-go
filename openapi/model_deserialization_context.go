/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// DeserializationContext struct for DeserializationContext
type DeserializationContext struct {
	TypeFactory *TypeFactory `json:"typeFactory,omitempty"`
	NodeFactory *map[string]interface{} `json:"nodeFactory,omitempty"`
	AnnotationIntrospector *map[string]interface{} `json:"annotationIntrospector,omitempty"`
	ContextualType *JavaType `json:"contextualType,omitempty"`
	DeserializationFeatures *int32 `json:"deserializationFeatures,omitempty"`
	Base64Variant *Base64Variant `json:"base64Variant,omitempty"`
	ArrayBuilders *ArrayBuilders `json:"arrayBuilders,omitempty"`
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	Locale *Locale `json:"locale,omitempty"`
	Factory *map[string]interface{} `json:"factory,omitempty"`
	Config *DeserializationConfig `json:"config,omitempty"`
	Parser *JsonParser `json:"parser,omitempty"`
}

// NewDeserializationContext instantiates a new DeserializationContext object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeserializationContext() *DeserializationContext {
	this := DeserializationContext{}
	return &this
}

// NewDeserializationContextWithDefaults instantiates a new DeserializationContext object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeserializationContextWithDefaults() *DeserializationContext {
	this := DeserializationContext{}
	return &this
}

// GetTypeFactory returns the TypeFactory field value if set, zero value otherwise.
func (o *DeserializationContext) GetTypeFactory() TypeFactory {
	if o == nil || o.TypeFactory == nil {
		var ret TypeFactory
		return ret
	}
	return *o.TypeFactory
}

// GetTypeFactoryOk returns a tuple with the TypeFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetTypeFactoryOk() (*TypeFactory, bool) {
	if o == nil || o.TypeFactory == nil {
		return nil, false
	}
	return o.TypeFactory, true
}

// HasTypeFactory returns a boolean if a field has been set.
func (o *DeserializationContext) HasTypeFactory() bool {
	if o != nil && o.TypeFactory != nil {
		return true
	}

	return false
}

// SetTypeFactory gets a reference to the given TypeFactory and assigns it to the TypeFactory field.
func (o *DeserializationContext) SetTypeFactory(v TypeFactory) {
	o.TypeFactory = &v
}

// GetNodeFactory returns the NodeFactory field value if set, zero value otherwise.
func (o *DeserializationContext) GetNodeFactory() map[string]interface{} {
	if o == nil || o.NodeFactory == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.NodeFactory
}

// GetNodeFactoryOk returns a tuple with the NodeFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetNodeFactoryOk() (*map[string]interface{}, bool) {
	if o == nil || o.NodeFactory == nil {
		return nil, false
	}
	return o.NodeFactory, true
}

// HasNodeFactory returns a boolean if a field has been set.
func (o *DeserializationContext) HasNodeFactory() bool {
	if o != nil && o.NodeFactory != nil {
		return true
	}

	return false
}

// SetNodeFactory gets a reference to the given map[string]interface{} and assigns it to the NodeFactory field.
func (o *DeserializationContext) SetNodeFactory(v map[string]interface{}) {
	o.NodeFactory = &v
}

// GetAnnotationIntrospector returns the AnnotationIntrospector field value if set, zero value otherwise.
func (o *DeserializationContext) GetAnnotationIntrospector() map[string]interface{} {
	if o == nil || o.AnnotationIntrospector == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AnnotationIntrospector
}

// GetAnnotationIntrospectorOk returns a tuple with the AnnotationIntrospector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetAnnotationIntrospectorOk() (*map[string]interface{}, bool) {
	if o == nil || o.AnnotationIntrospector == nil {
		return nil, false
	}
	return o.AnnotationIntrospector, true
}

// HasAnnotationIntrospector returns a boolean if a field has been set.
func (o *DeserializationContext) HasAnnotationIntrospector() bool {
	if o != nil && o.AnnotationIntrospector != nil {
		return true
	}

	return false
}

// SetAnnotationIntrospector gets a reference to the given map[string]interface{} and assigns it to the AnnotationIntrospector field.
func (o *DeserializationContext) SetAnnotationIntrospector(v map[string]interface{}) {
	o.AnnotationIntrospector = &v
}

// GetContextualType returns the ContextualType field value if set, zero value otherwise.
func (o *DeserializationContext) GetContextualType() JavaType {
	if o == nil || o.ContextualType == nil {
		var ret JavaType
		return ret
	}
	return *o.ContextualType
}

// GetContextualTypeOk returns a tuple with the ContextualType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetContextualTypeOk() (*JavaType, bool) {
	if o == nil || o.ContextualType == nil {
		return nil, false
	}
	return o.ContextualType, true
}

// HasContextualType returns a boolean if a field has been set.
func (o *DeserializationContext) HasContextualType() bool {
	if o != nil && o.ContextualType != nil {
		return true
	}

	return false
}

// SetContextualType gets a reference to the given JavaType and assigns it to the ContextualType field.
func (o *DeserializationContext) SetContextualType(v JavaType) {
	o.ContextualType = &v
}

// GetDeserializationFeatures returns the DeserializationFeatures field value if set, zero value otherwise.
func (o *DeserializationContext) GetDeserializationFeatures() int32 {
	if o == nil || o.DeserializationFeatures == nil {
		var ret int32
		return ret
	}
	return *o.DeserializationFeatures
}

// GetDeserializationFeaturesOk returns a tuple with the DeserializationFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetDeserializationFeaturesOk() (*int32, bool) {
	if o == nil || o.DeserializationFeatures == nil {
		return nil, false
	}
	return o.DeserializationFeatures, true
}

// HasDeserializationFeatures returns a boolean if a field has been set.
func (o *DeserializationContext) HasDeserializationFeatures() bool {
	if o != nil && o.DeserializationFeatures != nil {
		return true
	}

	return false
}

// SetDeserializationFeatures gets a reference to the given int32 and assigns it to the DeserializationFeatures field.
func (o *DeserializationContext) SetDeserializationFeatures(v int32) {
	o.DeserializationFeatures = &v
}

// GetBase64Variant returns the Base64Variant field value if set, zero value otherwise.
func (o *DeserializationContext) GetBase64Variant() Base64Variant {
	if o == nil || o.Base64Variant == nil {
		var ret Base64Variant
		return ret
	}
	return *o.Base64Variant
}

// GetBase64VariantOk returns a tuple with the Base64Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetBase64VariantOk() (*Base64Variant, bool) {
	if o == nil || o.Base64Variant == nil {
		return nil, false
	}
	return o.Base64Variant, true
}

// HasBase64Variant returns a boolean if a field has been set.
func (o *DeserializationContext) HasBase64Variant() bool {
	if o != nil && o.Base64Variant != nil {
		return true
	}

	return false
}

// SetBase64Variant gets a reference to the given Base64Variant and assigns it to the Base64Variant field.
func (o *DeserializationContext) SetBase64Variant(v Base64Variant) {
	o.Base64Variant = &v
}

// GetArrayBuilders returns the ArrayBuilders field value if set, zero value otherwise.
func (o *DeserializationContext) GetArrayBuilders() ArrayBuilders {
	if o == nil || o.ArrayBuilders == nil {
		var ret ArrayBuilders
		return ret
	}
	return *o.ArrayBuilders
}

// GetArrayBuildersOk returns a tuple with the ArrayBuilders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetArrayBuildersOk() (*ArrayBuilders, bool) {
	if o == nil || o.ArrayBuilders == nil {
		return nil, false
	}
	return o.ArrayBuilders, true
}

// HasArrayBuilders returns a boolean if a field has been set.
func (o *DeserializationContext) HasArrayBuilders() bool {
	if o != nil && o.ArrayBuilders != nil {
		return true
	}

	return false
}

// SetArrayBuilders gets a reference to the given ArrayBuilders and assigns it to the ArrayBuilders field.
func (o *DeserializationContext) SetArrayBuilders(v ArrayBuilders) {
	o.ArrayBuilders = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *DeserializationContext) GetTimeZone() TimeZone {
	if o == nil || o.TimeZone == nil {
		var ret TimeZone
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetTimeZoneOk() (*TimeZone, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *DeserializationContext) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given TimeZone and assigns it to the TimeZone field.
func (o *DeserializationContext) SetTimeZone(v TimeZone) {
	o.TimeZone = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *DeserializationContext) GetLocale() Locale {
	if o == nil || o.Locale == nil {
		var ret Locale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetLocaleOk() (*Locale, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *DeserializationContext) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given Locale and assigns it to the Locale field.
func (o *DeserializationContext) SetLocale(v Locale) {
	o.Locale = &v
}

// GetFactory returns the Factory field value if set, zero value otherwise.
func (o *DeserializationContext) GetFactory() map[string]interface{} {
	if o == nil || o.Factory == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Factory
}

// GetFactoryOk returns a tuple with the Factory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetFactoryOk() (*map[string]interface{}, bool) {
	if o == nil || o.Factory == nil {
		return nil, false
	}
	return o.Factory, true
}

// HasFactory returns a boolean if a field has been set.
func (o *DeserializationContext) HasFactory() bool {
	if o != nil && o.Factory != nil {
		return true
	}

	return false
}

// SetFactory gets a reference to the given map[string]interface{} and assigns it to the Factory field.
func (o *DeserializationContext) SetFactory(v map[string]interface{}) {
	o.Factory = &v
}

// GetConfig returns the Config field value if set, zero value otherwise.
func (o *DeserializationContext) GetConfig() DeserializationConfig {
	if o == nil || o.Config == nil {
		var ret DeserializationConfig
		return ret
	}
	return *o.Config
}

// GetConfigOk returns a tuple with the Config field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetConfigOk() (*DeserializationConfig, bool) {
	if o == nil || o.Config == nil {
		return nil, false
	}
	return o.Config, true
}

// HasConfig returns a boolean if a field has been set.
func (o *DeserializationContext) HasConfig() bool {
	if o != nil && o.Config != nil {
		return true
	}

	return false
}

// SetConfig gets a reference to the given DeserializationConfig and assigns it to the Config field.
func (o *DeserializationContext) SetConfig(v DeserializationConfig) {
	o.Config = &v
}

// GetParser returns the Parser field value if set, zero value otherwise.
func (o *DeserializationContext) GetParser() JsonParser {
	if o == nil || o.Parser == nil {
		var ret JsonParser
		return ret
	}
	return *o.Parser
}

// GetParserOk returns a tuple with the Parser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DeserializationContext) GetParserOk() (*JsonParser, bool) {
	if o == nil || o.Parser == nil {
		return nil, false
	}
	return o.Parser, true
}

// HasParser returns a boolean if a field has been set.
func (o *DeserializationContext) HasParser() bool {
	if o != nil && o.Parser != nil {
		return true
	}

	return false
}

// SetParser gets a reference to the given JsonParser and assigns it to the Parser field.
func (o *DeserializationContext) SetParser(v JsonParser) {
	o.Parser = &v
}

func (o DeserializationContext) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.TypeFactory != nil {
		toSerialize["typeFactory"] = o.TypeFactory
	}
	if o.NodeFactory != nil {
		toSerialize["nodeFactory"] = o.NodeFactory
	}
	if o.AnnotationIntrospector != nil {
		toSerialize["annotationIntrospector"] = o.AnnotationIntrospector
	}
	if o.ContextualType != nil {
		toSerialize["contextualType"] = o.ContextualType
	}
	if o.DeserializationFeatures != nil {
		toSerialize["deserializationFeatures"] = o.DeserializationFeatures
	}
	if o.Base64Variant != nil {
		toSerialize["base64Variant"] = o.Base64Variant
	}
	if o.ArrayBuilders != nil {
		toSerialize["arrayBuilders"] = o.ArrayBuilders
	}
	if o.TimeZone != nil {
		toSerialize["timeZone"] = o.TimeZone
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	if o.Factory != nil {
		toSerialize["factory"] = o.Factory
	}
	if o.Config != nil {
		toSerialize["config"] = o.Config
	}
	if o.Parser != nil {
		toSerialize["parser"] = o.Parser
	}
	return json.Marshal(toSerialize)
}

type NullableDeserializationContext struct {
	value *DeserializationContext
	isSet bool
}

func (v NullableDeserializationContext) Get() *DeserializationContext {
	return v.value
}

func (v *NullableDeserializationContext) Set(val *DeserializationContext) {
	v.value = val
	v.isSet = true
}

func (v NullableDeserializationContext) IsSet() bool {
	return v.isSet
}

func (v *NullableDeserializationContext) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeserializationContext(val *DeserializationContext) *NullableDeserializationContext {
	return &NullableDeserializationContext{value: val, isSet: true}
}

func (v NullableDeserializationContext) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeserializationContext) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


