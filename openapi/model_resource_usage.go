/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// ResourceUsage struct for ResourceUsage
type ResourceUsage struct {
	Limit *float64 `json:"limit,omitempty"`
	Usage *float64 `json:"usage,omitempty"`
}

// NewResourceUsage instantiates a new ResourceUsage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceUsage() *ResourceUsage {
	this := ResourceUsage{}
	return &this
}

// NewResourceUsageWithDefaults instantiates a new ResourceUsage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceUsageWithDefaults() *ResourceUsage {
	this := ResourceUsage{}
	return &this
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *ResourceUsage) GetLimit() float64 {
	if o == nil || o.Limit == nil {
		var ret float64
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetLimitOk() (*float64, bool) {
	if o == nil || o.Limit == nil {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *ResourceUsage) HasLimit() bool {
	if o != nil && o.Limit != nil {
		return true
	}

	return false
}

// SetLimit gets a reference to the given float64 and assigns it to the Limit field.
func (o *ResourceUsage) SetLimit(v float64) {
	o.Limit = &v
}

// GetUsage returns the Usage field value if set, zero value otherwise.
func (o *ResourceUsage) GetUsage() float64 {
	if o == nil || o.Usage == nil {
		var ret float64
		return ret
	}
	return *o.Usage
}

// GetUsageOk returns a tuple with the Usage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceUsage) GetUsageOk() (*float64, bool) {
	if o == nil || o.Usage == nil {
		return nil, false
	}
	return o.Usage, true
}

// HasUsage returns a boolean if a field has been set.
func (o *ResourceUsage) HasUsage() bool {
	if o != nil && o.Usage != nil {
		return true
	}

	return false
}

// SetUsage gets a reference to the given float64 and assigns it to the Usage field.
func (o *ResourceUsage) SetUsage(v float64) {
	o.Usage = &v
}

func (o ResourceUsage) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Limit != nil {
		toSerialize["limit"] = o.Limit
	}
	if o.Usage != nil {
		toSerialize["usage"] = o.Usage
	}
	return json.Marshal(toSerialize)
}

type NullableResourceUsage struct {
	value *ResourceUsage
	isSet bool
}

func (v NullableResourceUsage) Get() *ResourceUsage {
	return v.value
}

func (v *NullableResourceUsage) Set(val *ResourceUsage) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceUsage) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceUsage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceUsage(val *ResourceUsage) *NullableResourceUsage {
	return &NullableResourceUsage{value: val, isSet: true}
}

func (v NullableResourceUsage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceUsage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


