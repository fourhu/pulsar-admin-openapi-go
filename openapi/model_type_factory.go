/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// TypeFactory struct for TypeFactory
type TypeFactory struct {
	ClassLoader *ClassLoader `json:"classLoader,omitempty"`
}

// NewTypeFactory instantiates a new TypeFactory object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTypeFactory() *TypeFactory {
	this := TypeFactory{}
	return &this
}

// NewTypeFactoryWithDefaults instantiates a new TypeFactory object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTypeFactoryWithDefaults() *TypeFactory {
	this := TypeFactory{}
	return &this
}

// GetClassLoader returns the ClassLoader field value if set, zero value otherwise.
func (o *TypeFactory) GetClassLoader() ClassLoader {
	if o == nil || o.ClassLoader == nil {
		var ret ClassLoader
		return ret
	}
	return *o.ClassLoader
}

// GetClassLoaderOk returns a tuple with the ClassLoader field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TypeFactory) GetClassLoaderOk() (*ClassLoader, bool) {
	if o == nil || o.ClassLoader == nil {
		return nil, false
	}
	return o.ClassLoader, true
}

// HasClassLoader returns a boolean if a field has been set.
func (o *TypeFactory) HasClassLoader() bool {
	if o != nil && o.ClassLoader != nil {
		return true
	}

	return false
}

// SetClassLoader gets a reference to the given ClassLoader and assigns it to the ClassLoader field.
func (o *TypeFactory) SetClassLoader(v ClassLoader) {
	o.ClassLoader = &v
}

func (o TypeFactory) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ClassLoader != nil {
		toSerialize["classLoader"] = o.ClassLoader
	}
	return json.Marshal(toSerialize)
}

type NullableTypeFactory struct {
	value *TypeFactory
	isSet bool
}

func (v NullableTypeFactory) Get() *TypeFactory {
	return v.value
}

func (v *NullableTypeFactory) Set(val *TypeFactory) {
	v.value = val
	v.isSet = true
}

func (v NullableTypeFactory) IsSet() bool {
	return v.isSet
}

func (v *NullableTypeFactory) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTypeFactory(val *TypeFactory) *NullableTypeFactory {
	return &NullableTypeFactory{value: val, isSet: true}
}

func (v NullableTypeFactory) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTypeFactory) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


