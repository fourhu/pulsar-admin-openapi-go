/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// PostSchemaResponse struct for PostSchemaResponse
type PostSchemaResponse struct {
	Version *map[string]interface{} `json:"version,omitempty"`
}

// NewPostSchemaResponse instantiates a new PostSchemaResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPostSchemaResponse() *PostSchemaResponse {
	this := PostSchemaResponse{}
	return &this
}

// NewPostSchemaResponseWithDefaults instantiates a new PostSchemaResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPostSchemaResponseWithDefaults() *PostSchemaResponse {
	this := PostSchemaResponse{}
	return &this
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *PostSchemaResponse) GetVersion() map[string]interface{} {
	if o == nil || o.Version == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PostSchemaResponse) GetVersionOk() (*map[string]interface{}, bool) {
	if o == nil || o.Version == nil {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *PostSchemaResponse) HasVersion() bool {
	if o != nil && o.Version != nil {
		return true
	}

	return false
}

// SetVersion gets a reference to the given map[string]interface{} and assigns it to the Version field.
func (o *PostSchemaResponse) SetVersion(v map[string]interface{}) {
	o.Version = &v
}

func (o PostSchemaResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Version != nil {
		toSerialize["version"] = o.Version
	}
	return json.Marshal(toSerialize)
}

type NullablePostSchemaResponse struct {
	value *PostSchemaResponse
	isSet bool
}

func (v NullablePostSchemaResponse) Get() *PostSchemaResponse {
	return v.value
}

func (v *NullablePostSchemaResponse) Set(val *PostSchemaResponse) {
	v.value = val
	v.isSet = true
}

func (v NullablePostSchemaResponse) IsSet() bool {
	return v.isSet
}

func (v *NullablePostSchemaResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePostSchemaResponse(val *PostSchemaResponse) *NullablePostSchemaResponse {
	return &NullablePostSchemaResponse{value: val, isSet: true}
}

func (v NullablePostSchemaResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePostSchemaResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


