/*
Pulsar Admin REST API

This provides the REST API for admin operations

API version: v2
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// BacklogQuota struct for BacklogQuota
type BacklogQuota struct {
	LimitSize *int64 `json:"limitSize,omitempty"`
	LimitTime *int32 `json:"limitTime,omitempty"`
	Policy *string `json:"policy,omitempty"`
}

// NewBacklogQuota instantiates a new BacklogQuota object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBacklogQuota() *BacklogQuota {
	this := BacklogQuota{}
	return &this
}

// NewBacklogQuotaWithDefaults instantiates a new BacklogQuota object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBacklogQuotaWithDefaults() *BacklogQuota {
	this := BacklogQuota{}
	return &this
}

// GetLimitSize returns the LimitSize field value if set, zero value otherwise.
func (o *BacklogQuota) GetLimitSize() int64 {
	if o == nil || o.LimitSize == nil {
		var ret int64
		return ret
	}
	return *o.LimitSize
}

// GetLimitSizeOk returns a tuple with the LimitSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogQuota) GetLimitSizeOk() (*int64, bool) {
	if o == nil || o.LimitSize == nil {
		return nil, false
	}
	return o.LimitSize, true
}

// HasLimitSize returns a boolean if a field has been set.
func (o *BacklogQuota) HasLimitSize() bool {
	if o != nil && o.LimitSize != nil {
		return true
	}

	return false
}

// SetLimitSize gets a reference to the given int64 and assigns it to the LimitSize field.
func (o *BacklogQuota) SetLimitSize(v int64) {
	o.LimitSize = &v
}

// GetLimitTime returns the LimitTime field value if set, zero value otherwise.
func (o *BacklogQuota) GetLimitTime() int32 {
	if o == nil || o.LimitTime == nil {
		var ret int32
		return ret
	}
	return *o.LimitTime
}

// GetLimitTimeOk returns a tuple with the LimitTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogQuota) GetLimitTimeOk() (*int32, bool) {
	if o == nil || o.LimitTime == nil {
		return nil, false
	}
	return o.LimitTime, true
}

// HasLimitTime returns a boolean if a field has been set.
func (o *BacklogQuota) HasLimitTime() bool {
	if o != nil && o.LimitTime != nil {
		return true
	}

	return false
}

// SetLimitTime gets a reference to the given int32 and assigns it to the LimitTime field.
func (o *BacklogQuota) SetLimitTime(v int32) {
	o.LimitTime = &v
}

// GetPolicy returns the Policy field value if set, zero value otherwise.
func (o *BacklogQuota) GetPolicy() string {
	if o == nil || o.Policy == nil {
		var ret string
		return ret
	}
	return *o.Policy
}

// GetPolicyOk returns a tuple with the Policy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BacklogQuota) GetPolicyOk() (*string, bool) {
	if o == nil || o.Policy == nil {
		return nil, false
	}
	return o.Policy, true
}

// HasPolicy returns a boolean if a field has been set.
func (o *BacklogQuota) HasPolicy() bool {
	if o != nil && o.Policy != nil {
		return true
	}

	return false
}

// SetPolicy gets a reference to the given string and assigns it to the Policy field.
func (o *BacklogQuota) SetPolicy(v string) {
	o.Policy = &v
}

func (o BacklogQuota) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.LimitSize != nil {
		toSerialize["limitSize"] = o.LimitSize
	}
	if o.LimitTime != nil {
		toSerialize["limitTime"] = o.LimitTime
	}
	if o.Policy != nil {
		toSerialize["policy"] = o.Policy
	}
	return json.Marshal(toSerialize)
}

type NullableBacklogQuota struct {
	value *BacklogQuota
	isSet bool
}

func (v NullableBacklogQuota) Get() *BacklogQuota {
	return v.value
}

func (v *NullableBacklogQuota) Set(val *BacklogQuota) {
	v.value = val
	v.isSet = true
}

func (v NullableBacklogQuota) IsSet() bool {
	return v.isSet
}

func (v *NullableBacklogQuota) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBacklogQuota(val *BacklogQuota) *NullableBacklogQuota {
	return &NullableBacklogQuota{value: val, isSet: true}
}

func (v NullableBacklogQuota) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBacklogQuota) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


