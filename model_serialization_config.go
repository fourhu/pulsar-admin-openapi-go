/*
Pulsar Packages REST API

This provides the REST API for Pulsar Packages operations

API version: v3
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// SerializationConfig struct for SerializationConfig
type SerializationConfig struct {
	DefaultPropertyInclusion *Value `json:"defaultPropertyInclusion,omitempty"`
	FilterProvider *map[string]interface{} `json:"filterProvider,omitempty"`
	DefaultPrettyPrinter *map[string]interface{} `json:"defaultPrettyPrinter,omitempty"`
	AnnotationIntrospector *map[string]interface{} `json:"annotationIntrospector,omitempty"`
	SerializationInclusion *string `json:"serializationInclusion,omitempty"`
	SerializationFeatures *int32 `json:"serializationFeatures,omitempty"`
	FullRootName *PropertyName `json:"fullRootName,omitempty"`
	SubtypeResolver *map[string]interface{} `json:"subtypeResolver,omitempty"`
	DefaultVisibilityChecker *map[string]interface{} `json:"defaultVisibilityChecker,omitempty"`
	Attributes *map[string]interface{} `json:"attributes,omitempty"`
	RootName *string `json:"rootName,omitempty"`
	PropertyNamingStrategy *map[string]interface{} `json:"propertyNamingStrategy,omitempty"`
	TypeFactory *TypeFactory `json:"typeFactory,omitempty"`
	DateFormat *DateFormat `json:"dateFormat,omitempty"`
	Base64Variant *Base64Variant `json:"base64Variant,omitempty"`
	HandlerInstantiator *map[string]interface{} `json:"handlerInstantiator,omitempty"`
	AnnotationProcessingEnabled *bool `json:"annotationProcessingEnabled,omitempty"`
	ClassIntrospector *map[string]interface{} `json:"classIntrospector,omitempty"`
	TimeZone *TimeZone `json:"timeZone,omitempty"`
	Locale *Locale `json:"locale,omitempty"`
}

// NewSerializationConfig instantiates a new SerializationConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSerializationConfig() *SerializationConfig {
	this := SerializationConfig{}
	return &this
}

// NewSerializationConfigWithDefaults instantiates a new SerializationConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSerializationConfigWithDefaults() *SerializationConfig {
	this := SerializationConfig{}
	return &this
}

// GetDefaultPropertyInclusion returns the DefaultPropertyInclusion field value if set, zero value otherwise.
func (o *SerializationConfig) GetDefaultPropertyInclusion() Value {
	if o == nil || o.DefaultPropertyInclusion == nil {
		var ret Value
		return ret
	}
	return *o.DefaultPropertyInclusion
}

// GetDefaultPropertyInclusionOk returns a tuple with the DefaultPropertyInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetDefaultPropertyInclusionOk() (*Value, bool) {
	if o == nil || o.DefaultPropertyInclusion == nil {
		return nil, false
	}
	return o.DefaultPropertyInclusion, true
}

// HasDefaultPropertyInclusion returns a boolean if a field has been set.
func (o *SerializationConfig) HasDefaultPropertyInclusion() bool {
	if o != nil && o.DefaultPropertyInclusion != nil {
		return true
	}

	return false
}

// SetDefaultPropertyInclusion gets a reference to the given Value and assigns it to the DefaultPropertyInclusion field.
func (o *SerializationConfig) SetDefaultPropertyInclusion(v Value) {
	o.DefaultPropertyInclusion = &v
}

// GetFilterProvider returns the FilterProvider field value if set, zero value otherwise.
func (o *SerializationConfig) GetFilterProvider() map[string]interface{} {
	if o == nil || o.FilterProvider == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.FilterProvider
}

// GetFilterProviderOk returns a tuple with the FilterProvider field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetFilterProviderOk() (*map[string]interface{}, bool) {
	if o == nil || o.FilterProvider == nil {
		return nil, false
	}
	return o.FilterProvider, true
}

// HasFilterProvider returns a boolean if a field has been set.
func (o *SerializationConfig) HasFilterProvider() bool {
	if o != nil && o.FilterProvider != nil {
		return true
	}

	return false
}

// SetFilterProvider gets a reference to the given map[string]interface{} and assigns it to the FilterProvider field.
func (o *SerializationConfig) SetFilterProvider(v map[string]interface{}) {
	o.FilterProvider = &v
}

// GetDefaultPrettyPrinter returns the DefaultPrettyPrinter field value if set, zero value otherwise.
func (o *SerializationConfig) GetDefaultPrettyPrinter() map[string]interface{} {
	if o == nil || o.DefaultPrettyPrinter == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DefaultPrettyPrinter
}

// GetDefaultPrettyPrinterOk returns a tuple with the DefaultPrettyPrinter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetDefaultPrettyPrinterOk() (*map[string]interface{}, bool) {
	if o == nil || o.DefaultPrettyPrinter == nil {
		return nil, false
	}
	return o.DefaultPrettyPrinter, true
}

// HasDefaultPrettyPrinter returns a boolean if a field has been set.
func (o *SerializationConfig) HasDefaultPrettyPrinter() bool {
	if o != nil && o.DefaultPrettyPrinter != nil {
		return true
	}

	return false
}

// SetDefaultPrettyPrinter gets a reference to the given map[string]interface{} and assigns it to the DefaultPrettyPrinter field.
func (o *SerializationConfig) SetDefaultPrettyPrinter(v map[string]interface{}) {
	o.DefaultPrettyPrinter = &v
}

// GetAnnotationIntrospector returns the AnnotationIntrospector field value if set, zero value otherwise.
func (o *SerializationConfig) GetAnnotationIntrospector() map[string]interface{} {
	if o == nil || o.AnnotationIntrospector == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AnnotationIntrospector
}

// GetAnnotationIntrospectorOk returns a tuple with the AnnotationIntrospector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetAnnotationIntrospectorOk() (*map[string]interface{}, bool) {
	if o == nil || o.AnnotationIntrospector == nil {
		return nil, false
	}
	return o.AnnotationIntrospector, true
}

// HasAnnotationIntrospector returns a boolean if a field has been set.
func (o *SerializationConfig) HasAnnotationIntrospector() bool {
	if o != nil && o.AnnotationIntrospector != nil {
		return true
	}

	return false
}

// SetAnnotationIntrospector gets a reference to the given map[string]interface{} and assigns it to the AnnotationIntrospector field.
func (o *SerializationConfig) SetAnnotationIntrospector(v map[string]interface{}) {
	o.AnnotationIntrospector = &v
}

// GetSerializationInclusion returns the SerializationInclusion field value if set, zero value otherwise.
func (o *SerializationConfig) GetSerializationInclusion() string {
	if o == nil || o.SerializationInclusion == nil {
		var ret string
		return ret
	}
	return *o.SerializationInclusion
}

// GetSerializationInclusionOk returns a tuple with the SerializationInclusion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetSerializationInclusionOk() (*string, bool) {
	if o == nil || o.SerializationInclusion == nil {
		return nil, false
	}
	return o.SerializationInclusion, true
}

// HasSerializationInclusion returns a boolean if a field has been set.
func (o *SerializationConfig) HasSerializationInclusion() bool {
	if o != nil && o.SerializationInclusion != nil {
		return true
	}

	return false
}

// SetSerializationInclusion gets a reference to the given string and assigns it to the SerializationInclusion field.
func (o *SerializationConfig) SetSerializationInclusion(v string) {
	o.SerializationInclusion = &v
}

// GetSerializationFeatures returns the SerializationFeatures field value if set, zero value otherwise.
func (o *SerializationConfig) GetSerializationFeatures() int32 {
	if o == nil || o.SerializationFeatures == nil {
		var ret int32
		return ret
	}
	return *o.SerializationFeatures
}

// GetSerializationFeaturesOk returns a tuple with the SerializationFeatures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetSerializationFeaturesOk() (*int32, bool) {
	if o == nil || o.SerializationFeatures == nil {
		return nil, false
	}
	return o.SerializationFeatures, true
}

// HasSerializationFeatures returns a boolean if a field has been set.
func (o *SerializationConfig) HasSerializationFeatures() bool {
	if o != nil && o.SerializationFeatures != nil {
		return true
	}

	return false
}

// SetSerializationFeatures gets a reference to the given int32 and assigns it to the SerializationFeatures field.
func (o *SerializationConfig) SetSerializationFeatures(v int32) {
	o.SerializationFeatures = &v
}

// GetFullRootName returns the FullRootName field value if set, zero value otherwise.
func (o *SerializationConfig) GetFullRootName() PropertyName {
	if o == nil || o.FullRootName == nil {
		var ret PropertyName
		return ret
	}
	return *o.FullRootName
}

// GetFullRootNameOk returns a tuple with the FullRootName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetFullRootNameOk() (*PropertyName, bool) {
	if o == nil || o.FullRootName == nil {
		return nil, false
	}
	return o.FullRootName, true
}

// HasFullRootName returns a boolean if a field has been set.
func (o *SerializationConfig) HasFullRootName() bool {
	if o != nil && o.FullRootName != nil {
		return true
	}

	return false
}

// SetFullRootName gets a reference to the given PropertyName and assigns it to the FullRootName field.
func (o *SerializationConfig) SetFullRootName(v PropertyName) {
	o.FullRootName = &v
}

// GetSubtypeResolver returns the SubtypeResolver field value if set, zero value otherwise.
func (o *SerializationConfig) GetSubtypeResolver() map[string]interface{} {
	if o == nil || o.SubtypeResolver == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SubtypeResolver
}

// GetSubtypeResolverOk returns a tuple with the SubtypeResolver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetSubtypeResolverOk() (*map[string]interface{}, bool) {
	if o == nil || o.SubtypeResolver == nil {
		return nil, false
	}
	return o.SubtypeResolver, true
}

// HasSubtypeResolver returns a boolean if a field has been set.
func (o *SerializationConfig) HasSubtypeResolver() bool {
	if o != nil && o.SubtypeResolver != nil {
		return true
	}

	return false
}

// SetSubtypeResolver gets a reference to the given map[string]interface{} and assigns it to the SubtypeResolver field.
func (o *SerializationConfig) SetSubtypeResolver(v map[string]interface{}) {
	o.SubtypeResolver = &v
}

// GetDefaultVisibilityChecker returns the DefaultVisibilityChecker field value if set, zero value otherwise.
func (o *SerializationConfig) GetDefaultVisibilityChecker() map[string]interface{} {
	if o == nil || o.DefaultVisibilityChecker == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.DefaultVisibilityChecker
}

// GetDefaultVisibilityCheckerOk returns a tuple with the DefaultVisibilityChecker field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetDefaultVisibilityCheckerOk() (*map[string]interface{}, bool) {
	if o == nil || o.DefaultVisibilityChecker == nil {
		return nil, false
	}
	return o.DefaultVisibilityChecker, true
}

// HasDefaultVisibilityChecker returns a boolean if a field has been set.
func (o *SerializationConfig) HasDefaultVisibilityChecker() bool {
	if o != nil && o.DefaultVisibilityChecker != nil {
		return true
	}

	return false
}

// SetDefaultVisibilityChecker gets a reference to the given map[string]interface{} and assigns it to the DefaultVisibilityChecker field.
func (o *SerializationConfig) SetDefaultVisibilityChecker(v map[string]interface{}) {
	o.DefaultVisibilityChecker = &v
}

// GetAttributes returns the Attributes field value if set, zero value otherwise.
func (o *SerializationConfig) GetAttributes() map[string]interface{} {
	if o == nil || o.Attributes == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Attributes
}

// GetAttributesOk returns a tuple with the Attributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetAttributesOk() (*map[string]interface{}, bool) {
	if o == nil || o.Attributes == nil {
		return nil, false
	}
	return o.Attributes, true
}

// HasAttributes returns a boolean if a field has been set.
func (o *SerializationConfig) HasAttributes() bool {
	if o != nil && o.Attributes != nil {
		return true
	}

	return false
}

// SetAttributes gets a reference to the given map[string]interface{} and assigns it to the Attributes field.
func (o *SerializationConfig) SetAttributes(v map[string]interface{}) {
	o.Attributes = &v
}

// GetRootName returns the RootName field value if set, zero value otherwise.
func (o *SerializationConfig) GetRootName() string {
	if o == nil || o.RootName == nil {
		var ret string
		return ret
	}
	return *o.RootName
}

// GetRootNameOk returns a tuple with the RootName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetRootNameOk() (*string, bool) {
	if o == nil || o.RootName == nil {
		return nil, false
	}
	return o.RootName, true
}

// HasRootName returns a boolean if a field has been set.
func (o *SerializationConfig) HasRootName() bool {
	if o != nil && o.RootName != nil {
		return true
	}

	return false
}

// SetRootName gets a reference to the given string and assigns it to the RootName field.
func (o *SerializationConfig) SetRootName(v string) {
	o.RootName = &v
}

// GetPropertyNamingStrategy returns the PropertyNamingStrategy field value if set, zero value otherwise.
func (o *SerializationConfig) GetPropertyNamingStrategy() map[string]interface{} {
	if o == nil || o.PropertyNamingStrategy == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.PropertyNamingStrategy
}

// GetPropertyNamingStrategyOk returns a tuple with the PropertyNamingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetPropertyNamingStrategyOk() (*map[string]interface{}, bool) {
	if o == nil || o.PropertyNamingStrategy == nil {
		return nil, false
	}
	return o.PropertyNamingStrategy, true
}

// HasPropertyNamingStrategy returns a boolean if a field has been set.
func (o *SerializationConfig) HasPropertyNamingStrategy() bool {
	if o != nil && o.PropertyNamingStrategy != nil {
		return true
	}

	return false
}

// SetPropertyNamingStrategy gets a reference to the given map[string]interface{} and assigns it to the PropertyNamingStrategy field.
func (o *SerializationConfig) SetPropertyNamingStrategy(v map[string]interface{}) {
	o.PropertyNamingStrategy = &v
}

// GetTypeFactory returns the TypeFactory field value if set, zero value otherwise.
func (o *SerializationConfig) GetTypeFactory() TypeFactory {
	if o == nil || o.TypeFactory == nil {
		var ret TypeFactory
		return ret
	}
	return *o.TypeFactory
}

// GetTypeFactoryOk returns a tuple with the TypeFactory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetTypeFactoryOk() (*TypeFactory, bool) {
	if o == nil || o.TypeFactory == nil {
		return nil, false
	}
	return o.TypeFactory, true
}

// HasTypeFactory returns a boolean if a field has been set.
func (o *SerializationConfig) HasTypeFactory() bool {
	if o != nil && o.TypeFactory != nil {
		return true
	}

	return false
}

// SetTypeFactory gets a reference to the given TypeFactory and assigns it to the TypeFactory field.
func (o *SerializationConfig) SetTypeFactory(v TypeFactory) {
	o.TypeFactory = &v
}

// GetDateFormat returns the DateFormat field value if set, zero value otherwise.
func (o *SerializationConfig) GetDateFormat() DateFormat {
	if o == nil || o.DateFormat == nil {
		var ret DateFormat
		return ret
	}
	return *o.DateFormat
}

// GetDateFormatOk returns a tuple with the DateFormat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetDateFormatOk() (*DateFormat, bool) {
	if o == nil || o.DateFormat == nil {
		return nil, false
	}
	return o.DateFormat, true
}

// HasDateFormat returns a boolean if a field has been set.
func (o *SerializationConfig) HasDateFormat() bool {
	if o != nil && o.DateFormat != nil {
		return true
	}

	return false
}

// SetDateFormat gets a reference to the given DateFormat and assigns it to the DateFormat field.
func (o *SerializationConfig) SetDateFormat(v DateFormat) {
	o.DateFormat = &v
}

// GetBase64Variant returns the Base64Variant field value if set, zero value otherwise.
func (o *SerializationConfig) GetBase64Variant() Base64Variant {
	if o == nil || o.Base64Variant == nil {
		var ret Base64Variant
		return ret
	}
	return *o.Base64Variant
}

// GetBase64VariantOk returns a tuple with the Base64Variant field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetBase64VariantOk() (*Base64Variant, bool) {
	if o == nil || o.Base64Variant == nil {
		return nil, false
	}
	return o.Base64Variant, true
}

// HasBase64Variant returns a boolean if a field has been set.
func (o *SerializationConfig) HasBase64Variant() bool {
	if o != nil && o.Base64Variant != nil {
		return true
	}

	return false
}

// SetBase64Variant gets a reference to the given Base64Variant and assigns it to the Base64Variant field.
func (o *SerializationConfig) SetBase64Variant(v Base64Variant) {
	o.Base64Variant = &v
}

// GetHandlerInstantiator returns the HandlerInstantiator field value if set, zero value otherwise.
func (o *SerializationConfig) GetHandlerInstantiator() map[string]interface{} {
	if o == nil || o.HandlerInstantiator == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.HandlerInstantiator
}

// GetHandlerInstantiatorOk returns a tuple with the HandlerInstantiator field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetHandlerInstantiatorOk() (*map[string]interface{}, bool) {
	if o == nil || o.HandlerInstantiator == nil {
		return nil, false
	}
	return o.HandlerInstantiator, true
}

// HasHandlerInstantiator returns a boolean if a field has been set.
func (o *SerializationConfig) HasHandlerInstantiator() bool {
	if o != nil && o.HandlerInstantiator != nil {
		return true
	}

	return false
}

// SetHandlerInstantiator gets a reference to the given map[string]interface{} and assigns it to the HandlerInstantiator field.
func (o *SerializationConfig) SetHandlerInstantiator(v map[string]interface{}) {
	o.HandlerInstantiator = &v
}

// GetAnnotationProcessingEnabled returns the AnnotationProcessingEnabled field value if set, zero value otherwise.
func (o *SerializationConfig) GetAnnotationProcessingEnabled() bool {
	if o == nil || o.AnnotationProcessingEnabled == nil {
		var ret bool
		return ret
	}
	return *o.AnnotationProcessingEnabled
}

// GetAnnotationProcessingEnabledOk returns a tuple with the AnnotationProcessingEnabled field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetAnnotationProcessingEnabledOk() (*bool, bool) {
	if o == nil || o.AnnotationProcessingEnabled == nil {
		return nil, false
	}
	return o.AnnotationProcessingEnabled, true
}

// HasAnnotationProcessingEnabled returns a boolean if a field has been set.
func (o *SerializationConfig) HasAnnotationProcessingEnabled() bool {
	if o != nil && o.AnnotationProcessingEnabled != nil {
		return true
	}

	return false
}

// SetAnnotationProcessingEnabled gets a reference to the given bool and assigns it to the AnnotationProcessingEnabled field.
func (o *SerializationConfig) SetAnnotationProcessingEnabled(v bool) {
	o.AnnotationProcessingEnabled = &v
}

// GetClassIntrospector returns the ClassIntrospector field value if set, zero value otherwise.
func (o *SerializationConfig) GetClassIntrospector() map[string]interface{} {
	if o == nil || o.ClassIntrospector == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.ClassIntrospector
}

// GetClassIntrospectorOk returns a tuple with the ClassIntrospector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetClassIntrospectorOk() (*map[string]interface{}, bool) {
	if o == nil || o.ClassIntrospector == nil {
		return nil, false
	}
	return o.ClassIntrospector, true
}

// HasClassIntrospector returns a boolean if a field has been set.
func (o *SerializationConfig) HasClassIntrospector() bool {
	if o != nil && o.ClassIntrospector != nil {
		return true
	}

	return false
}

// SetClassIntrospector gets a reference to the given map[string]interface{} and assigns it to the ClassIntrospector field.
func (o *SerializationConfig) SetClassIntrospector(v map[string]interface{}) {
	o.ClassIntrospector = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *SerializationConfig) GetTimeZone() TimeZone {
	if o == nil || o.TimeZone == nil {
		var ret TimeZone
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetTimeZoneOk() (*TimeZone, bool) {
	if o == nil || o.TimeZone == nil {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *SerializationConfig) HasTimeZone() bool {
	if o != nil && o.TimeZone != nil {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given TimeZone and assigns it to the TimeZone field.
func (o *SerializationConfig) SetTimeZone(v TimeZone) {
	o.TimeZone = &v
}

// GetLocale returns the Locale field value if set, zero value otherwise.
func (o *SerializationConfig) GetLocale() Locale {
	if o == nil || o.Locale == nil {
		var ret Locale
		return ret
	}
	return *o.Locale
}

// GetLocaleOk returns a tuple with the Locale field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SerializationConfig) GetLocaleOk() (*Locale, bool) {
	if o == nil || o.Locale == nil {
		return nil, false
	}
	return o.Locale, true
}

// HasLocale returns a boolean if a field has been set.
func (o *SerializationConfig) HasLocale() bool {
	if o != nil && o.Locale != nil {
		return true
	}

	return false
}

// SetLocale gets a reference to the given Locale and assigns it to the Locale field.
func (o *SerializationConfig) SetLocale(v Locale) {
	o.Locale = &v
}

func (o SerializationConfig) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.DefaultPropertyInclusion != nil {
		toSerialize["defaultPropertyInclusion"] = o.DefaultPropertyInclusion
	}
	if o.FilterProvider != nil {
		toSerialize["filterProvider"] = o.FilterProvider
	}
	if o.DefaultPrettyPrinter != nil {
		toSerialize["defaultPrettyPrinter"] = o.DefaultPrettyPrinter
	}
	if o.AnnotationIntrospector != nil {
		toSerialize["annotationIntrospector"] = o.AnnotationIntrospector
	}
	if o.SerializationInclusion != nil {
		toSerialize["serializationInclusion"] = o.SerializationInclusion
	}
	if o.SerializationFeatures != nil {
		toSerialize["serializationFeatures"] = o.SerializationFeatures
	}
	if o.FullRootName != nil {
		toSerialize["fullRootName"] = o.FullRootName
	}
	if o.SubtypeResolver != nil {
		toSerialize["subtypeResolver"] = o.SubtypeResolver
	}
	if o.DefaultVisibilityChecker != nil {
		toSerialize["defaultVisibilityChecker"] = o.DefaultVisibilityChecker
	}
	if o.Attributes != nil {
		toSerialize["attributes"] = o.Attributes
	}
	if o.RootName != nil {
		toSerialize["rootName"] = o.RootName
	}
	if o.PropertyNamingStrategy != nil {
		toSerialize["propertyNamingStrategy"] = o.PropertyNamingStrategy
	}
	if o.TypeFactory != nil {
		toSerialize["typeFactory"] = o.TypeFactory
	}
	if o.DateFormat != nil {
		toSerialize["dateFormat"] = o.DateFormat
	}
	if o.Base64Variant != nil {
		toSerialize["base64Variant"] = o.Base64Variant
	}
	if o.HandlerInstantiator != nil {
		toSerialize["handlerInstantiator"] = o.HandlerInstantiator
	}
	if o.AnnotationProcessingEnabled != nil {
		toSerialize["annotationProcessingEnabled"] = o.AnnotationProcessingEnabled
	}
	if o.ClassIntrospector != nil {
		toSerialize["classIntrospector"] = o.ClassIntrospector
	}
	if o.TimeZone != nil {
		toSerialize["timeZone"] = o.TimeZone
	}
	if o.Locale != nil {
		toSerialize["locale"] = o.Locale
	}
	return json.Marshal(toSerialize)
}

type NullableSerializationConfig struct {
	value *SerializationConfig
	isSet bool
}

func (v NullableSerializationConfig) Get() *SerializationConfig {
	return v.value
}

func (v *NullableSerializationConfig) Set(val *SerializationConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableSerializationConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableSerializationConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSerializationConfig(val *SerializationConfig) *NullableSerializationConfig {
	return &NullableSerializationConfig{value: val, isSet: true}
}

func (v NullableSerializationConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSerializationConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


